model test {

default {
  instruction := 32
  little endian
}

component fetcher {
  program counter u32 PC;
  void reset() {
    PC := 0;
  }
}

component SRU {
  memory GPR{
    width := 32
    address := 0..127
    stride := 4
    type := register
  }
  u32 sum(u32 p1, u32 p2)
  {
    return p1+p2
  }
  u32 sub(u32 p1, u32 p2)
  {
    return p1+p2
  }

}


architecture archi {
  device regDev : SRU {
      read is GPR_read8 | GPR_read16 | GPR_read32
      write is GPR_write8 | GPR_write16 | GPR_write32
      port rs : read (3)
      port rd : write (3)
      port mem : read (1)
      port rFin : read (5)
      port subPort : sub
    }

  device sumDev : SRU {
      port sumPort : sum
    }
  
  device fetcherDev : fetcher {
      port fetch : absBranch;
    }
}

pipeline FD maps to archi {
  stage F { fetcherDev:fetch}
  stage D { regDev:rs}
}

pipeline ER maps to archi {
  stage E { sumDev:sumPort}
  stage R { regDev:rd,rFin}
}

pipeline EMR maps to archi {
  stage E { sumDev:sumPort}
  stage M { regDev:mem} 
  stage R { regDev:rd,rFin}
}

machine all {
  FD,(ER|EMR)
}

-- only one instruction : ADD RA, RB, RC 
behavior inst #add
  field u5 RA
  field u5 RB
  field u5 RC
  do
    u32 op1 := 2+SRU.GPR.read32(RB)
    u32 op2 := SRU.sum(SRU.GPR.read16(RA),SRU.GPR.read8(RA))
    u32 result
    SRU.GPR.read32(RA)
    if RA = 0 then
      u32 op3 := \xFF
      op3 := SRU.GPR.read16(RB) + 3 << SRU.GPR.read8(RB)
      if RB = 0 then
        SRU.GPR.read8(RB)
      else
        SRU.GPR.read16(RB)
      end if
      op1 := op1 + op3
    else
      u32 op4 := 3
      u32 op5 := 5
      op1 := 2
      SRU.GPR.write32(RB,op1)
    end if
    result := op1+op2
    SRU.GPR.write16(RA, 2)
    SRU.GPR.write8(RC, 3)
  end do
end behavior

format inst 
  select slice{31..15}
    case 0 is #add
      RA := slice{4..0}
      RB := slice{9..5}
      RC := slice{14..10}
  end select
end format

syntax inst #add
  field u5 RA
  field u5 RB
  field u5 RC
  "test R\d,R\d,R\d" , RA, RB, RC
end syntax
}
-- errorformat=%f:%l:%c:%m
-- makeprg=gadl\ \%
-- vim:ft=hadl:ts=2:sw=2:tw=0
