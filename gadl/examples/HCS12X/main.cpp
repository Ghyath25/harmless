/**
 * generated by HARMLESS : "Hardware ARchitecture Modeling Language
 *                          for Embedded Software Simulation"
 * model : hc12.
 */

#include "hc12/instruction.h"
#include "hc12/arch.h"
#include "XGate/xgate.h"
#include "hc12/instDecoder.h"
#include "hc12/utils.h"

#include <iostream>
using namespace std;



/// debug in progress.
int main(int argc, char *argv[])
{
	//build hc12 and xgate architectures.
	arch *hc12 = new arch();
	xgate *gate = new xgate();
	//associate the memory parts (XGate memory is mapped into hc12 mem).
	xgateStorage *xgateMem = gate->getProgramChunk(0);
	xgateMem->setArch(hc12);
	
	if(argc != 2) cout << "please specify a code file." << endl;
	else 
	{
		if(!(hc12->readCodeFile(argv[1]))) exit(1);
        hc12->setProgramCounter(0xC000);
        int i;
        for (i = 0; i < 10000; i++) {
            hc12->disassemble(hc12->PC(),1);
			//execute one instruction on both hc12 and xgate.
            hc12->execInst(1);
			gate->execInst(1);
        }
		//hc12->decoderStats();
		//if(nbInst)
		//	cout << "nb instructions : " << dec << nbInst << " (" << nbCycle/(float)nbInst << " cycle/inst)." << endl;
	}
	return 0;
}

