%template headerC%
#ifndef __%!MODELNAME%_INST_DECODER_H__
#define __%!MODELNAME%_INST_DECODER_H__

#include "types.h"
#include "action.h" //execute action handling.

/** uncomment the following line not to use the internal 
 *  instruction cache. This leads to computation overhead and should
 *  only be used for benchmarks
 */
//#define DO_NOT_USE_INTERNAL_INSTRUCTION_CACHE

class %!MODELNAME%_instruction;
class context;
class arch;
class %!MODELNAME%_instDecoderCache;
class executeInstAction;

/** class that decodes instruction. The main
 * method is "decode" which will return the decoded 
 * instruction, and increment the Program Counter accordingly
 */
class %!MODELNAME%_instDecoder
{	
	
	#ifndef DO_NOT_USE_INTERNAL_INSTRUCTION_CACHE
		%!MODELNAME%_instDecoderCache *cache;
	#endif

	//this list records all the execute actions that are not in the cache.
	executeInstActionList m_execActionNotInCache;
	
	unsigned int m_nbMemAccessForNextInst;

	//effectively decode the instruction.
	%!MODELNAME%_instruction* decodeDirect(arch *_arch, %!PC_C_TYPE% &ip%!defaultFetchDeclare%);
public:
	/** \brief main function to decode instructions. 
	 *
	 * The number of accesses required to obtain the value is stored in an internal
	 * value and is available with method getNumberOfMemoryAccessesForLastDecode().
	 * \param ctx The context of the cpu (contains memory)
	 * \param ip the value of the instruction pointer. It points
	 * to the value that will be decoded.
	 * \param defaultFetch use the default fetch function, instead of the user defined 
	 *  one. This is mandatory for disassemble, because it should not alter the processor 
	 *  state. This parameter is not generated if no user fetch is declared in description.
	 * \return an instruction object that correspond to the code pointed by
	 * the instructtion pointer.
	 */
	%!MODELNAME%_instruction* decode(arch *_arch, %!PC_C_TYPE% &ip%!defaultFetchDeclare%);

	/** instruction that effectively decode the instruction code.
	 * This method is called by the internal instruction cache if 
	 * the instruction code is not found in the internal cache.
	 * IT SHOULD ONLY BE CALLED BY THE INTERNAL CACHE!
	 */
	%!MODELNAME%_instruction* decodeWithExecActionCache(arch *_arch, %!PC_C_TYPE% &ip%!defaultFetchDeclare%);
	/* constructor. Build the internal instruction cache.*/
	%!MODELNAME%_instDecoder();
	/** return the instruction at address if it is in the cache
	 *  and returns NULL if instruction is NOT in the cache
	 *  It does not decode anything!!
	 *  (if simulator is compiled without instruction cache, it always returns NULL).
	 */
	%!MODELNAME%_instruction *isInCache(const %!PC_C_TYPE% address);
	/** should be called when an executeInstAction is added
	 * The executeInstAction embedds both an instruction AND a list of execute actions.
	 */
	void replaceInCache(const %!PC_C_TYPE% addr, %!MODELNAME%_instruction *inst,executeInstAction *eia);

	/** number of memory accesses required to decode the last instruction
	 * useful in the case of variable length instructions. TODO: not yet used.
	 */
	inline unsigned int const getNumberOfMemoryAccessesForLastDecode() 
		{return m_nbMemAccessForNextInst;};
	
	void addExecuteActionAtAddress(const %!PC_C_TYPE% addr, executeAction *ea);

	//this method should ONLY be called by the cache to inform the decoder
	//that an instruction is removed.
	void cacheRemoveInstruction(%!MODELNAME%_instruction *instToRemove);

	//remove an execute action at address.
	//@return true if the action is effectively removed.
	bool removeExecuteActionAtAddress(const %!PC_C_TYPE% addr, executeAction *ea);
	
	void decoderStats();
};

#endif
