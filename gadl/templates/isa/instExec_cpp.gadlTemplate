%template headerC%
#include "%!core::NAME%_instruction.h" //first for precompiled headers
#include <iostream>
#include "macro.h"
#include "%!core::NAME%_core.h"
#include "utils.h"

using namespace std;

// instruction execute code.

%foreach inst in instCodeListTmp do
  %void %!inst::name%::execute(%!core::NAME%_core *_core){\n%
  
  if useCAS then
    %\t_core->initDDCRegAccess();\n%
  end if
  
  if exists core::branchInstMap[inst::name] then #branch?
    %\t%!core::idfStruct::PC_C_TYPE% val_pc_before = _core->%!core::idfStruct::PC_NAME%();\n%
  end if
  
  if exists core::timingInstMap[inst::name] then #timing counter?
    %\t//pre timing code\n%
    !core::timingInstMap[inst::name]::preTiming
  end if
  
  %\t//effective code\n%
  !inst::code #effective code
  
  if exists core::timingInstMap[inst::name] then #timing counter part 2
    %\t//post timing code\n%
    !core::timingInstMap[inst::name]::postTiming
  end if
  if exists core::branchInstMap[inst::name] then #branch part 2.
    %\t//branch check.\n%
    %\tm_jumpTaken = _core->%!core::idfStruct::PC_NAME%()-val_pc_before;\n%
  end if
  
	if useCAS then
		foreach DDCReg in core::DDCRegDef
		before
		%\n\t//Data Dependancy Controller related part\n%
		do
		%\t_core->getDDCReg%!DDCReg::id%AccessMask(this->m_DDCReg%!DDCReg::id%MaskRead, this->m_DDCReg%!DDCReg::id%MaskWrite);\n%
		end foreach
    end if
  %}\n%
  between %\n%
end foreach
