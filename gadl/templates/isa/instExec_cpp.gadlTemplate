%template headerC%
#include "instruction.h" //first for precompiled headers
#include <iostream>
#include "macro.h"
#include "arch.h"
#include "utils.h"

using namespace std;

// instruction execute code.

%foreach inst in instCodeListTmp do
  %void %!inst::name%::execute(arch *_arch){\n%
  
  if useCAS then
    %\t_arch->initDDCRegAccess();\n%
  end if
  
  if exists branchInstMap[inst::name] then #branch?
    %\t%!PC_C_TYPE% val_pc_before = _arch->%!PC_NAME%();\n%
  end if
  
  if exists timingInstMap[inst::name] then #timing counter?
    %\t//pre timing code\n%
    !timingInstMap[inst::name]::preTiming
  end if
  
  %\t//effective code\n%
  !inst::code #effective code
  
  if exists timingInstMap[inst::name] then #timing counter part 2
    %\t//post timing code\n%
    !timingInstMap[inst::name]::postTiming
  end if
  if exists branchInstMap[inst::name] then #branch part 2.
    %\t//branch check.\n%
    %\tm_jumpTaken = _arch->%!PC_NAME%()-val_pc_before;\n%
  end if
  
  if useCAS then
    if exists DDCReagisterFileAccessTypeMap[inst::name] then #DDC register access (part 2)
      foreach RFA in DDCReagisterFileAccessTypeMap[inst::name]::regFileAccess 
      before
        %\t//Data Dependancy Controller related part\n%
      do
        if RFA::R | RFA::W then
          %\t_arch->getDDCRegFile%!RFA::memoryId%AccessMask(this->m_DDCRegFile%!RFA::memoryId%MaskRead, this->m_DDCRegFile%!RFA::memoryId%MaskWrite);\n%
        end if
      end foreach
    end if
    if exists DDCClassicRegsUsageMap[inst::name] then
      %\t_arch->getDDCRegAccessMask(this->m_DDCRegMaskRead, this->m_DDCRegMaskWrite);\n%
    end if
  end if
  %}\n%
  between %\n%
end foreach
