%template headerC%
#ifndef __%!MODELNAME%_INSTRUCTION_H__
#define __%!MODELNAME%_INSTRUCTION_H__

#include "instructionBase.h"

%
let InstClassMap := emptyMap
if exists InstClassList then #there are instruction classes
  let InstClassMap := mapOf InstClassList by name
end if

let instDDCLockMap := emptyMap
if exists instDDCLock then
  let instDDCLockMap := mapOf instDDCLock by name
end if

foreach inst in INST_CONSTRUCTOR do
  let codeSizeInBytes := (INST_DEFAULT_SIZE_C * inst::codeLength) >> 3
  #declaration
  %class %!inst::name% : public %!MODELNAME%_instruction {\n%
  !inst::INST_FIELD_DEF
  if exists branchInstMap[inst::name] then
    %\tbool m_jumpTaken;\n%
  end if
  if useCAS then
	if exists DDCRegDef then
		foreach DDCReg in DDCRegDef
		before
		%\n\t//Data Dependancy Controller related part\n%
		do
          %\tu64 m_DDCReg%!DDCReg::id%MaskRead;\n%
          %\tu64 m_DDCReg%!DDCReg::id%MaskWrite;\n%
		end foreach
	end if #DDCRegDef
  end if #useCAS

  %
	public:
	%!inst::name !instContructorParam[inst::name]%;
	virtual ~%!inst::name%() {};
	virtual void execute(core *);
	virtual const char* const mnemo();
%#	/** binary code size in bytes
%	virtual unsigned char const size() {return %![codeSizeInBytes string]%;};
	virtual unsigned char const chunks() {return %![inst::codeLength string]%;};
%  if exists InstClassMap[inst::name] then
%	virtual unsigned int const instClass() {return %![InstClassMap[inst::name]::id string]%;};
%  end if
	if useCAS then
		if exists instDDCLockMap[inst::name] then
			let strArgs := ""
			foreach DDCReg in DDCRegDef do
				let strArgs := strArgs."u64 &reg".[DDCReg::id string]
			between let strArgs := strArgs.", "
			end foreach
			%\tvirtual void lockDDCWriteRegs(%!strArgs%);\n%
			%\tvirtual void getDDCReadRegs(%!strArgs%);\n%
		end if
	end if #useCAS
    if exists branchInstMap[inst::name] then
      %\tvirtual bool jumpTaken() {return m_jumpTaken;};\n%
    end if
  foreach id in inst::ID_LIST do
%\tvirtual bool hasID_%!id::ID%() {return true;};\n%
  end foreach
%};\n%
between %\n%
end foreach
%
#endif

