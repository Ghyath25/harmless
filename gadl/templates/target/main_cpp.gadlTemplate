%template headerC%
#include "utils.h"
#include "logManager.h"
%if exists cpuList then #is there a cpu?
  %#include "cpu.h"\n%
end if
foreach core in coreList do
  %#include "%!core::NAME%_instructionBase.h"\n%
  %#include "%!core::NAME%_core.h"\n%
  %#include "%!core::NAME%_instDecoder.h"\n%
end foreach
%
#include <iostream>
#include <stdlib.h>
using namespace std;

/// debug in progress.
int main(int argc, char *argv[])
{ 
%if exists cpuList then #is there a cpu?
%	cpu *simulator = new cpu();
	if(argc != (simulator->nbCores()+2))
		cout << "please specify a code file foreach core and a number of instruction to execute. " << endl;
	else
	{
		unsigned int id;
		for(id=0;id<simulator->nbCores();id++)
			if(!(simulator->getCore(id)->readCodeFile(argv[id+1]))) exit(1);
		simulator->run(atoi(argv[id+1]));

		for(id=0;id<simulator->nbCores();id++)
		{
			core *c=simulator->getCore(id);
			const unsigned int nbInst = c->getNBInstructions();
			cout << "** core : " << id << "**" << endl;
			cout << "PC : " << c->programCounter() << endl;
			cout << nbInst << " instructions executed" << endl;
			cout << c->getNBCycles() << " cycles executed" << endl;
		}
		log()->testOut(logItem::xml);
	}
%
 else
%
	//this example only starts the first core.
%	let first := true
	foreach core in coreList do
		if first  then
			%	%!core::NAME%_core *simulator = new %!core::NAME%_core();\n%
			let first := false
		end if
	end foreach
%
	if(argc != 3) cout << "please specify a code file and a number of instruction to execute. " << endl;
	else
	{
//		if(!(ZeCore->readCodeFile(argv[1]))) exit(1);
//		simulator->setExecutionMode(core::CAS);
//        
//       simulator->execInst(atoi(argv[2]));
//
//		const unsigned int nbInst = ZeCore->getNBInstructions();
//		cout << "PC : " << ZeCore->programCounter() << endl;
//		cout << nbInst << " instructions executed" << endl;
//		cout << ZeCore->getNBCycles() << " cycles executed" << endl;
	}
%	end if #cpu
%	return 0;
}

