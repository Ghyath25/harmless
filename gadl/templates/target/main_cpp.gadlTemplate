%template headerC%
#include "utils.h"
%
foreach core in coreList do
%
#include "%!core::NAME%_instructionBase.h"
#include "%!core::NAME%_core.h"
#include "%!core::NAME%_instDecoder.h"
%end foreach%
#include <iostream>
#include <stdlib.h>
using namespace std;

/// debug in progress.
int main(int argc, char *argv[])
{ 
	//this example only starts the first core.
%	let first := true
	foreach core in coreList do
		if first  then
			%	%!core::NAME%_core *ZeCore = new %!core::NAME%_core();\n%
			let first := false
		end if
	end foreach
%
	if(argc != 3) cout << "please specify a code file and a number of instruction to execute. " << endl;
	else 
	{
		#ifdef GADL_WITH_PIPELINE_TRACE
			ZeCore->usePipelineTrace();
		#endif
		if(!(ZeCore->readCodeFile(argv[1]))) exit(1);
		ZeCore->setExecutionMode(core::CAS);
        
        ZeCore->execInst(atoi(argv[2]));

		const unsigned int nbInst = ZeCore->getNBInstructions();
		cout << "PC : " << ZeCore->programCounter() << endl;
		cout << nbInst << " instructions executed" << endl;
		cout << ZeCore->getNBCycles() << " cycles executed" << endl;
		#ifdef GADL_WITH_PIPELINE_TRACE
			ZeCore->outputPipelineTrace("test1.ptr");
		#endif
	}
	return 0;
}

