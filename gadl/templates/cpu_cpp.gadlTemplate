%template headerC%
#include <iostream>
#include "cpu.h"
%
#includes related to cores
foreach core in coreInstanceList do
  %#include "%!core::type%_core.h"\n%
end foreach

%
cpu::cpu()
{
%
  foreach dev in cpu::deviceList
  before %\t//cpu devices\n%
  do
    %\t%!dev::name% = new periph_%!dev::type%(%!dev::baseAddress%,this);\n%
  end foreach
%
	///cpu memory chunks
%  foreach memInCpu in cpu::memInCpuList do
    let storageName := memInCpu::name."_memChunk"
    %	%!storageName% = new % 
    if memInCpu::type == 0 then %roStorage% #ROM
    else %rwStorage%
    end if
    %("%!storageName%", % #name
    !memInCpu::size%, %!memInCpu::baseAddress%);\n%
  end foreach
%	///cpu cores
%
let nbCores := 0
foreach core in coreInstanceList do
  %\tm_%!core::name% = new %!core::type%_core(%!core::paramCall%, this);\n%
  let nbCores := nbCores+1
end foreach
foreach core in coreInstanceList do
%	m_coreTab[%!core::id%] = m_%!core::name%;\n%
end foreach
%
}

void cpu::run(u64 nbCycle)
{
	for(u64 i=0;i<nbCycle;i++)
	{
		//cores
		for(int coreId=0;coreId<%!nbCores%;coreId++)
		{
			m_coreTab[coreId]->execInst(1);
		}
		//and peripherals.
		manageTiming();
		m_nbCycles++;
	}
}
