%template headerC%

#ifndef __LOG_MANAGER_H__
#define __LOG_MANAGER_H__

#include <string>
#include <iostream>
#include <vector>
#include <map>
#include "types.h"

class timingBase;
class logManager;

//abstract base class for all log items.
class logItem {
	public:
	typedef enum {
		txt,
		xml
	} outFormat;
	virtual std::string data(outFormat format,logManager *mng, int nbTab = 0) = 0;
};

//used to log the configuration (structure)
class logConfigItem : public logItem {
	public:
	typedef enum {
		cpu,
		peripheral,
		timing,
		memory
	} configType;
	private:
	std::vector<logConfigItem *> m_itemList;
	configType  m_type; //peripheral, cpu, ...
	std::string m_name; //'type' of item (TIMER, ...)
	std::string m_instanceName;
	void *m_uid;
	public:
	logConfigItem(configType type, std::string name, std::string instanceName, void *uid);
	void addItem(logConfigItem *item);
	virtual std::string data(outFormat format,logManager *mng,int nbTab = 0);
	void * const uid() {return m_uid;};
	//should not be called directly! internal.
	void generateId(std::string prefix, logManager *mng);
};

//This class store a single event about timing states
//i.e. a timing that changes its state (SUSPENDED, etc)
class logEventTiming : public logItem {
	u64 m_date;
	timingBase *m_timing;
	int m_fromState;
	int m_toState;

	public:
	logEventTiming(timingBase *timing,int fromState,int toState);
	virtual std::string data(outFormat format,logManager *mng,int nbTab = 0);

};

//This class get log information from simulation
//and outputs it in a pretty way (xml, txt, â€¦)
//It uses the singleton design pattern
// --> only one instance, accessed from everywhere with 
// function log() (defined below).
class logManager {
	typedef enum {
		main = 0,
		config = 1,
		event = 2
	} logPart;

	static bool alreadyCreated; //singleton verification

	std::vector<logItem *> m_eventList;  //store events
	std::vector<logConfigItem *> m_configList; //store config parts.

	std::string prologue(logItem::outFormat format, logPart part);
	std::string epilogue(logItem::outFormat format, logPart part);

	//items are identified by their instance pointer (void *)
	//in the generation process: called uid
	//We remove these pointers because they are different 
	//from one instance to another (regression tests...)
	//So, we use ids, based on names.
	std::map<void *, std::string> m_uidToIdMap;
	//get correspondance uid -> id.
	void generateId();

	public:
	logManager() {
		if(alreadyCreated) 
			std::cerr << "error: more than one instance of logManager" << std::endl;
		alreadyCreated = true;
	};
	void addEventItem(logItem *item);
	void addConfigItem(logConfigItem *item);
	void save(std::string filename,logItem::outFormat format=logItem::xml);
	//internal, just called by logConfigItem
	void addId(void *uid, std::string id);
	std::string getId(void *uid);
};

//singleton management.
extern logManager *log();
#endif
