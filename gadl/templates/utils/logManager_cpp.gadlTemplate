#include <iostream>
#include <sstream> //stringstream
#include <fstream> //ofstream
#include "logManager.h"
//#define NDEBUG (uncomment to disable assert())
#include <cassert>
#include "timingBase.h"
using namespace std;

bool logManager::alreadyCreated = false;
logManager _logManager; //unique instance.
logManager *log()
{
	return &_logManager;
}

logEventTiming::logEventTiming(timingBase *timing,int fromState,int toState)
{
	assert(timing != NULL);
	m_date = timing->nbCycles();
	m_timing = timing;
	m_fromState = fromState;
	m_toState = toState;
}

string logEventTiming::data(outFormat format,logManager *mng,int nbTab)
{
	string state[4] = {"SUSPENDED","READY","WAITTIME","WAITEVENT"};
	stringstream result;
	result << string(nbTab,'	');
	switch(format) {
		case txt: 
			result << "date " << m_date << " ";
			result << m_timing->name() << "	:";
			result << state[m_fromState] << " -> " << state[m_toState];
			break;
		case xml:
			result << "<timingEvent";
			result << " id=\"" << mng->getId(m_timing) << "\"";
			result << " date=\"" << m_date  << "\"";
			result << " from=\"" << state[m_fromState] << "\"";
			result << " to=\""   << state[m_toState]   << "\"";
			result << "/>";
			break;
	}
	return result.str();
}

void logManager::addEventItem(logItem *item)
{
	m_eventList.push_back(item);
}

void logManager::addConfigItem(logConfigItem *item)
{
	m_configList.push_back(item);
	generateId();
}

void logManager::save(std::string filename,logItem::outFormat format)
{
	ofstream file;
	file.open(filename.c_str(), ofstream::out);
	if(!file)
		cerr << "open file error :" << filename << " in write mode" << endl;
	else {
		file << prologue(format,main);
		//config
		file << prologue(format,config);
		const int sizeConfig = m_configList.size();
		for(int i=0;i<sizeConfig;i++)
		{
			file << m_configList[i]->data(format,this) << endl;
		}
		file << epilogue(format,config);
		//events
		file << prologue(format,event);
		const int sizeEvent = m_eventList.size();
		for(int i=0;i<sizeEvent;i++)
		{
			file << m_eventList[i]->data(format,this) << endl;
		}
		file << epilogue(format, event);
		file << epilogue(format, main);
		file.close();
	}
}

string logManager::prologue(logItem::outFormat format, logPart part)
{
	string partStr[] = {"harmless", "configs", "events"};
	stringstream result;
	switch(format) {
		case logItem::txt:
			result << "**** " << partStr[part] << " ****" << endl;
			break;
		case logItem::xml:
			if(part == main) {
				result << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" << endl;
				result << "<harmless version=\"1.0\">" << endl;
			} else {
				result << "<" << partStr[part] <<">" << endl;
			}
			break;
	}
	return result.str();
}

string logManager::epilogue(logItem::outFormat format, logPart part)
{
	string partStr[] = {"harmless", "configs", "events"};

	stringstream result;
	switch(format) {
		case logItem::txt:
			result << "----------------" << endl;
			break;
		case logItem::xml:
			result << "</" << partStr[part] <<">" << endl;
			break;
	}
	return result.str();
}

logConfigItem::logConfigItem(configType type, std::string name, std::string instanceName, void *uid) :
	m_type(type),
	m_name(name),
	m_instanceName(instanceName),
	m_uid(uid)
{
}

void logConfigItem::addItem(logConfigItem *item)
{
	m_itemList.push_back(item);
}

string logConfigItem::data(outFormat format,logManager *mng,int nbTab)
{
	string type[] = {"cpu","peripheral","timing","memory"};
	stringstream result;
	string tabs = string(nbTab,'	');
	result << tabs;
	switch(format) {
		case logItem::txt: 
			break;
		case logItem::xml:
			result << "<config type=\""+type[m_type]+"\" ";
			result << "name=\""<<m_name<<"\" ";
			result << "instance=\""<<m_instanceName<<"\" ";
			result << ">" << endl;
			const int size = m_itemList.size();
			for(int i=0;i<size;i++)
			{
				result << m_itemList[i]->data(format,mng,nbTab+1);
			}
			result << tabs << "</config>" << endl;
			break;
	}
	return result.str();
}

void logManager::generateId()
{
	const int size = m_configList.size();
	for(int i=0;i<size;i++)
	{
		m_configList[i]->generateId("",this);
	}
}

void logManager::addId(void *uid, std::string id)
{
	//cout << "add " << id << " -> " << hex << (u64)uid << endl;
	//check that it does not existsâ€¦
	map<void *, string>::iterator it = m_uidToIdMap.find(uid);
	assert(it == m_uidToIdMap.end());
	//add.
	m_uidToIdMap[uid] = id;
}

void logConfigItem::generateId(std::string prefix, logManager *mng)
{
	//current item
	string name = prefix+m_instanceName;
	mng->addId(m_uid,name);
	//sub items
	const int size = m_itemList.size();
	for(int i=0;i<size;i++)
	{
		m_itemList[i]->generateId(name+".",mng);
	}
}

std::string logManager::getId(void *uid)
{
	map<void *, string>::iterator it = m_uidToIdMap.find(uid);
	assert(it != m_uidToIdMap.end());
	return (*it).second;	
}

