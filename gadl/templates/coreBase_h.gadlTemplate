%template headerC%
#ifndef __CORE_H__
#define __CORE_H__

#include "types.h"
#include "storage.h"

#include <map> //used for breakpoints.
class breakpointAction;
class codeReader;
class executeAction;

//abstract class for a core.
class core
{
	public:
		/** ISS (Instruction Set Simulation) mode or
		 *  CAS (Cycle Accurate Simulation) mode.
		 */ 
		enum executionMode {ISS, CAS};
				
	protected:
		/** object that read a program file from a Intel Hex, 
		 *  Motorola SRecord or Elf format and store code in memory.
		 *  It can also handle symbols.
		 */
		codeReader *m_reader;

		///store the number of cycles executed since the beginning of the simulation.
		///value is not updated in ISS mode.
		u64 m_nbCycles;

		///store the number of instruction executed since the beginning of the simulation.
		///value is updated both in CAS and ISS modes.
		u64 m_nbInst;

		/** values are the same than in gdb-server.
		 *  0  : Run
		 *  18 : Stopped by user
		 *  5  : Breakpoint found 
		 */
		int m_stopSimu; 

	private:
		/** used for breakpoints (interactive simulation). Breakpoints use actions.
		 * When a breakpoint is defined at an address, an action is inserted. 
		 * This variable store the address of the last breakpoint found.
		 */
		u32  m_lastBreakpointAddr;
		
		/** map that stores a pointer for each action. This is useful to
		*  remove all breakpoints. Key is the address (in program chunk).
		*/  
		std::map<u32, breakpointAction *> m_breakpointActionMap; 

		///ISS (Instruction Set Simulation) mode or
		///CAS (Cycle Accurate Simulation) mode.
		executionMode m_executionMode;
	
		//internal function related to file I/O stubs.
		bool addIOStub(executeAction *act, std::string funcName);

	public:
		core();
		virtual ~core();

		/** 
		 * Stop the simulation (breakpoint, ..)
		 * \param : reason: see m_stopSimu var
		 */
		void stopSimu(int);

		/*******************************************************************
		 *  status
		 *******************************************************************/
		/** execution mode:
		 *   * core::ISS -> instruction set simulation (no time)
		 *   * core::CAS -> Cycle Accurate Simulation (time, but slower)
		 */
		executionMode getExecutionMode() {return m_executionMode;};
		/** get number of cycles executed since the beginning of the simulation.
		 * This value is not modified in ISS mode (functional)
		 */
		inline unsigned long long const getNBCycles() const {return m_nbCycles;};
		/// get number of instruction executed since the beginning of the simulation.
		inline unsigned long long const getNBInstructions() const {return m_nbInst;};

		///debugging info
		virtual void decoderStats() = 0;
		/** generic function to access the program counter */
		virtual u32 programCounter() = 0;

		/** returns the function symbol for a given address 
		    (typically program counter). (for ELF files). */
		std::string whichFunctionAtAddress(const u32 v_addr);
		/** Disassemble binary code.
		* \param ipStart Instruction Pointer from which the disassemble is started
		* \param nbInst Number of insts to disassemble: Value may be exceeded: 
		* i.e. if set to 1 to decode a 32 bits instruction, 1 instruction will be decoded.
		* \param verbose return also the address where the code is decoded and the opcode of the instruction.
		*/ 
		virtual std::string disassemble(const unsigned int pcStart, const int nbInst, bool verbose = false) = 0;
		/** print the value of all variables defined as 'register' in the description
          * It does not take into account memory chunk defined has 'register'
          */
		virtual void printRegs() {};
		/* @return the physical address. 
		 * If no physical address is matching, the virtual address is returned
		 * and found is set to false.
	 	 */
		#ifdef SWIG /*Swig wrapper (for Python interface)*/
			u32 getPhysicalAddress(const u32 v_addr, bool &OUTPUT);
		#else
			u32 getPhysicalAddress(const u32 v_addr, bool &found);
		#endif
		/* this function search for the virtual address and size of the symbol name (first parameter).
		 * @return true if a symbol have been found, and updates v_addr and size
		 * @return false if no symbol is matching. v_addr and size are not updated.
		 */
		#ifdef SWIG /*Swig wrapper (for Python interface)*/
			bool getSymbolObjectAddress(const char *symbolName, u32 &OUTPUT, u32 &OUTPUT);
		#else
			bool getSymbolObjectAddress(const char *symbolName, u32 &v_addr, u32 &size);
		#endif
		/* this function search for the virtual address of the function in parameter.
		 * \return the virtual address of the function
		 * or -1) (=> 0xFFFFFFFF) if not found.
		 */
		u32 getFunctionAddress(const char *symbolName);
		
		/** print all object symbols (for ELF files)*/
		void dumpObjects();
		/** print all function symbols  (for ELF files)*/
		void dumpFunctions();

		/** return the instruction object at address. Note that p_addr is modified and 
		 * updated to point to the next instruction address.
		 **/
		#ifdef SWIG /*Swig wrapper (for Python interface)*/
			virtual std::string getInstructionStaticInfo(unsigned int &INOUT) = 0;
		#else
			virtual std::string getInstructionStaticInfo(unsigned int &p_addr) = 0;
		#endif

		/*******************************************************************
		 *  Configuration
		 *******************************************************************/
		/** Set the simulator mode:
		 *  - ISS: Instruction Set Simulator
		 *  - CAS: Cycle Accurate Simulator
		 */
		void setExecutionMode(const executionMode mode);
		/** install io stubs to support open, close, read and write functions.
		 * These functions are mapped to the host, using actions.
		 * It returns true if there was no error.
		 * This function requires extra files (ioStubs.cpp and .h) that are nor yet
		 * generated by the Harmless compiler (have a look in the example folder)
		 * Moreover, the USE_IO_STUBS should be set to 1 in the Makefile and it requires
		 * actions.
		 */
		bool useIOStubs();

		/*******************************************************************
		 *  Execution
		 *******************************************************************/
		/// restore the cpu in the init state (called in constructor)
		virtual void reset();
		/** Read a code file with 
		 *  - Intel Hex format
		 *  - Motorola SRecord format
		 *  - ELF format (if linked with the appropriate library).
		 *  (no CRC verification)
		 *  \return true if the code file is correctly read.
		 */
		/// Exec instruction (ISS mode)
		/// \param nb number of instruction to execute.
		virtual int emuInst(const unsigned int nb) = 0;
		bool readCodeFile(const char *filename, const bool verbose = false);
		/** generic function to access the program counter */
		virtual void setProgramCounter(const u32 val) = 0;
		/** simulate instructions of the processor.
		* The simulator may be in CAS or ISS mode
		* \param nb number of instruction to execute.
		* \return what causes the execution to stop : 18 on user stop, 5 on breakpoint or 0 on success
		*/ 
		virtual int execInst(const unsigned int nb) = 0;

		/** run simulation until PC=addr. It does not take into account segmentation!!
		 *  \param addr the address compared to the program counter
		 *  \param max the max number of instruction to execute.
		 */
		virtual void runUntil(const unsigned int addr, const unsigned int max) = 0;

		/** return the object that reads the binary application code */
		codeReader *getCodeReader() {return m_reader;};

		/*******************************************************************
		 *  Breakpoints
		 *******************************************************************/
		/** remove all breakpoints (interactive simulation) */
		void removeAllBreakpoints();
		/** remove a breakpoint for interactive simulation */
		void removeBreakpoint(const unsigned int addr);
		/** remove a breakpoint for interactive simulation */
		void removeBreakpoint(const char *symbolName);
		/** add a breakpoint for interactive simulation
		 *  An error is generated if there is already a breakpoint at this addr.
		 */
		void addBreakpoint(const unsigned int addr);
		/** add a breakpoint for interactive simulation */
		void addBreakpoint(const char *symbolName);

		/*******************************************************************
		 *  Internals :public functions that are accessed by other
		 *             simulators objects: memory, actions, ...
		 *             THEY SHOULD NOT BE CALLED DURING SIMULATION.
		 *******************************************************************/
		/** return the memory chunk that contains 'address'. This is used for program loading. */
		virtual storage * getProgramChunk(const unsigned int address) = 0;
		/** internal function that translates an address from the linker
          * to a real address in the global memory address.
          */
		virtual u32 linkerAddressTranslation(u32 addr) = 0;

		virtual void removeExecuteActionAtAddress(const u32 addr, executeAction *ea) = 0;
		virtual void addExecuteActionAtAddress(const u32 addr, executeAction *ea) = 0;
		/** this method should ONLY be called by an action that is 
		 *  associated to a breakpoint (interactive simulation)
		 */
		inline void actionFoundABreakpoint(const u32 addr) {stopSimu(5); m_lastBreakpointAddr = addr;};
		/**
		 * This is an internal function that SHOULD ONLY be called 
		 * from harmless instructions.
		 */
		inline void addCycle(unsigned int val) {m_nbCycles += val;};
		/*******************************************************************
		 * Automatically generated functions.
		 *******************************************************************/
		/** Memory Access */

%foreach mem in memSpaceList do
  foreach methodSize in mem::methodSizeList do
    #R/W access
    let type := CType(methodSize::size)
    %\t\tvirtual u%!type% %!mem::name%_read%!methodSize::size%(const u32 address) = 0;\n%
    %\t\tvirtual void %!mem::name%_write%!methodSize::size%(const u32 address, const u%!type% value) = 0;\n%
  end foreach
end foreach
%

};
#endif 
