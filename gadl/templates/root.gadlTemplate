% #This file is the root file for the template generation of source files generated by gadl.
# It calls other templates is subdirectories.

write to exportDir."/Makefile":
  template Makefile_1

#let useCAS := false
let useCounters := false

#get the list of all .cpp files for compilation.
let cppFileList := emptyList #files common to each target.

#generate the cpu main file.
if exists cpuList then
  foreach cpu in cpuList do
    write to exportDir."/cpu.h":
      template cpu_h
    end write
    write to exportDir."/cpu.cpp":
      template cpu_cpp
    end write
    %cpu.cpp \\\n%
  end foreach
end if

#generate each core
foreach core in coreList do
  template coreRoot
end foreach

write to exportDir."/core.h":
  template coreBase_h
end write
write to exportDir."/core.cpp":
  template coreBase_cpp
end write
%core.cpp \\\n%

#peripherals
template peripheral in "peripheral"

#utils to generate code (types, macro, ..)
template utils in "utils"

#memory related files
template memory in "memory"

#read a binary file and store it in simulator memory (sRecord, H86, elf)
template codeReader in "codeReader"

#task and stack observation
template stackObs in "stackObs"

##TODO: work in progress.
#template peripherals in peripherals

#Makefile targets (standalone, python and gdb).
template target in "target"

#############################################################
##timings:
#############################################################
##generate a map that associates a device to its timing.
#let deviceToTimingMap := emptyMap
#if exists archList then
#  foreach arch in archList do
#    #create a device map (of devices that are associated to a timing)
#    #value is the related timing name.
#    let deviceMap := mapOf arch::deviceList by name
#    foreach connection in arch::signalConnectList do
#      let deviceName := connection::devNameSrc
#      if not exists deviceToTimingMap[deviceName] then
#        let timingName := deviceMap[deviceName]::component
#        let deviceToTimingMap[deviceName] := timingName
#      end if
#      let deviceName := connection::devNameDst
#      if not exists deviceToTimingMap[deviceName] then
#        let timingName := deviceMap[deviceName]::component
#        let deviceToTimingMap[deviceName] := timingName
#      end if
#    end foreach
#  end foreach
#end if
#
##new timing part (memory hierarchy)
#template timing in timing

#write to MODELNAME."/componentTypeDef.h":
#  template componentTypeDef_h
#end write

  template Makefile_2
end write
%
