% #This file is the root file for the template generation of source files generated by gadl.
# It calls other templates is subdirectories.

write to MODELNAME."/Makefile":
  template Makefile_1

#let useCAS := false

#get the list of all .cpp files for compilation.
let cppFileList := emptyList #files common to each target.

##Instruction Set Architecture related files.
template isa in isa
#
#logs..
template log in log

#Cycle accurate related files
template cas in cas

#utils to generate code (types, macro, ..)
template utils in utils

#memory related files
template memory in memory

#read a binary file and store it in simulator memory (sRecord, H86, elf)
template codeReader in codeReader

#task and stack observation
template stackObs in stackObs

#TODO: work in progress.
template peripherals in peripherals

#Makefile targets (standalone, python and gdb).
template target in target

#casC -> compiled CAS specific files.
template casC in casC

#generate a counter Map to count
# *component method access
# *register access (R/W) in components and memory.
let counterMap := emptyMap
if exists useCounters then
  foreach component in componentList do
    foreach method in component::methodList do
      let key := "counter_".component::name."_".method::name
    let counterMap[key] := true
    end foreach
    foreach reg in component::registerList do
      let key := "counter_read_".reg::regName
      if not exists counterMap[key] then
        let counterMap[key] := true
      end if
      let key := "counter_write_".reg::regName
      if not exists counterMap[key] then
        let counterMap[key] := true
      end if
    end foreach
  end foreach
end if

############################################################
#timings:
############################################################
#generate a map that associates a device to its timing.
let deviceToTimingMap := emptyMap
if exists archList then
  foreach arch in archList do
    #create a device map (of devices that are associated to a timing)
    #value is the related timing name.
    let deviceMap := mapOf arch::deviceList by name
    foreach connection in arch::signalConnectList do
      let deviceName := connection::devNameSrc
      if not exists deviceToTimingMap[deviceName] then
        let timingName := deviceMap[deviceName]::component
        let deviceToTimingMap[deviceName] := timingName
      end if
      let deviceName := connection::devNameDst
      if not exists deviceToTimingMap[deviceName] then
        let timingName := deviceMap[deviceName]::component
        let deviceToTimingMap[deviceName] := timingName
      end if
    end foreach
  end foreach
end if

#new timing part (memory hierarchy)
template timing in timing

#main header.
write to MODELNAME."/arch.h":
  template arch_h
end write

write to MODELNAME."/arch.cpp":
  template arch_cpp
end write
%arch.cpp \\\n%

write to MODELNAME."/componentTypeDef.h":
  template componentTypeDef_h
end write

  template Makefile_2
end write
%
