%template headerC%
#ifndef __PERIPH_%!peripheral::name%_H__
#define __PERIPH_%!peripheral::name%_H__

#include "peripheral.h"
#include "macro.h"

% #declare class of included devices.
foreach dev in peripheral::idfStruct::varList do
  if dev::varClassId == 6 then     #device
    %#include "periph_%!dev::type%.h"\n%
  end if
end foreach

#declare class of included timings.
foreach timingPart in peripheral::timingList do
  let className := baseName."_timing_".timingPart::name
  %class %!className%;\n%
end foreach

%

class %!baseName% : public peripheral
{
%
#timings are friend classes
foreach timingPart in peripheral::timingList do
  let className := baseName."_timing_".timingPart::name
  %\tfriend class %!className%;\n%
end foreach

#instances of timings

foreach timingPart in peripheral::timingList do
  let className := baseName."_timing_".timingPart::name
  %\t%!className% *m_%!className%;\n%
end foreach


#define internal typedefs.
!peripheral::idfStruct::typeDefCode

#local var instantiation (and devices).
foreach var in peripheral::idfStruct::varList
before %\t//local variables and devices defined inside this peripheral.\n%
do
  #if var::varClassId == 4 then #local var
  if var::declare != "" then
    !var::declare%\n%
  end if
  #end if
end foreach

#generate method that checks the enable condition
foreach timingPart in peripheral::timingList
before %\t//fonction to enable/disable a timing\n%
do
  %\tvoid checkEnableTiming_%!timingPart::name%();\n%
end foreach

%
	public:
		%!baseName%(const u32 address, timingRun *);

%if [peripheral::deviceList length] > 0 then
	%\tvirtual peripheral *chunk(u32 address);\n%
end if%
		///register accessors (-> remap in memory for 'actions').
%
let regMap := mapof peripheral::regList by name
let regEnableTimingMap := mapof peripheral::timingEnableList by name
foreach reg in peripheral::idfStruct::varList do
  if reg::varClassId == 2      #SFR
   | reg::varClassId == 3 then #reg fields.
    %\t\t//register %!reg::name% access\n%
    ##### getter code #####
    %\t\t%!reg::type% %!reg::name%() {\n%
    let key := "counter_read_".reg::name #access counter
    if exists counterMap[key] then
      %\t\t\t%!key%++;\n%
    end if
    #effective code
    %\t\t\t%
    if reg::varClassId == 2 then #SFR
      #should be converted to a mem access.
      %return this->read%!reg::size%AtAddress(%
      !regMap[reg::name]::address%+dumStorage::m_offset);%
    elsif reg::varClassId == 3 then #reg fields.
      !reg::getterNoLocal
    else error reg::name: "internal error - bad type"
    end if
    %\n\t\t};\n%
    ##### setter code #####
    %\t\tvoid set%!reg::name%(const %!reg::type
    if reg::constant then 
      %) {% 
    else
      % value) {\n%
      #effective code
      if reg::varClassId == 2 then #SFR
        #should be converted to a mem access.
        %\t\t\t%
        %this->write%!reg::size%AtAddress(%
        !regMap[reg::name]::address%+dumStorage::m_offset,value);\n%
      elsif reg::varClassId == 3 then #reg fields.
        !reg::setter%\n%
      else error reg::name: "internal error - bad type"
      end if
    end if #constant
    let key := "counter_write_".reg::name #access counter
    if exists counterMap[key] then
      %\t\t\t%!key%++;\n%
    end if
    #Access to a register may enable/disable a timing.
    if exists regEnableTimingMap[reg::name] then
      foreach timingEn in regEnableTimingMap[reg::name]::timing do
        %\t\t\tcheckEnableTiming_%!timingEn::name%();\n%
      end foreach
    end if
    %\t\t};\n%
  end if #varClass id
end foreach

#methods
%\n\t\t//user methods (defined in the description)\n% 
	foreach method in peripheral::methodList
	do
		let key := "method_".method::name
		%\t\tinline %!method::returnTypeStr% %!key%(%!method::paramStr%) {\n%
		!method::codeStr
		%\n\t\t}\n%
	end foreach
%
	virtual std::string name() {return std::string("%!baseName%");};
};

#endif
