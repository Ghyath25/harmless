#include "timingRdv.h"
#include "timingBase.h"
using namespace std;

timingRdv::timingRdv(enumRdvType type) :
    m_data(0),
    m_state(NOBODY_HERE),
    m_emitter(NULL),
    m_receiver(NULL),
    m_type(type)
{
	cout << "create timingRdv" << endl;
};

u32 timingRdv::data() const
{
    return m_data;
}

void timingRdv::setData(const u32 &data)
{
    m_data = data;
}

timingRdv::enumRdvState timingRdv::state() const
{
    return m_state;
}

void timingRdv::setState(const timingRdv::enumRdvState &state)
{
    m_state = state;
}

timingBase *timingRdv::emitterWaiting() const
{
    return m_emitter;
}

bool timingRdv::synchroEmit(timingBase *emitter, bool type)
{
	bool emitterCanResume = false;
    if(type) m_type = BROADCAST; else m_type = STANDARD;
    //synchro.
	if(m_receiver) //an automata is waiting
	{
		timingBase *rec = m_receiver;
		cout << "rdv: " << emitter->name() << " -> " << m_receiver->name() << endl;
		//reset signal
		m_receiver = NULL;
		rec->run();
		emitterCanResume = true;
	} else { //no one is waiting
		switch(m_type) {
			case STANDARD:
				cout << "wait (tx): " << emitter->name() << endl;
				//no automata is waiting: no rendez-vous. Should wait.
				emitterCanResume = false;
			    m_emitter = emitter;	
				break;
			case BROADCAST:
				cout << "nowait bc (tx): " << emitter->name() << endl;
				//broadcast => non blocking signal.
				emitterCanResume = true;
				break;
			default:
				cerr << "unimplemented rendez-vous" << endl;
		}
	}
    return emitterCanResume;
}

timingBase *timingRdv::receiverWaiting() const
{
    return m_receiver;
}

bool timingRdv::synchroReceive(timingBase *receiver)
{
	bool receiverCanResume = false;
    //synchro.
	if(m_emitter) //an automata (emitter) is waiting
	{
		timingBase *emit = m_emitter;
		cout << "rdv: " << m_emitter->name() << " -> " << receiver->name() << endl;
		//reset signal
		m_emitter = NULL;
		emit->run();
		receiverCanResume = true;
	} else { //no one is waiting -> stop
		cout << "wait (rx): " << receiver->name() << endl;
		m_receiver = receiver;
		receiverCanResume = false;
	}
    return receiverCanResume;
}

void timingRdv::debug()
{
	cout << "timingRdv:" << endl;
	if(m_emitter)  cout << "\temitter : " << m_emitter->name() << endl;
	if(m_receiver) cout << "\treceiver: " << m_receiver->name() << endl;
}
