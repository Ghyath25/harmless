#include "timingRdv.h"
#include "timingBase.h"
using namespace std;

timingRdv::timingRdv(enumRdvType type) :
    m_data(0),
    m_state(NOBODY_HERE),
    m_emitter(NULL),
    m_receiver(NULL),
    m_type(type)
{
	cout << "create timingRdv" << endl;
};

u32 timingRdv::data() const
{
    return m_data;
}

void timingRdv::setData(const u32 &data)
{
    m_data = data;
}

timingRdv::enumRdvState timingRdv::state() const
{
    return m_state;
}

void timingRdv::setState(const timingRdv::enumRdvState &state)
{
    m_state = state;
}

timingBase *timingRdv::emitterWaiting() const
{
    return m_emitter;
}

bool timingRdv::synchroEmit(timingBase *emitter, bool type)
{
    m_emitter = emitter;
    if(type) m_type = BROADCAST; else m_type = STANDARD;
    //TODO -> synchro.
    return true;
}

timingBase *timingRdv::receiverWaiting() const
{
    return m_receiver;
}

bool timingRdv::synchroReceive(timingBase *receiver)
{
    m_receiver = receiver;
    //TODO: synchro.
    return true;
}

timingRdv::enumRdvType timingRdv::type() const
{
    return m_type;
}

void timingRdv::debug()
{
	cout << "timingRdv:" << endl;
	if(m_emitter)  cout << "\temitter : " << m_emitter->name() << endl;
	if(m_receiver) cout << "\treceiver: " << m_receiver->name() << endl;
}
