#include "timingBase.h"
#include <iostream>
#include <string>
using namespace std;

timingBase::timingBase(timingRun *tr) : m_timingRun(tr),m_nbCyclesToDo(0) {
	for(int i=0; i<16;i++)
		stateTransitionTab[i] = &timingBase::changeStateNOK;
	stateTransitionTab[SUSPENDED << 2 | READY]     = &timingBase::changeStateSuspToReady;
	stateTransitionTab[WAITTIME  << 2 | SUSPENDED] = &timingBase::changeStateWaittimeToSusp;
	stateTransitionTab[WAITTIME  << 2 | READY]     = &timingBase::changeStateWaitToReady;
	stateTransitionTab[WAITEVENT << 2 | READY]     = &timingBase::changeStateWaitToReady;
	stateTransitionTab[READY     << 2 | WAITTIME]  = &timingBase::changeStateBase;
	stateTransitionTab[READY     << 2 | WAITEVENT] = &timingBase::changeStateBase;
	stateTransitionTab[READY     << 2 | SUSPENDED] = &timingBase::changeStateBase;
	stateTransitionTab[SUSPENDED << 2 | SUSPENDED] = &timingBase::changeStateBase;
};


void timingBase::debugState(int from,int to)
{
	string state[4] = {"SUSPENDED","READY","WAITTIME","WAITEVENT"};
	cout << "date " << nbCycles() << " " << name() << "\t:" << state[from] << " -> " << state[to] << endl;
}

void timingBase::changeStateNOK(const int newState)
{
	cout <<"internal error: state transition not taken into account: " <<flush;
	debugState(m_currentState,newState);
}

void timingBase::changeStateBase(const int newState)
{
	debugState(m_currentState,newState);
	m_currentState = newState;
}

void timingBase::changeStateSuspToReady(const int newState)
{
	//cerr << "changeStateSuspToReady" << endl;
	debugState(m_currentState,newState);
	m_currentState = READY;
	if(m_nbCyclesToDo) { //have to WAIT (same code as setNextWakeUpDate).
		m_nextWakeUpDate = nbCycles()+m_nbCyclesToDo;
		setState(WAITTIME); //recursive call
	} else {
		run(); //may call setState(...)
	}		
}

void timingBase::changeStateWaittimeToSusp(const int newState)
{
	debugState(m_currentState,newState);
	//cerr << "changeStateWaittimeToSusp" << endl;
	//store the rest of cycles to wait:
	m_nbCyclesToDo = m_nextWakeUpDate - nbCycles();
	m_timingRun->timingRemoveWaitForCycles(this);
	m_currentState = SUSPENDED;	
}

//either wait time or wait event to ready
void timingBase::changeStateWaitToReady(const int newState)
{
	debugState(m_currentState,newState);
	m_currentState = READY;
	run(); //may call setState(...)
}

