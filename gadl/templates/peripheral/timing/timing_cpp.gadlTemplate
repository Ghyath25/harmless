%template headerC%
#include <iostream>
#include "types.h"
//#include "timingSignal.h"

#include "%!className%.h"
#include "%!baseName%.h"
#include "timingRun.h"
#include "timingRdv.h"

%!className%::%!className%(timingRun *tr, %!baseName% *peripheral, const unsigned int inOffset, const unsigned int outOffset) : 
	timingBase(tr),
	m_peripheral(peripheral),
	m_inOffset(inOffset),
	m_outOffset(outOffset)
{
	init();
%if [timingPart::signalEmit length] > 0 then
%	for(unsigned int i=0;i<NB_SIG_OUT;i++) m_sigOut[i] = NULL;\n%
end if
if [timingPart::signalWait length] > 0 then
%	for(unsigned int i=0;i<NB_SIG_IN ;i++) m_sigIn[i]  = NULL;\n%
end if
%};

//state related code\n%
let id := 0
foreach step in timingPart::timingStepList do
  %void %!className%::step_%!id%()\n{\n%
  #debug
  %\t#ifdef DEBUG_TIMING\n%
  %\t\tstd::cout << "%!className%::step_%!id%";\n%
  %\t\tstd::cout << ", -> " << nbCycles() << std::endl;\n%
  %\t#endif\n%
  # first: updates:
  foreach update in step::updateList do
    %\t%!update::str%\n%
  end foreach
  #synchro:
  foreach synchro in step::synchroInList do
    %\tif(m_sigIn[%!synchro::str%]) m_sigIn[%!synchro::str%]->synchroReceive(this);\n%
  end foreach
  foreach synchro in step::synchroOutList do
    %\tif(m_sigOut[%!synchro::str%]) m_sigOut[%!synchro::str%]->synchroEmit(this,false);\n%
  end foreach
  foreach synchro in step::synchroOutBroadcastList do
    %\tif(m_sigOut[%!synchro::str%]) m_sigOut[%!synchro::str%]->synchroEmit(this,true);\n%
  end foreach
  #wait:
  foreach wait in step::waitCycles
  before 
    %\tm_timingRun->timingWaitForCycles(this,%
  do %(%!wait::exp%)%
  between %+%
  after %);\n%
  end foreach
  #next step.
  if exists step::singleDest then #easy, no condition.
    %\tnextStep = &%!className%::step_%!step::singleDest%;\n%
    %}\n%
  else #more complex
    foreach next in step::nextList
    before %\tif%
    do %(%!next::guard%) {\n%
      %\t\tnextStep = &%!className%::step_%!next::nextId%;\n%
    %\t}\n%
    between %\telse if%
    after %}\n%
    end foreach
  end if
  let id := id + 1
 between %\n%
end foreach #step code.

if [timingPart::signalEmit length] > 0 then%
void %!className%::setRdvForEmitSignal(timingRdv *rdv,enumSigOut sigName)
{
	m_sigOut[sigName] = rdv;
}
%end if #nbSigOut
if [timingPart::signalWait length] > 0 then%
void %!className%::setRdvForWaitSignal(timingRdv *rdv,enumSigIn sigName)
{
	m_sigIn[sigName] = rdv;
}
%end if #nbSigIn
