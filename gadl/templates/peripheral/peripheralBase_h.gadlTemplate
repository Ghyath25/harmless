%template headerC%
#ifndef __PERIPHERAL_H__
#define __PERIPHERAL_H__

#include "storage.h"
#include <string.h> //required by Linux for memcpy...
class timingBase;
class timingRun; //code that call timings.

class peripheral : public rwStorage
{
	protected:
	timingRun *m_timingRun;

	public:
	//constructor
	peripheral(std::string name, u32 size, u32 offset, timingRun *);
	
	//return the memory chunk.
	virtual peripheral *chunk(const u32 address)
	{
		if(matchAddress(address)) return this;
		else return NULL;
	};

	//TODO
//	void timingWaitForCycles(timingBase *,const u64 nbCycles) {};
	bool timingSynchroEmit(timingBase *,unsigned int sigName, const bool broadcast) {return true;};
	bool timingSynchroWait(timingBase *,unsigned int sigName) {return true;};

};

#endif
