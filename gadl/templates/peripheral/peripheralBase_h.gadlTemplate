%template headerC%
#ifndef __PERIPHERAL_H__
#define __PERIPHERAL_H__

#include <string>
#include "storage.h"
#include "timingBase.h"

class logConfigItem;
class timingRun; //code that call timings.

class peripheral : public rwStorage
{
	std::string m_instanceName;

	protected:
	timingRun *m_timingRun;

	public:
	//constructor
	peripheral(std::string instanceName, u32 size, u32 offset, timingRun *);
	
	//return the memory chunk.
	virtual peripheral *chunk(const u32 address)
	{
		if(matchAddress(address)) return this;
		else return NULL;
	};

	virtual std::string name() {return std::string("peripheral");};
	std::string instanceName() {return m_instanceName;};

	//this function should be called at startup to start timings. (after creation)
	virtual void startTimings() {};

	//this function is used to get back configuration (to logManager).
	virtual logConfigItem *getLogConfig() = 0;
};

#endif
