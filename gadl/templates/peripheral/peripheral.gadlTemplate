% 
#super class to run simulation (-> timings)
write to exportDir."/timingRun.h":
  template timingRun_h
end write
write to exportDir."/timingRun.cpp":
  template timingRun_cpp
end write
%timingRun.cpp \\\n%

#super class.
write to exportDir."/peripheral.h":
  template peripheralBase_h
end write
write to exportDir."/peripheral.cpp":
  template peripheralBase_cpp
end write
%peripheral.cpp \\\n%

#generate simulation base class for timings.
write to exportDir."/timingBase.h":
  template timingBase_h in "peripheral/timing"
end write
write to exportDir."/timingBase.cpp":
  template timingBase_cpp in "peripheral/timing"
end write
%timingBase.cpp \\\n%

#generate class for timing synchronisation
write to exportDir."/timingRdv.h":
  template timingRdv_h in "peripheral/timing"
end write
write to exportDir."/timingRdv.cpp":
  template timingRdv_cpp in "peripheral/timing"
end write
%timingRdv.cpp \\\n%

#each peripheral has its own class.
if exists peripheralList then
  foreach peripheral in peripheralList do
    let baseName := "periph_".peripheral::name
    #.h file
    write to exportDir."/".baseName.".h":
      template peripheral_h
    end write
    # .cpp file
    write to exportDir."/".baseName.".cpp":
      template peripheral_cpp
    end write
    !baseName%.cpp \\\n%
    #timings. One class for each timing.
    template timing in "peripheral/timing"
  end foreach
end if

