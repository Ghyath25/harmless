semantics gadl_templates :
  import "gadl_options.gOption" ;
  import "gadl_semantics.gSemantics" ;
#  import "gadl_semantics_default.gSemantics";
  import "template_invocation.gSemantics";

#----------------------------------------------------------------------------
# template management 
#----------------------------------------------------------------------------

#return the template directory (with a '/' at the end)
#looks for (in order)
# * command line argument
# * environment variable
# * default location `pwd`/../templates
#this routine should not be called outside of this file
#(internal use). Use the 'writeTemplates' routine instead.
function templates_directory 
  ->  @string temp_dir 
:
  temp_dir := [option gadl_options.template_dir value] ;
  if temp_dir != "" then
    if [temp_dir firstCharacterOrNul] != '/' then #relative path.
      temp_dir := [@string stringWithCurrentDirectory]."/".temp_dir;
    end if;
    if [temp_dir characterAtIndex !([temp_dir length] - 1)] != '/' then
      temp_dir .= "/" ;
    end if ;
  end if;

end function ;

#function required for the new templates.
function lstringWith ?@string s ->@lstring r:
  r := [@lstring new !s !here];
end function;

once emptyLString ->@lstring ls :
  ls := [@lstring new !"" !here];
end once ;

function computeTemplate
  ??@string prefix
  ??@TfieldMap cfg
  ??@string name
  ->@string result
:
  result := "";
  templateInvocation
    ![@lstring new !name !here]
    !prefix
    !"templates"
    !templates_directory[]
    !true
    !cfg
    !?result
    ?*;
end function;

## populate init template with:
##MODELNAME           : name of model, used everywhere, including generated directory name
##DATE                : current date: no more used, to prevent whole compilation time.
##HEADER_C            : standard header for each .c/.h file generated.
##NO_BEHAVIOR         : command line option.
##HOST_COMPILATION_64_BITS : used in Makefile for default simulator compilation mode
#TODO constructor.
modifier @TfieldMap initTemplate
  ?? @lstring modelName
:
  @TfieldMap templateStructCopy := selfcopy;
  #model name
  addLStringValue !?templateStructCopy !"MODELNAME" !modelName;
  #date
  @string date := [@string stringWithCurrentDateTime];
  addStringValue !?templateStructCopy !lstringWith[!"DATE"] !date;
  #behavior
  #addBoolValue !?templateStructCopy !lstringWith[!"NO_BEHAVIOR"] ![option gadl_options.noBehavior value];
  #compilation mode
  @uint comp := [@uint compilationMode];
  addBoolValue !?templateStructCopy !lstringWith[!"HOST_COMPILATION_64_BITS"] !comp==64;
  #Ok. Get the copy.
  self := templateStructCopy;
end modifier;

end semantics ;
# vim:ft=ggs:ts=2:sw=2
