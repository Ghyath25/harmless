semantics gadl_isa :
  import "gadl_options.gOption" ;
  import "gadl_semantics_format.gSemantics";   # @formatMap
  import "gadl_semantics_syntax.gSemantics";   # @syntaxMap @printNumberTypeMap
  import "gadl_semantics_behavior.gSemantics"; # @ASTbehaviorMap
  import "gadl_components.gSemantics";         # @ASTComponentMap
  import "gadl_semantics_default.gSemantics";  # @defaultSection
  import "gadl_isa_detectBranch.gSemantics";   #
  import "gadl_templates.gSemantics" ;
  import "gadl_semantics_components_extraction.gSemantics"; #TODO: tmp

#this file is used to apply the semantics on the whole ISA
#Parsing should have been done.
# TODO: a map to support different isa
struct @ASTIsa
{
  #format stuff
  @formatMap formatMap;
  @uint internalFormatId;
  #syntax stuff.
  @syntaxMap syntaxMap;
  @varMap fieldSyntaxMap;
  @uint internalSyntaxId;
  @printNumberTypeMap typeMap;
  #behavior stuff.
  @ASTbehaviorMap ASTbehaviorMap;
  @uint internalBehaviorId;
  #component map
  @ASTComponentMap ASTComponentMap;
  @lstringMap componentMapOrder;
  @uint currentComponentId;
  #default  
  @defaultSection defaultValues;
}

#To be updated (no info about syntax...)
struct @Isa
{
  @instructionImplementationMap impMap;
  @decodedBehaviorMap decodedBehaviorMap;
  @branchInstMap branchInstMap;
  @defaultSection defaultValues;  
}

#This should be a reader, however, to support
#legacy syntax/format parts, the template is included in this
#semantic part.
method @ASTIsa getIsa
  ?! @varIdfStruct idfStruct #TODO ou constant?
  ?? @lstring modelName
  ?! @TfieldMap templateStruct
  !  @Isa isa
:
  ##########################################################################################
  # ISA
  ##########################################################################################
  # format
  @instructionImplementationMap impMap;
  instructionFormatPart ![modelName string] !defaultValues !?templateStruct !formatMap ?impMap; 
  generateInstConstructorAndDef !?templateStruct !impMap !formatMap;  
  # syntax
  instructionSyntaxPart !modelName !syntaxMap !impMap !?templateStruct !typeMap;
  # components
  [ASTComponentMap getComponentMap !?idfStruct !componentMapOrder];
  [idfStruct->componentMap setInTemplate !?templateStruct];
  #behavior.
  @decodedBehaviorMap decodedBehaviorMap;
  instructionBehaviorPart !ASTbehaviorMap !impMap ![modelName string] 
                          !idfStruct !?templateStruct ?decodedBehaviorMap;

  #branch detection
  @branchInstMap branchInstMap := [decodedBehaviorMap getBranchInstructions !idfStruct];
  [branchInstMap updateTemplateForJumpInstructions !?templateStruct];
  #defaults
  [defaultValues updateTemplate !?templateStruct];

  isa := [@Isa new !impMap !decodedBehaviorMap !branchInstMap !defaultValues];


  #TODO: TMP:
  @graphNodeMap componentAccessMap;
  getInstructionComponentGraph !decodedBehaviorMap !defaultValues ?componentAccessMap;
  generateComponentAccessGraphViz !componentAccessMap ![modelName string];

end method;

end semantics ;
# vim:ft=ggs:ts=2:sw=2
