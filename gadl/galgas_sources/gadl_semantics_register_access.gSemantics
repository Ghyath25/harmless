semantics gadl_semantics_register_access :
  import "gadl_components.gSemantics" ;
  import "gadl_semantics_implementation.gSemantics" ;
  import "gadl_semantics_expression_const.gSemantics";

#This list get pipeline information for the DDC:
# for each component that get registers, it stores the 
# * pipeline stage where the registers are read
# * pipeline stage where the registers are written
#
list @DDCPipelineInfoList {
  @lstring associatedComponent;
  @lstring pipelineReadName;
  @lstring pipelineStageReadName;
  @lstring pipelineWriteName;
  @lstring pipelineStageWriteName;  
}

#this class is used only to get information about the memory registers file
# -> a unique name
# -> nb of elements (i.e. if this is a 32 bits registers, it is the size/4). It uses the stride.
# key is componentName_memoryName_memoryChunkName or
# key is componentName_memoryName.
map @DDCMemoryRegisterInfoMap {
  @lstring componentName;
  @lstring memoryName;
  @lstring memoryChunkName;
  @uint nbElt;
  @uint width;
  @sint chunkId feature setter; #store the chunkId. Default is '-1' -> bad value.
  @uint chunkOffset feature setter; #store the chunkOffset. Default is '0'
  insert insertKey error message "the '%K' DDCMemoryRegisterInfoMap is already defined in %L" ; 
  search searchKey error message "the '%K' DDCMemoryRegisterInfoMap is not defined" ;
}

#list all the R/W accesses. It should have
#"@DDCMemoryRegisterInfoMap" entries. One entry for each
#register file.
# key is componentName_memorame -> memid.
map @DDCRegisterFileAccess {
  @lstring componentName;
  @lstring memoryName;
  @stringMap methodAccessMap; #method access map -> read32, memoryName_read8, memoryName_memoryChunkName_write32..
  #String value is either "read" or "write".
  insert insertKey error message "the '%K' DDCRegisterFileAccess is already defined in %L" ; 
  search searchKey error message "the '%K' DDCRegisterFileAccess is not defined" ;
  remove removeKey error message "the '%K' DDCRegisterFileAccess is not defined and cannot be removed." ;
}

#This map stores for each instruction (the key) the 
#structures that records the read/write registers access.
map @DDCRegisterAccessMap
{
  @boolMap registerReadAccess;  #read  access to a register (defined using keyword 'register')
  @boolMap registerWriteAccess; #write access to a register (defined using keyword 'register')
  @DDCRegisterFileAccess registerFileAccess; #R/W/ access to a register file (inside memory part).
  insert insertKey error message "the '%K' @DDCRegisterAccessMap is already defined in %L" ; 
  search searchKey error message "the '%K' @DDCRegisterAccessMap is not defined" ;
}

#used to store a register mask for each item in DDCMemoryRegisterInfoMap and in classical registers.
#key is the register file access:
# key is componentName_memoryName_memoryChunkName or
# key is componentName_memoryName.
map @regMaskMap
{
  @string readMaskStr; #as the result of an expression.
  @string writeMaskStr;
  insert insertKey error message "the '%K' @regMaskMap is already defined in %L" ; 
}

map @regMaskMapMap
{
  @uint64 registerReadMask;
  @uint64 registerWriteMask;
  @regMaskMap regMaskMap;
  insert insertKey error message "the '%K' @regMaskMapMap is already defined in %L" ; 
  search searchKey error message "the '%K' @regMaskMapMap is not defined" ;
}

####################################################################################
# below are the 'getRegisterUsage' methods for:
# * instructions
# * expressions.
####################################################################################
abstract method @cInstruction getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
;

override method @cDummy getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
end method;

override method @cInterruptInst getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
end method;

override method @cErrorInst getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
end method;

override method @cMessageInst getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
end method;

override method @cPrintInst getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
end method;

override method @cNopInst getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [condition getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
end method;

override method @cInsertStall getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [condition getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
end method;

override method @cAddCycleInst getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [condition getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
end method;

override method @cTimingMethodAccessBlock getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  foreach instList (@cInstruction inst) do
    [inst getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  end foreach;
end method;

override method @cIfBlock getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [condition getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  foreach ifInstList (@cInstruction inst) do
    [inst getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  end foreach;
  foreach elseInstList (@cInstruction inst) do
    [inst getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  end foreach;
end method;

override method @cDeclareVar getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
end method;

override method @cLoopBlock getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [condition getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  foreach loopInstructionList (@cInstruction inst) do
    [inst getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  end foreach;
end method;

override method @cAssign getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  #right part of assignment.
  [exp getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  #left part are written.
  foreach leftPart (@cExpression expLeft *) do
    [expLeft getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !true];
  end foreach;
end method;

override method @cAssignFunc getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [expression getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
end method;

routine checkForAccessInRegisterFile
 ?? @lstring componentName
 ?? @lstring methodName
 ?? @parameterCallList unused paramList
 ?? @string accessType #this can be either "read" or "write"
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap #it defines all memory components defined as register.
 ?! @DDCRegisterFileAccess registerFileAccess #it stores registers accesses (output)
:
  #foreach memory part defined as 'register'
  foreach DDCMemoryRegisterInfoMap (* @lstring DDCcomponentName @lstring DDCmemoryName @lstring DDCmemoryChunkName * @uint width * *) do
    #the component call should match (easy)
    if [componentName string] == [DDCcomponentName string] then
      #ok. Then, the method should match. If this is a memory alias, it is appended at the end of mem name.
      @string methodKey := [DDCmemoryName string];
      if [DDCmemoryChunkName string] != "" then
        methodKey .= "_".[DDCmemoryChunkName string];
      end if;
      #then, look for a read or write access (read32, read16, .. method).
      #Quick and dirty :-/
      if ([methodName string] == (methodKey."_".accessType.[width string])) |
         ([methodName string] == (methodKey."_".accessType."64")) |
         ([methodName string] == (methodKey."_".accessType."32")) |
         ([methodName string] == (methodKey."_".accessType."16")) |
         ([methodName string] == (methodKey."_".accessType."8")) then
         #The method is related to a register file. Store it.
         @stringMap methodAccessMap [emptyMap];
         @bool entryExist := false;
         @string memId := [componentName string]."_".[DDCmemoryName string];
         if [registerFileAccess hasKey !memId] then
           #already a file access.
           entryExist := true;
           [registerFileAccess searchKey ![@lstring new !memId ![componentName location]] ?* ?* ?methodAccessMap];
         end if;
         @bool mapUpdate := false;
         if not [methodAccessMap hasKey ![methodName string]] then
           mapUpdate := true;
           #not previously stored, update.
           [!?methodAccessMap insertKey !methodName !accessType];
         end if;
         if not entryExist then
           #add it
           [!?registerFileAccess insertKey ![@lstring new !memId ![componentName location]] !componentName !DDCmemoryName !methodAccessMap];
         else
           if mapUpdate then
             [!?registerFileAccess setMethodAccessMapForKey !methodAccessMap !memId]; #update
           end if;
         end if;
      end if;
    end if;
  end foreach;
  #logRegisterFileAccess !registerFileAccess;
end routine;

override method @cCompMethodCall getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  #register defined using the 'register' keyword.
  foreach paramList (@cExpression exp *) do
    [exp getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  end foreach;
  @functionMap methodMap;
  @instructionList componentMethodCode;
  [componentMap searchKey !componentName ?* ?* ?methodMap ?* ?* ?* ?* ?* ?*];
  [methodMap searchKey !methodName ?* ?* ?componentMethodCode];
  foreach componentMethodCode (@cInstruction inst) do
    [inst getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  end foreach;
  #register file (memory). This could be only a write (the instruction does not returns any value).
  checkForAccessInRegisterFile !componentName !methodName !paramList !"write" !DDCMemoryRegisterInfoMap !?registerFileAccess;
end method;

override method @cReturn getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  foreach expressionList (@cExpression exp) do
    [exp getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  end foreach;
end method;

##Expression category.
abstract method @cExpression getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
;

override method @cIdf getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool assignment
:
  @lstring varName := [@lstring new !"" !here];
  @bool regToAdd := false;
  cast var
  when == @registerVarSlice rvs :
    varName := [rvs baseRegisterName];
    regToAdd := true;
  when == @registerVar :
    varName := idf;
    regToAdd := true;    
  when == @classicVar :
    #nothing.
  else
    error here: "internal error: unknown abstract var.";
  end cast;
  if regToAdd then
    if assignment then #from the left part of an assignment expression
      if not [registerWriteAccess hasKey ![varName string]] then
        [!?registerWriteAccess insertKey !varName];
      end if;
    else
      if not [registerReadAccess hasKey ![varName string]] then
        [!?registerReadAccess insertKey !varName];
      end if;
    end if;
  end if;
end method;

override method @cTabIndice getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [expIndice getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
end method;

override method @cTypeExtend getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused  registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:

   #TODO 
   #NEX TIME 
end method;
override method @cTypeTabMember getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused  registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:

   #TODO 
   #NEX TIME 
end method;
override method @cTypeMember getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused  registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:

   #TODO 
   #NEX TIME 
end method;
override method @cTypeTag getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused  registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:

   #TODO 
   #NEX TIME 
end method;


override method @cBinaryBasicOp getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [expLeft getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  [expRight getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
end method;

override method @cBitFieldOp getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [expField getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
end method;

override method @cCast getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [expression getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
end method;

override method @cCatOp getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [expLeft getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  [expRight getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
end method;

override method @cComponentMethod getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  foreach param (@cExpression exp *) do
    [exp getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  end foreach;
  @functionMap methodMap;
  @instructionList componentMethodCode;
  [componentMap searchKey !componentName ?* ?* ?methodMap ?* ?* ?* ?* ?* ?*];
  [methodMap searchKey !methodName ?* ?* ?componentMethodCode];
  foreach componentMethodCode (@cInstruction inst) do
    [inst getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  end foreach;
  #register file (memory). This should only be a read (a write call does not returns anything).
  checkForAccessInRegisterFile !componentName !methodName !param !"read" !DDCMemoryRegisterInfoMap !?registerFileAccess;
end method;

override method @cExpDummy getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
end method;

override method @cExpInstructionAddress getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
end method;

override method @cExpInstructionSize getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
end method;

override method @cRotationOp getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [expLeft getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  [expRight getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
end method;

override method @cSliceFieldOp getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
end method;

override method @cIntConst getRegisterUsage
 ?? @componentMap unused componentMap
 ?! @boolMap unused registerReadAccess
 ?! @boolMap unused registerWriteAccess
 ?! @DDCRegisterFileAccess unused registerFileAccess
 ?? @DDCMemoryRegisterInfoMap unused DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
end method;

override method @cUnaryOp getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [exp getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
end method;

override method @cXorOp getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  [expLeft getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  [expRight getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
end method;

override method @cfunctionCall getRegisterUsage
 ?? @componentMap componentMap
 ?! @boolMap registerReadAccess
 ?! @boolMap registerWriteAccess
 ?! @DDCRegisterFileAccess registerFileAccess
 ?? @DDCMemoryRegisterInfoMap DDCMemoryRegisterInfoMap
 ?? @bool unused assignment
:
  foreach paramList (@cExpression exp *) do
    [exp getRegisterUsage !componentMap !?registerReadAccess !?registerWriteAccess !?registerFileAccess !DDCMemoryRegisterInfoMap !false];
  end foreach;
end method;

end semantics ;
# vim:ft=ggs:ts=2:sw=2
