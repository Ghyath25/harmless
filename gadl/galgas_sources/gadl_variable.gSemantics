semantics gadl_variable :
  import "gadl_options.gOption" ;
  import "gadl_types.gSemantics" ;
  import "gadl_semantics_instruction.gSemantics" ;
  

#useful functions:
# checkTypeExists -> check recursively that member types are defined: 
#                    generate an error if there is a pb.

#variables declared in implementation parts. May be either:
#  * a classic variable (use of a C++ internal type during generation)
#  * a register

enum @varClass {
  programCounter,
  GPR,            #will be used in data dependency controller
  SFR,
  registerSlice,
  localVar,
  field
}

reader @varClass msg -> @string outResult :
  switch selfcopy
    when programCounter : outResult := "the program counter" ;
    when GPR            : outResult := "a general purpose register" ;
    when SFR            : outResult := "a special function register" ; 
    when registerSlice  : outResult := "a register slice" ; 
    when localVar       : outResult := "a local variable" ;     
    when field          : outResult := "a binary field of instruction" ;     
  end switch ;
end reader ;

#reader for template export. not very clean
reader @varClass id -> @uint64 outResult:
  switch selfcopy
    when programCounter : outResult := 0L;
    when GPR            : outResult := 1L;
    when SFR            : outResult := 2L;
    when registerSlice  : outResult := 3L;
    when localVar       : outResult := 4L;
    when field          : outResult := 5L;
  end switch ;
end reader ;

map @varMap {
  #3 first arguments are redondants with instDeclarationâ€¦
  @varAbstractType type  ;#return type:scalar, custom or tabular.
  @bool constant; #true if the variable should not be modified.
  @varClass varClass;
  @instDeclaration inst;
  insert insertKey error message "the '%K' symbol is already defined in %L" ; 
  search searchKey error message "the '%K' symbol is not defined" ;
  remove removeKey error message "the '%K' symbol is not defined. Can't remove it." ;
}

#check that the program counter is:
# * is defined
# * is not defined twice
# * has a correct type (varBaseType, unsigned)
# * is not constant
# -> return the type.
method @varMap checkProgramCounter
  ! @varBaseType typePC
  ! @lstring name
:
  name := [@lstring new !"" !here]; #dummy init
  typePC := [@varBaseType new ![@varKind unsigned] !1 !here];
  @bool found := false;
  foreach selfcopy do
    if varClass == [@varClass programCounter] then
      if not found then
        #Ok. First time found.
        name := lkey;
        typePC := [type getBaseType];
        if [typePC kind] != [@varKind unsigned] then
          error lkey: "The program counter type should be unsigned. It is defined as ".[[typePC kind] msg];
        end if;
        if constant then
          error lkey: "The program counter should not be declared constant";
        end if;
        found := true;
      else
        #error: 2 program counters.
        error lkey: "The program counter is defined twice, this is not allowed in description";
        error name: "The program counter is defined twice, this is not allowed in description";
      end if;
    end if;
  end foreach;
  if not found then
    error here: "No program counter defined in Instruction Set Architecture.";
  end if;
end method;


reader @varMap string
  -> @string str
:
  str := "\n";
  foreach selfcopy do
    str .= "\t".[lkey string]." -> ".[varClass msg];
    if constant then str .= ", const"; end if;
    str .= " (".[type string].")";
  between str .= "\n";
  end foreach;
end reader;

#*****************************************************************************
#* maps related to structured types (custom)
#*****************************************************************************

map @typedefMemberMap {
  @varAbstractType type;
  insert insertKey error message "the '%K' member is already defined in %L" ; 
  search searchKey error message "the '%K' member is not defined in map" ;
}

map @typedefMap {
  @typedefMemberMap typedefMemberMap;
  insert insertKey error message "the '%K' member is already defined in %L" ; 
  search searchKey error message "the '%K' member is not defined in map" ;
}

function getRegSliceName
  ?? @string registerName
  ?? @string sliceName
  -> @string regSliceName
:
  regSliceName := registerName."_".sliceName;
end function;


#*****************************************************************************
#  @instDeclaration should be declared here, because of varMap.
#*****************************************************************************

class @instDeclaration extends @instruction {
  @varAbstractType type;
  @lstring idf feature nogetter; #should not be used directly -> use the 'name' reader instead.
  @varClass access;
  @string prefixLocal; #used to get a unique local var name.
}


end semantics ;
# vim:ft=ggs:ts=2:sw=2
