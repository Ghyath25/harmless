semantics gadl_instruction_properties :
  import "gadl_options.gOption" ;
  import "gadl_semantics.gSemantics" ;
  import "gadl_semantics_implementation.gSemantics" ;
  import "gadl_semantics_behavior.gSemantics";
  import "gadl_semantics_detect_branch.gSemantics"; #detectBranchInst

routine updateTemplateForJumpInstructions
  ?? @branchInstMap branchInstMap
  ?! @TfieldMap templateStruct
:
  @TfieldMapList branchTpl [emptyList];
  foreach branchInstMap(@lstring instName * * *) do
    @TfieldMap branchTplBody [emptyMap];
    addLStringValue !?branchTplBody !"name" !instName;
    branchTpl += !branchTplBody;
  end foreach;
  addListValue !?templateStruct !lstringWith[!"branchInstList"] !branchTpl;
end routine;


#function getBranchInstructions
#  ?? @componentMap componentMap
#  ?? @instructionListMap instListMap
#  -> @branchInstMap branchInstMap
#:
#  branchInstMap := [@branchInstMap emptyMap];
#  #for each instruction
#  @uint nb := 0;
#  foreach instListMap(@lstring instName @instructionList instList) do
#    @instructionList targetEvalInstList [emptyList];
#    @bool isABranch;
#    @bool noCond;
#    @bool unknownStaticTarget;
#    detectBranchInst !componentMap !instList !?targetEvalInstList ?isABranch ?noCond ?unknownStaticTarget;
#    if isABranch then
#      [!?branchInstMap insertKey !instName !targetEvalInstList !noCond !unknownStaticTarget];
#    end if;
#  end foreach;
#end function;

#function getBranchInstructionTarget
#  ?? @componentMap componentMap
#  ?? @instructionListMap instListMap
#  ?? @branchInstMap branchInstMap
#  -> @instructionListMap targetBranchMap
#:
#  targetBranchMap := [@instructionListMap emptyMap];
#  foreach branchInstMap(@lstring instName) do
#    message "****** branch ".[instName string]." ******\n";
#    @instructionList instList
#    [instListMap searchKey !instName ?instList];
#    getBranchTargetCode !?instList;
#  end foreach;
#end function;
#
#####################################################################################
## the getBranchTargetCode routine:
## explore the 
#####################################################################################
#
#routine getBranchTargetCode
#  ?? @instructionList instList
#  ?! @instructionList code
#:
#
#end routine;

end semantics ;
# vim:ft=ggs:ts=2:sw=2
