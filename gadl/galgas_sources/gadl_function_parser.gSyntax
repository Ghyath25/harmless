syntax gadl_function_parser ("gadl_lexique.gLexique") :
  import "gadl_semantics_function.gSemantics" ;

#from gadl_implementation_parser
nonterminal <typeDeclaration> ! @varAbstractType type;
nonterminal <implementationOrEmpty> ?! @ASTInstructionList instList;

#define only the parameters in a function definition.
rule <functionDefParam>
  ! @parameterDefList parameterDefList
:
  parameterDefList :=[@parameterDefList emptyList];
  #function args.
  $($;
  select
    repeat
      @bool out;
      select
        $out$; out := true;
      or
        out := false;
      end select;
      @varAbstractType argType;
      <typeDeclaration> ?argType;
      @lstring argName;
      $idf$ ?argName;
      parameterDefList += !out !argType !argName;
    while
      $,$;
    end repeat;
  or #no argument.
  end select;
  $)$;
end rule;

#not the outType and functionName in the rule due to grammar LL1 restrictions.
rule <functionDef>
  ?? @varAbstractType outType
  ?? @lstring functionName
  ?! @ASTFunctionMap ASTFunctionMap
:
  @parameterDefList parameterDefList;
  <functionDefParam> ?parameterDefList;
  #function body.
  ${$;
  @ASTInstructionList instList [emptyList];
  <implementationOrEmpty> !? instList;
  $}$;
  [!?ASTFunctionMap insertKey !functionName !parameterDefList !outType !instList];
end rule;

end syntax ;
# vim:ft=ggs:ts=2:sw=2

