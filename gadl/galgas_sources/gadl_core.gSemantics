semantics gadl_core :
  import "gadl_options.gOption" ;
  import "gadl_memory.gSemantics";
  import "gadl_isa.gSemantics";
  import "gadl_varIdfStruct.gSemantics";
  import "gadl_templates.gSemantics" ;
  import "gadl_semantics_templateExport.gSemantics" ;
  import "gadl_micro_architecture.gSemantics" ;
  import "gadl_timing_parser.gSyntax";

  #TODO TMP
  #import "gadl_semantics_data_dependency_instruction_classes.gSemantics" ;

  
routine coreSemantic
  ?? @lstring coreName
  ?? @ASTIsa ASTIsa 
  ?? @ASTmemoryParamMap ASTmemChunk
  ?? @stringlist unused memChunkOrder 
  ?? @ASTmemSpaceMap ASTmemSpaceMap
  ?? @architectureMap archMap
  ?? @pipelineMap pipelineMap
  ?? @machineMap machineMap
:
  @TfieldMap templateStruct := [@TfieldMap emptyMap];
  [!?templateStruct initTemplate !coreName];

  ##########################################################################################
  # memory space.
  ##########################################################################################
  @varIdfStruct idfStruct [default];
  @memSpaceMap memSpaceMap := [ASTmemSpaceMap getMemSpaceMap];
  idfStruct->memSpaceMap := memSpaceMap;
  #message [idfStruct string];

  ##########################################################################################
  # ISA
  ##########################################################################################
  [ASTIsa getIsa !?idfStruct !coreName !?templateStruct ?@Isa isa];

  ##########################################################################################
  # local memory definition
  ##########################################################################################
  @memoryParamMap memChunk := [ASTmemChunk getMemMap];
  [memChunk setInTemplate !lstringWith[!"memInCoreList"] !?templateStruct];

  ##########################################################################################
  # Architecture (defined in core), for a CAS version.
  ##########################################################################################
  @intMap memSpaceWithRegister := [memChunk memSpaceWithRegisterBank !memSpaceMap];
  microArchPart !isa !coreName !machineMap !pipelineMap !archMap !idfStruct !memSpaceWithRegister !memChunk !?templateStruct;

  ##########################################################################################
  # export data from idfStruct (components and so on).
  ##########################################################################################
  [idfStruct setInTemplate !?templateStruct];

  ##########################################################################################
  # template generation
  ##########################################################################################
  @string gadlLog := computeTemplate[!"" !templateStruct !"root"];
  if [option gadl_options.templateLogFile value] then
    extractTemplateStructure !templateStruct !"templateLog.xml";
  end if;

  ##########################################################################################
  # filewrappers: add binary files inside the gadl compiler.
  ##########################################################################################
  addFileWrappers !coreName;
end routine;

end semantics ;
# vim:ft=ggs:ts=2:sw=2
