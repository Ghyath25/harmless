syntax gadl_core_syntax ("gadl_lexique.gLexique") :
import "gadl_options.gOption" ;
import "gadl_memory.gSemantics";
import "gadl_isa.gSemantics";
import "gadl_isa_grammar.gGrammar";
import "gadl_varIdfStruct.gSemantics"; #lstringMap
import "gadl_core.gSemantics";

nonterminal <memoryChunk>
  ?! @ASTmemoryParamMap ASTmemChunk 
  ?! @stringlist memChunkOrder
;
nonterminal <memorySpace> ?! @ASTmemSpaceMap ASTmemSpaceMap;
nonterminal  <architecture> ?! @architectureMap archMap;
#pipeline
nonterminal  <pipeline> 
  ?? @architectureMap architectureMap
  ?! @pipelineMap pipelineMap
;

#assembly of global pipeline
nonterminal <machine>
  ?! @machineMap machineMap
  ?? @pipelineMap pipelineMap
;


rule <importIsa>
  ?!@lstringMap importIsaMap
:
  $import$; $isa$;
  $idf$ ?@lstring isaName;
  $from$;
  $caracterStr$ ?@lstring srcFile;  
  [!?importIsaMap insertKey !isaName !srcFile];
end rule;

rule <core> :
  #memory stuff
  @ASTmemoryParamMap ASTmemChunk [emptyMap];
  @stringlist memChunkOrder [emptyList];
  #importing isa
  @lstringMap importIsaMap [emptyMap];
  @ASTmemSpaceMap ASTmemSpaceMap [emptyMap];
 
  repeat
  while
    #mem space definition.
    <memorySpace> !?ASTmemSpaceMap;
  while
    #ISA importation
    <importIsa> !?importIsaMap;
  end repeat;

  $core$; $idf$ ?@lstring coreName;
  $:$; $isa$; $idf$ ?@lstring isaNameInCore;
  [importIsaMap searchKey !isaNameInCore ?@lstring isaFileName];
  grammar gadl_isa_grammar in isaFileName ??@ASTIsa ASTIsa;
  ${$;
    <coreBody> !?ASTmemChunk !?memChunkOrder ?@architectureMap archMap ?@pipelineMap pipelineMap ?@machineMap machineMap;
  $}$;
  #Ok. Parsing done. Now apply semantic.

  coreSemantic !coreName !ASTIsa !ASTmemChunk !memChunkOrder !ASTmemSpaceMap !archMap !pipelineMap !machineMap;
end rule ;

rule <coreBody>
  ?! @ASTmemoryParamMap ASTmemChunk
  ?! @stringlist memChunkOrder
  !  @architectureMap archMap
  !  @pipelineMap pipelineMap
  !  @machineMap machineMap
:
  archMap := [@architectureMap emptyMap];
  pipelineMap := [@pipelineMap emptyMap];
  machineMap := [@machineMap emptyMap];
  
  repeat
  while
    <memoryChunk> !?ASTmemChunk !?memChunkOrder;
  while
    <architecture> !?archMap;
  while
    <pipeline> !archMap !?pipelineMap;
  while
    <machine> !?machineMap !pipelineMap;  
  end repeat;
end rule;

end syntax ;
# vim:ft=ggs:ts=2:sw=2
