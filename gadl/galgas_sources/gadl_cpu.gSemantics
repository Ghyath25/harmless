semantics gadl_cpu :
  import "gadl_options.gOption" ;
  import "gadl_core.gSemantics";
  import "gadl_peripheral_AST.gSemantics";

#key is cpu name. -> only one cpu for now..
map @ASTCpuMap
{
  #associate core type and a name (TODO and constructor param).
  @lstringMap coreTypeMap;
  #map of cores, key is the type.
  @ASTCoreMap ASTcoreMap;
  #cpu devices.  
  @ASTInstructionList ASTDeviceDecList;
  #memory defined in cpu.
  @ASTmemoryParamMap ASTmemChunk;
  @stringlist memChunkOrder;
  insert insertKey error message "the '%K' cpu is already defined in %L" ; 
  search searchKey error message "the '%K' cpu is not defined" ;
}

method @ASTCpuMap cpuSemantic
  ?? @memSpaceMap memSpaceMap
  ?! @TfieldMap templateStruct
:
  @expressionContext ctx := [@expressionContext peripheral]; #context cpu?
  @TfieldMapList cpuTpl [emptyList];
  foreach selfcopy do #only one cpu at this date.
    @TfieldMap cpuTplBody [emptyMap];
    @lstring cpuName := lkey;
    addLStringValue !?cpuTplBody !"NAME" !cpuName;
    ###########################################################################
    # local memory definition
    ###########################################################################
    @memoryParamMap memChunk := [ASTmemChunk getMemMap];
    [memChunk setInTemplate !lstringWith[!"memInCpuList"] !?cpuTplBody];
    ###########################################################################
    # cores
    ###########################################################################
    #cores defined as global, not inside a cpu.
    [ASTcoreMap coreSemantic !lkey !memSpaceMap !?templateStruct];
    [coreTypeMap setInTemplate !lstringWith[!"coreTypeList"] !?templateStruct];
    ###########################################################################
    # devices
    ###########################################################################
    #TODO in templates.
    @symbolValueMap symbolMap [emptyMap];
    @varIdfStruct idfStruct [default];
    getInst !ASTDeviceDecList !ctx !symbolMap !?idfStruct ?@instructionList instDeviceDecList;
    #end.
    cpuTpl += !cpuTplBody;
  end foreach;
  addListValue !?templateStruct !lstringWith[!"cpuList"] !cpuTpl;  
end method;

end semantics ;
# vim:ft=ggs:ts=2:sw=2
