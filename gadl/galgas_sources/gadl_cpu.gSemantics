semantics gadl_cpu :
  import "gadl_options.gOption" ;
  import "gadl_core.gSemantics";
  import "gadl_peripheral_AST.gSemantics";
  import "gadl_peripheral_templateExport.gSemantics"; #setDeviceInTemplate

#key is the name of the core
map @ASTcoreInstanceMap
{
  @lstring type; #type name of the core
  @uint id;      #core number
  @ASTExpressionlist coreParamExpList; #constructor parameters

  insert insertKey error message "the '%K' core instance is already defined in %L" ; 
  search searchKey error message "the '%K' core instance is not defined" ;
}

#key is cpu name. -> only one cpu for now..
map @ASTCpuMap
{
  #associate core type and a name
  @ASTcoreInstanceMap ASTcoreInstanceMap;
  #map of cores, key is the type.
  @ASTCoreMap ASTCoreMap;
  #cpu devices.  
  @ASTInstructionList ASTDeviceDecList;
  #memory defined in cpu.
  @ASTmemoryParamMap ASTmemChunk;
  @stringlist memChunkOrder;
  insert insertKey error message "the '%K' cpu is already defined in %L" ; 
  search searchKey error message "the '%K' cpu is not defined" ;
}

#key is the name of the core
#decoreated map.
map @coreInstanceMap
{
  @lstring type; #type name of the core
  @uint id;      #core number
  @expressionlist coreParamExpList; #constructor parameters

  insert insertKey error message "the '%K' core instance is already defined in %L" ; 
  search searchKey error message "the '%K' core instance is not defined" ;
}


method @coreInstanceMap setInTemplate
  ?? @lstring name
  ?! @TfieldMap templateStruct
:
  @TfieldMapList coreInstanceMapTpl [emptyList];
  foreach selfcopy do
    @TfieldMap coreInstanceMapTplBody [emptyMap];
    addLStringValue !?coreInstanceMapTplBody !"name" !lkey;
    addLStringValue !?coreInstanceMapTplBody !"type" !type;
    addUnsignedValue !?coreInstanceMapTplBody !lstringWith[!"id"] ![id uint64];

    @string code := "";
    foreach coreParamExpList(@expression exp)
    do code .= [exp generateCode ![@codeCtx C]];
    between code .= ", ";
    end foreach;
    addStringValue !?coreInstanceMapTplBody !lstringWith[!"paramCall"] !code;

    coreInstanceMapTpl += !coreInstanceMapTplBody;    
  end foreach;
  addListValue !?templateStruct !name !coreInstanceMapTpl;  
end method;

reader @ASTcoreInstanceMap getCoreInstanceMap
  ?? @expressionContext ctx
  ?? @symbolValueMap symbolMap
  ?? @varIdfStruct idfStruct
  -> @coreInstanceMap coreInstanceMap
:
  coreInstanceMap := [@coreInstanceMap emptyMap];
  foreach selfcopy do
    @expressionlist expList := [coreParamExpList getExp !ctx !symbolMap !idfStruct];
    [!?coreInstanceMap insertKey !lkey !type !id !expList];
  end foreach;
end reader;

method @ASTCpuMap cpuSemantic
  ?? @memSpaceMap memSpaceMap
  ?! @TfieldMap templateStruct
:
  @expressionContext ctx := [@expressionContext peripheral]; #context cpu?
  @TfieldMapList cpuTpl [emptyList];
  foreach selfcopy do #only one cpu at this date.
    @symbolValueMap symbolMap [emptyMap];
    @varIdfStruct idfStruct [default];
    @TfieldMap cpuTplBody [emptyMap];
    @lstring cpuName := lkey;
    addLStringValue !?cpuTplBody !"NAME" !cpuName;
    ###########################################################################
    # local memory definition
    ###########################################################################
    @memoryParamMap memChunk := [ASTmemChunk getMemMap];
    [memChunk setInTemplate !lstringWith[!"memInCpuList"] !?cpuTplBody];
    ###########################################################################
    # cores
    ###########################################################################
    #cores defined as global, not inside a cpu.
    [ASTCoreMap coreSemantic !lkey !memSpaceMap !?templateStruct];
    @coreInstanceMap coreInstanceMap := [ASTcoreInstanceMap getCoreInstanceMap !ctx !symbolMap !idfStruct];
    [coreInstanceMap setInTemplate !lstringWith[!"coreInstanceList"] !?templateStruct];
    #check constructor parameters.
    foreach coreInstanceMap do
      @lstring coreInstanceName := lkey;
      [ASTCoreMap searchKey !type ?* ?* ?* ?* ?* ?* ?@ASTFunctionMap ASTCoreConstructorMap];
      foreach ASTCoreConstructorMap do
        [param checkParams !coreParamExpList ![coreInstanceName location] ![lkey location]];
      end foreach;
    end foreach;
    ###########################################################################
    # devices
    ###########################################################################
    #TODO in templates.
    getInst !ASTDeviceDecList !ctx !symbolMap !?idfStruct ?@instructionList instDeviceDecList;
    [instDeviceDecList setDeviceInTemplate !?cpuTplBody]; #devices.
    #end.
    cpuTpl += !cpuTplBody;
  end foreach;
  addListValue !?templateStruct !lstringWith[!"cpuList"] !cpuTpl;  
end method;

end semantics ;
# vim:ft=ggs:ts=2:sw=2
