project all_gadl (0:8:1) -> "gadl" :
#--- Targets
  feature "makefile_macosx" ;
  feature "makefile_unix" ;
#  feature "makefile_i386_linux_on_macosx" ;
#  feature "makefile_x86_64_linux_on_macosx" ;
#  feature "makefile_mingw_on_macosx" ;
#  feature "makefile_msys_on_win32" ;
  feature "MountainLion" ;
  feature applicationBundleBase : "fr.irccyn" ;


#--- Source files (relative path from 'galgas_sources' directory)
  option "gadl_options.gOption" ;
  semantics "gadl_semantics.gSemantics" ; #TODO: to update.

  lexique "gadl_lexique.gLexique" ;
#####################################################################
# Default part for all description parts.
#####################################################################

#******************************************************
# expressions handling related files.
#******************************************************
  syntax    "gadl_expression_parser.gSyntax";       # parsing only.
  semantics "gadl_types.gSemantics" ;
  semantics "gadl_expression_functions.gSemantics" ;
  semantics "gadl_variable.gSemantics" ;
  semantics "gadl_varIdfStruct.gSemantics" ;             # struct that is passed through expressions (for idf)
  semantics "gadl_semantics_AST_expression.gSemantics" ; # direct AST from parsing
  semantics "gadl_semantics_expression.gSemantics" ;     # decorated structure
  semantics "gadl_semantics_GetExp.gSemantics" ;         # AST reader to get decorated expression.
  semantics "gadl_semantics_expression_eval.gSemantics" ;
  semantics "gadl_semantics_expression_code_generation.gSemantics" ;

#******************************************************
# implementation: harmless instructions related files.
#******************************************************

  syntax    "gadl_implementation_parser.gSyntax";          # parsing only.
  syntax    "gadl_function_parser.gSyntax" ;               #related to functions
  semantics "gadl_semantics_AST_implementation.gSemantics";
  semantics "gadl_semantics_instruction.gSemantics" ;      # base for decorated structure
  semantics "gadl_semantics_implementation.gSemantics" ;   # decorated structure
  semantics "gadl_semantics_getInst.gSemantics" ;          # AST reader to get decorated expression.
  semantics "gadl_semantics_implementation_code_generation.gSemantics" ;
  semantics "gadl_semantics_function.gSemantics" ;         #related to functions
  semantics "gadl_semantics_templateExport.gSemantics" ;   #various template export

#####################################################################
# Part related to ISA description
#####################################################################

#******************************************************
#'default' section. Used to give default parameters.
# basic: no verification, no update yet, 1 pass.
# TODO: all verifications removed.
#******************************************************
  syntax "gadl_default_parser.gSyntax";
  semantics "gadl_semantics_default.gSemantics";

#******************************************************
# ISA root main file
#******************************************************
  syntax    "gadl_isa_syntax.gSyntax";
  grammar   "gadl_isa_grammar.gGrammar" ;
  semantics "gadl_isa.gSemantics";
  semantics "gadl_isa_detectBranch.gSemantics";

#******************************************************
# ISS description, using 3 views
#******************************************************
  #format
  syntax    "gadl_instruction_format_parser.gSyntax" ;
  semantics "gadl_semantics_format.gSemantics" ;

  #syntax
  syntax    "gadl_instruction_syntax_parser.gSyntax" ;
  semantics "gadl_semantics_syntax.gSemantics" ;
  
  #behavior
  syntax "gadl_instruction_behavior_parser.gSyntax" ;
  semantics "gadl_semantics_behavior_data_structures.gSemantics" ;
  semantics "gadl_semantics_behavior.gSemantics" ;

#******************************************************
# components <-> link ISA to micro-architecture.
#******************************************************
  syntax    "gadl_components_parser.gSyntax" ;
  syntax    "gadl_register_parser.gSyntax" ;
  semantics "gadl_components.gSemantics" ;

#******************************************************************** 
# timing section: The timing section is used to model
# timings of peripherals using a time-automata, associated to the 
# behavior (defined in a component).
# Primary goal: the memory hierarchy.
# **
# This part does not model the pipeline.
#******************************************************************** 
  grammar   "gadl_peripheral_grammar.gGrammar" ;
  syntax    "gadl_peripheral_parser.gSyntax" ;
  syntax    "gadl_peripheral_set_parser.gSyntax" ; #only for included files: define more than 1 peripheral.
  semantics "gadl_peripheral_AST.gSemantics" ;
  semantics "gadl_peripheral.gSemantics" ;     #decorated structures
  semantics "gadl_peripheral_templateExport.gSemantics" ; #various template export

  syntax    "gadl_import_syntax.gSyntax"; #common to core/cpu grammars.
  syntax    "gadl_deviceAndSignal_syntax.gSyntax"; #common to core/cpu/peripheral grammars
  #timing related part.
  syntax    "gadl_timing_parser.gSyntax";
  semantics "gadl_timing_AST.gSemantics";
  semantics "gadl_timing.gSemantics";           #decorated structures.
  semantics "gadl_timing_getTiming.gSemantics"; #AST -> decorated.

  semantics "gadl_semantics_timingSection.gSemantics" ; #main file (timing)
  semantics "gadl_semantics_timingSectionAutomata.gSemantics"; #
  #transform Harmless automata into simulation steps.
  semantics "gadl_semantics_timingSimulationStep.gSemantics" ;

#####################################################################
# new template management, included from galgas SVN (common with goil)
#####################################################################

  semantics "template_semantics.gSemantics";
  lexique   "template_scanner.gLexique";
  syntax    "template_expression_parser.gSyntax";
  syntax    "template_parser.gSyntax";
  grammar   "template_grammar.gGrammar";
  semantics "template_invocation.gSemantics";
  semantics "template_functions.gSemantics";
  
  semantics "gadl_templates.gSemantics" ;
  semantics "gadl_template_data_preparation.gSemantics";

#####################################################################
# Core part.
#####################################################################
#******************************************************
# Core root main file
#****************************************************** 

  grammar   "gadl_core_grammar.gGrammar" ;
  syntax    "gadl_core_syntax.gSyntax";
  semantics "gadl_core.gSemantics";
  #used for a simulator with only a core (no cpu description).
  grammar   "gadl_core_alone_grammar.gGrammar" ;
  syntax    "gadl_core_alone_syntax.gSyntax";

#******************************************************************** 
#timing approach. Pipeline and instruction classes.
#******************************************************************** 
syntax "gadl_hard_pipeline_parser.gSyntax" ;
semantics "gadl_semantics_hard_pipeline.gSemantics" ;
#
syntax "gadl_hard_arch_parser.gSyntax" ; #'architecture' section.
##architecture. Basic data structures
semantics "gadl_semantics_hard_arch.gSemantics";
semantics "gadl_semantics_hard_arch_check.gSemantics";
##routines
semantics "gadl_semantics_architecture.gSemantics";
##graph approach
semantics "gadl_graph.gSemantics";
##extract the component access graph for instructions.
semantics "gadl_semantics_components_extraction.gSemantics" ;
##get the instructions classes.
semantics "gadl_semantics_instruction_classes.gSemantics" ;
##generate config files for p2a.
semantics "gadl_semantics_pipeline_configuration.gSemantics" ;
##generate the automata associated to the data dependancy controller.
semantics "gadl_semantics_data_dependency_instruction_classes.gSemantics" ;
semantics "gadl_semantics_register_access.gSemantics" ;
##main micro-architecture file (populate templates)
semantics "gadl_micro_architecture.gSemantics" ;

#####################################################################
# CPU part.
#####################################################################
#******************************************************
# CPU root main file
#****************************************************** 
  grammar   "gadl_cpu_grammar.gGrammar" ;
  syntax    "gadl_cpu_syntax.gSyntax";
  semantics "gadl_cpu.gSemantics";


#******************************************************
# memory.
#******************************************************

  syntax    "gadl_memory_parser.gSyntax" ;
  syntax    "gadl_memory_mapping_parser.gSyntax" ;
  semantics "gadl_memory.gSemantics" ;

#******************************************************
# fileWrapper addons: add binaries and templates directly
#                     inside the gadl compiler.
#******************************************************
  semantics "gadl_filewrappers.gSemantics";

#******************************************************
# generic stuff
#******************************************************
  gui "gadl_cocoa.gGui" ;
  program "gadl_program.gProgram" ;
end project ;

# vim:ft=ggs:ts=2:sw=2
