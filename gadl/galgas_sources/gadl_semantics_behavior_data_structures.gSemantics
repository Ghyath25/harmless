semantics gadl_semantics_behavior_data_structures :
  import "gadl_semantics.gSemantics" ;
  import "gadl_semantics_implementation.gSemantics" ;
  import "gadl_semantics_expression.gSemantics" ;
  import "gadl_semantics_implementation.gSemantics" ;
  import "gadl_semantics_function.gSemantics" ;  

#############  Chunk definition ##############  

#a chunk is an implementation part, a ref, an agg or an alt.
abstract class @behaviorChunk
{
}

# chunk is an implementation part.
class @behaviorImplementation extends @behaviorChunk 
{
  @instructionList instList;
}

# used to know if it is a ref or an idf (agg or alt).
abstract class @idfOrRefBehavior extends @behaviorChunk 
{
  @lstring name;
}

class @idfOrRefBehaviorIsIdf extends @idfOrRefBehavior
{
  @parameterCallList paramCall;
  @lstring postRefName; #string to add in the called behavior. (suffix)
}

#get the field.
map @fieldBehaviorMap {
  @varType type;
  insert insertKey error message "the field '%K' is already declared in %L" ; 
  search searchKey error message "the field '%K' is not defined in the behavior" ;
}

class @idfOrRefBehaviorIsRef extends @idfOrRefBehavior
{
  @instructionList instList;
  @fieldBehaviorMap fieldMap;
}

class @idfOrRefBehaviorIsDeclarationRef extends @idfOrRefBehavior
{
}

list @behaviorChunkList {
  @behaviorChunk chunk;
}

#This map is used to get back instruction list for each CPU instruction.
#Key is the CPU instruction..
map @instructionListMap {
  @instructionList instList;
  insert insertKey error message "the field '%K' is already declared in %L" ; 
  search searchKey error message "the field '%K' is not defined in the instruction map" ;
}


list @behaviorChunkListWithSuffix {
  @behaviorChunk chunk;
  @stringlist suffixList;
  @idfOrRefBehaviorIsIdf parent; #caller of this behavior chunk (in the tree).
  @stringlist parentSuffixList;
}

list @idfOrRefBehaviorList
{
  @idfOrRefBehavior format;
}

list @behaviorChunkListWithSuffixList {
  @behaviorChunkListWithSuffix chunkList;
}

#map with ref, agg, alt call only (one map for each alternative).
#only used to check for redundancy.
map @behaviorCallMap {
  insert insertKey error message "the '%K' reference behavior is already defined in %L" ; 
  search searchKey error message "the '%K' reference behavior is not defined" ;
}

#this map is filled during the first pass.
#each agg/alt have a different name.
map @behaviorPrototypeMap {
  @parameterDefList param;
  insert insertKey error message "the '%K' behavior is already defined in %L" ; 
  search searchKey error message "the '%K' behavior is not defined" ;
}

########### data storage ##############

#What is contained into a behavior (agg or alt).
abstract class @behavior {
  @behaviorChunkList chunkList;
  @fieldBehaviorMap fieldMap;
}

class @aggBehavior extends @behavior {
}

class @altBehavior extends @behavior {
}

map @behaviorMap {
  @behavior behavior;
  insert insertKey error message "the '%K' behavior is already defined in %L" ; 
  search searchKey error message "the '%K' behavior is not defined in map" ;
  remove removeKey error message "the '%K' behavior is not defined and cannot be removed." ;
}

#This map stores all information about the instruction behavior 
#of a correct behavior (fields match with format):
# * the key is the instruction name
# * the behavior chunk list (including suffix)
# * the reference sequence (#A #B ...). It is a set.
# NOTE THAT if an instruction does not have a corresponding format, the instruction
#      should not appear in this map.
map @decodedInstBehaviorMap
{
  @behaviorChunkListWithSuffix chunkList;
  @stringset referenceSeq;
  insert insertKey error message "the '%K' behavior is already defined in %L" ; 
  search searchKey error message "the '%K' behavior is not defined in map" ;
  remove removeKey error message "the '%K' instruction is not defined and cannot be removed." ;
}

#to store branch instruction
map @branchInstMap {
  @instructionList targetEvalInstList;
  @bool noCond;
  @bool unknownStaticTarget;
  insert insertKey error message "the '%K' branch instruction is already defined in %L" ; 
  search searchKey error message "the '%K' branch instruction is not defined" ;
}

end semantics ;
# vim:ft=ggs:ts=2:sw=2
