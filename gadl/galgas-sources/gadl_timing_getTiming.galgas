 #tmp

getter @ASTTimingMap getTimingMap
  ?let  @symbolValueMap symbolMap
  ?let  @varIdfStruct idfStruct  
  -> @timingMap timingMap {
  timingMap = @timingMap.emptyMap
  for () in  self do
    #message "timing map ".[lkey string]."\n";
    @expressionContext ctx = @expressionContext.timing  
    @symbolValueMap symbolMapCopy = symbolMap
    @varIdfStruct idfStructCopy = idfStruct
    #expEnable expression is in the timing structure, however, it is called
    #from the peripheral -> should have the idfStruct associated.
    @expression expEnable = [ASTExpEnable getExp !ctx !symbolMap !idfStructCopy]
    #move varMap of peripheral to the 'friend' varMap.
    idfStructCopy.varMapFriend = idfStruct.varMap
    idfStructCopy.varMap = @varMap.emptyMap
    idfStructCopy.friendAccessPrefix = "m_peripheral->"
    idfStructCopy.idfPrefixCore = "m_peripheral->" #for registersâ€¦
   
    @uint timingInternalId = 0
    [ASTTinstList getTimingList !signalIn !signalOut !?symbolMapCopy !?idfStructCopy
                  !?timingInternalId ?var @timingInstructionList tInstList]
    [!?timingMap insertKey !lkey !externalActivation !signalIn !signalOut !tInstList !expEnable]
  end
}

abstract method @ASTTimingInstruction getTiming
  ?let  @boolMap signalIn
  ?let  @boolMap signalOut
  ?! @symbolValueMap symbolMap
  ?! @varIdfStruct idfStruct
  ?! @uint internalId #to declare internal var (for loops)
  !  @timingInstruction Tinst

method @ASTTimingInstructionList getTimingList
  ?let  @boolMap signalIn
  ?let  @boolMap signalOut
  ?! @symbolValueMap symbolMap
  ?! @varIdfStruct idfStruct
  ?! @uint internalId
  !  @timingInstructionList tInstList {
  tInstList = @timingInstructionList.emptyList
  for () in  self do
    [ASTTinst getTiming !signalIn !signalOut !?symbolMap !?idfStruct !?internalId ?var @timingInstruction Tinst]
    tInstList += !Tinst
  end
}

override method @ASTTEmit getTiming
  ?let  @boolMap unused signalIn
  ?let  @boolMap signalOut
  ?! @symbolValueMap unused symbolMap
  ?! @varIdfStruct unused idfStruct
  ?! @uint unused internalId
  !  @timingInstruction Tinst {
  #check that signal can be emitted (defined as 'out').
  if not [signalOut hasKey ![name string]] then
    error loc:"try to emit signal "+[name string]+", but this signal is not declared."
  end
  Tinst = @tEmit.new { !loc !name !broadcast}
}

override method @ASTTWaitSignal getTiming
  ?let  @boolMap signalIn
  ?let  @boolMap unused signalOut
  ?! @symbolValueMap unused symbolMap
  ?! @varIdfStruct unused idfStruct
  ?! @uint unused internalId
  !  @timingInstruction Tinst {
  #check that signal can be received (defined as 'in').
  if not [signalIn hasKey ![name string]] then
    error @location.here:"try to wait for signal "+[name string]+", but it is not declared."
  end
  Tinst = @tWaitSignal.new { !loc !name}
}

override method @ASTTWaitCycle getTiming
  ?let  @boolMap unused signalIn
  ?let  @boolMap unused signalOut
  ?! @symbolValueMap symbolMap
  ?! @varIdfStruct idfStruct
  ?! @uint unused internalId
  !  @timingInstruction Tinst {
  @expressionContext ctx = @expressionContext.timing
  @expression expCycle = [ASTExpCycle getExp !ctx !symbolMap !idfStruct]
  Tinst = @tWaitCycle.new { !loc !expCycle}
}

override method @ASTTIf getTiming
  ?let  @boolMap signalIn
  ?let  @boolMap signalOut
  ?! @symbolValueMap symbolMap
  ?! @varIdfStruct idfStruct
  ?! @uint internalId
  !  @timingInstruction Tinst {
  @expressionContext ctx = @expressionContext.timing
  @expression expIf = [ASTExpIf getExp !ctx !symbolMap !idfStruct]
  #check that it is a boolean.
  [[expIf type] checkBool]

  [ASTTinstListThen getTimingList !signalIn !signalOut !?symbolMap
                    !?idfStruct !?internalId ?var @timingInstructionList tInstThenList]
  [ASTTinstListElse getTimingList !signalIn !signalOut !?symbolMap
                    !?idfStruct !?internalId ?var @timingInstructionList tInstListElse]
  Tinst = @tIf.new { !loc !expIf !tInstThenList !tInstListElse}
}

override method @ASTTLoop getTiming
  ?let  @boolMap signalIn
  ?let  @boolMap signalOut
  ?! @symbolValueMap symbolMap
  ?! @varIdfStruct idfStruct
  ?! @uint internalId  
  !  @timingInstruction Tinst {
  @expressionContext ctx = @expressionContext.timing
  @expression expLoopValue = [ASTexpLoopValue getExp !ctx !symbolMap !idfStruct]
  @expression expLoopValueEval = [expLoopValue eval !symbolMap]
  @uint64 loopValue = 0L
  if not forever then
    if (expLoopValueEval is == @expIntConst) then
      let @expIntConst expIntConst = ( expLoopValueEval as @expIntConst)
      if [expIntConst negative] then
        error loc: "The loop value should be positive"
      end
      loopValue = [expIntConst value]
    else
      error loc: "the loop value should be constant."
    end
  end
  @expression expCondValue = [ASTexpCondValue getExp !ctx !symbolMap !idfStruct]
  [ASTTinstLoopList getTimingList !signalIn !signalOut !?symbolMap !?idfStruct
                    !?internalId ?var @timingInstructionList tInstLoopList]
  Tinst = @tLoop.new { !loc !forever !loopValue !expCondValue !tInstLoopList !internalId}
  #insert internal var into varMap
  @lstring idf =  @lstring.new { !"invLoop_"+internalId !loc}
  @varBaseType type = @varBaseType.new { !@varKind.unsigned !32 !@location.here}
  @instDeclaration instDec = @instDeclaration.new { !loc !type !idf !@varClass.localVar !""}
  #message "insert id ".[internalId string]." - ".[idf string]."\n";
  [!?idfStruct.varMap insertKey !idf !type !false !@varClass.localVar !instDec]
  internalId = internalId+1
}

override method @ASTTAssignOrCall getTiming
  ?let  @boolMap unused signalIn
  ?let  @boolMap unused signalOut
  ?! @symbolValueMap symbolMap
  ?! @varIdfStruct idfStruct
  ?! @uint unused internalId    
  !  @timingInstruction Tinst {
  @expressionContext ctx = @expressionContext.timing
  var instList =@instructionList.emptyList{}
  #message "##########\n";
  #message [idfStruct string];
  #message "##########\n";
  #idfStruct->idfPrefixCore := "_peripheral->"; #pb avvec chan[xx]->
  for (@ASTInstruction ASTinst) in  ASTinstList do
    [ASTinst getInst !ctx !?symbolMap !?idfStruct ?var @instruction inst]
    instList += !inst
  end
  Tinst = @tAssignOrCall.new { !loc !instList}  
}

override method @ASTTDeclaration getTiming
  ?let  @boolMap unused signalIn
  ?let  @boolMap unused signalOut
  ?! @symbolValueMap symbolMap
  ?! @varIdfStruct idfStruct
  ?! @uint unused internalId
  !  @timingInstruction Tinst {
  @expressionContext ctx = @expressionContext.timing
  var instList =@instructionList.emptyList{}
  for (@ASTInstruction ASTinst) in  ASTinstList do
    [ASTinst getInst !ctx !?symbolMap !?idfStruct ?var @instruction inst]
    instList += !inst
  end
  Tinst = @tDeclaration.new { !loc !instList} 
}

# vim:ft=galgas:ts=2:sw=2:tw=0
