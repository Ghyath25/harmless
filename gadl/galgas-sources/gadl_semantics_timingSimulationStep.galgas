 #addStringlist
 
#################################################################################
# generate simulation steps from the Harmless automata.
# entry is the Harmless automata (@adjMat harmlessAutomata)
# output is a timingStep list (in a one dim array): @timingStepArray
# generation is done in 2 passes:
#  *The first one split states/transition info into simulation steps 
#   (getSimulationStepsRec)
#  * The second one reduces the number of simulation steps to preserve
#    simulation speed.
# All is called in "getSimulationSteps" routine.
# debug routines in timingStepLog and timingStepArrayLog
#################################################################################


#this structure embedds all that may be need to generate one simulation step
#(a simulation code chunk).
class @timingStep {
  @uintlist nextStepList %setter      #as many values as there are output transitions.
  #transition related stuff
  @instructionList updateList %setter #code that should be executed
  @stringlist guardList %setter       #condition list.
  @stringlist synchroInList %setter   #synchronization (wait for)
  @stringlist synchroOutList %setter  #synchronization (emit)
  @stringlist synchroOutBroadcastList %setter  #synchronization (emit broadcast)
  #state related stuff
  @expressionlist waitCycle %setter
}

setter @timingStep addUpdate
  ?let  @instruction inst {
  updateList += !inst
}

array @timingStepArray : @timingStep[2]

func getEmptyStep
  -> @timingStep step {
  step =  @timingStep. new { !@uintlist. emptyList !@instructionList. emptyList !@stringlist. emptyList
         !@stringlist. emptyList  !@stringlist. emptyList !@stringlist. emptyList !@expressionlist. emptyList}
}

proc setNextStepId
  ?! @timingStepArray stepArray
  ?let  @uint fromStepId
  ?let  @uint toStepId {
  #get the source step.
  @bool valid =  [stepArray isValueValidAtIndex !fromStepId !0]
  if valid then
    @timingStep srcStep = [stepArray valueAtIndex !fromStepId !0]
    [!?srcStep addNextStepId !toStepId]
    [!?stepArray setValueAtIndex !srcStep !fromStepId !0]
  else
    #no link the first call (no transition to the init state).
    if fromStepId != 0 then
      error @location.here: "internal error step "+[fromStepId string]+" does not exists\n"
    end
  end
}

#end of step, start of a new one.
# * update link from the previous step
# * store the step in the array
# * return a new empty step.
proc changeToNextStep
  ?! @uint previousStepId
  ?! @uint currentStepId
  ?! @timingStepArray stepArray  
  ?! @timingStep currentStep {
  setNextStepId ( !?stepArray !previousStepId !currentStepId)      #update previous step (link)
  [!?stepArray forceValueAtIndex !currentStep !currentStepId !0]  #insert new step (partial)
  previousStepId = currentStepId                                 #update previous and current step id.
  currentStepId++
  currentStep = getEmptyStep()
}

#nothing useful in the timingStep
#-> do not take into account nextStepList, but it should be with:
#   * 0 value : invalid timingStep (not complete)
#   * 1 value : the next step id (as there are no conditions)
getter @timingStep isEmpty
  -> @bool empty {
  empty = [updateList length] == 0
  empty = empty & [guardList length] == 0
  empty = empty & [synchroInList length] == 0
  empty = empty & [synchroOutList length] == 0
  empty = empty & [synchroOutBroadcastList length] == 0
  empty = empty & [waitCycle length] == 0
}

setter @timingStep addGuard
  ?let  @string guardCode {
  guardList += !guardCode
}

setter @timingStep addNextStepId
  ?let  @uint nextStepId {
  nextStepList += !nextStepId
}

#this routine formulates the Harmless automata into simulation steps.
proc getSimulationSteps
  ?let  @adjMat harmlessAutomata
  ?! @TfieldMap timingTplBody
  ?let  @bool externalActivation {
  @uint currentStepId = 0
  @uint previousStepId = 0
  @timingStepArray tmpStepArray = @timingStepArray. new { !1 !1} #only one step.
  var statesDone =@intMap.emptyMap{} #value is the corresponding step.
  #first generate simulation steps from a Harmless automata.
  getSimulationStepsRec ( !harmlessAutomata !0 !?currentStepId !?previousStepId !?tmpStepArray !?statesDone)
  #Then 'compress' simulation steps (reduce the number of steps to preserve computation time)
  @timingStepArray stepArray = compressSimulationSteps(!tmpStepArray !externalActivation)
  #for stepArrays with 'externalActivation', one can add another optimization
  if externalActivation then 
    stepArray = timingStepOptimWithAutomataActivation(!stepArray)
  end
  #@timingStepArray stepArray := tmpStepArray;
  #and finally export to templates.
  var timingStepTpl =@TfieldMapList.emptyList{}  
  @range dimSteps= [stepArray rangeForAxis !0]
  @uint stepId = 0
  for stepId in dimSteps do
    var timingStepTplBody =@TfieldMap.emptyMap{}  
    @timingStep currentStep = [stepArray valueAtIndex !stepId !0]
    #export one timing step.
    exportTimingStep ( !currentStep !?timingStepTplBody)
    addStringValue (   !?timingStepTplBody !lstringWith(!"id") ![stepId string])
    #done
    timingStepTpl += !timingStepTplBody
    stepId = stepId + 1
  end
  addListValue ( !?timingTplBody !lstringWith(!"timingStepList") !timingStepTpl)
  #timingStepArrayLog !stepArray;
}

proc exportTimingStep
  ?let  @timingStep currentStep
  ?! @TfieldMap timingStepTplBody {
  #update
  var updateList =@stringlist.emptyList{}
  for (@instruction inst) in  [currentStep updateList] do
    updateList += ![inst generateCode !0 !@codeCtx. C]
  end
  addStringlist ( !?timingStepTplBody !lstringWith(!"updateList") !lstringWith(!"str") !updateList)
  #update uppaal -> .dot export.
  var updateUppaalList =@stringlist.emptyList{}
  for (@instruction inst) in  [currentStep updateList] do
    updateUppaalList += ![inst generateCode !0 !@codeCtx. Uppaal]
  end
  addStringlist ( !?timingStepTplBody !lstringWith(!"updateListUppaal") !lstringWith(!"str") !updateUppaalList)
  #merge condition and next step id (guard and nextStepList)
  if [[currentStep nextStepList] length] > 1 then #more than one condition
    var nextStepMapList =@TfieldMapList.emptyList{}
    for (@uint next) in  [currentStep nextStepList], (@string guardCode) in [currentStep guardList] do
      var itemMap =@TfieldMap.emptyMap{}
      addStringValue (   !?itemMap !lstringWith(!"guard")  !guardCode)
      addUnsignedValue ( !?itemMap !lstringWith(!"nextId") ![next uint64])    
      nextStepMapList += !itemMap
    end
    addListValue ( !?timingStepTplBody !lstringWith(!"nextList") !nextStepMapList)
  else #one condition only.
    @uint nextId
    [[currentStep nextStepList] first ?nextId]
    addUnsignedValue ( !?timingStepTplBody !lstringWith(!"singleDest") ![nextId uint64])
  end  
  #synchro
  addStringlist ( !?timingStepTplBody !lstringWith(!"synchroInList") !lstringWith(!"str") ![currentStep synchroInList])
  addStringlist ( !?timingStepTplBody !lstringWith(!"synchroOutList") !lstringWith(!"str") ![currentStep synchroOutList])
  addStringlist ( !?timingStepTplBody !lstringWith(!"synchroOutBroadcastList") !lstringWith(!"str") ![currentStep synchroOutBroadcastList])
  #wait
  addListValue ( !?timingStepTplBody !lstringWith(!"waitCycles") !getTemplateExpList(![currentStep waitCycle] !false))
}

func compressSimulationSteps
  ?let  @timingStepArray stepArray
  ?let  @bool externalActivation
  -> @timingStepArray compressedStepArray {
  @uint currentStepId = 0 #index of the step that is generated of the compressed step array
  @range dimSteps= [stepArray rangeForAxis !0]
  #This map stores steps that are targets of more than one step.
  #(these steps should be a step in the compressed array.)
  #key is the step id of destinations
  #value is the number of times it is called.
  var destinationSteps =@intMap.emptyMap{}
  for stepId in dimSteps do
    @timingStep currentStep = [stepArray valueAtIndex !stepId !0]
    for (@uint nextId) in  [currentStep nextStepList] do
      if [destinationSteps hasKey ![nextId string]] then
        #one entry. add one and update
        @uint nbDst
        #[destinationSteps searchKey !lstringWith[![nextId string]] ?nbDst];
        [!?destinationSteps removeKey !lstringWith(![nextId string]) ?nbDst]
        [!?destinationSteps insertKey !lstringWith(![nextId string]) !nbDst+1]
      else
        #no entry, init with 1.
        [!?destinationSteps insertKey !lstringWith(![nextId string]) !1]
      end
    end
  end
  #log destinationSteps;
  @timingStep firstStep = [stepArray valueAtIndex !0 !0]
  var oldToNewStepId =@intMap.emptyMap{}
  compressedStepArray = @timingStepArray. new { !0 !1} #only one step.
  [!?oldToNewStepId insertKey !lstringWith(!"0") !0]
  mergeStepsInAutomata ( !firstStep !stepArray !?compressedStepArray !destinationSteps !?oldToNewStepId !externalActivation)
  #update nextStepList using map:oldToNewStepId
  @range dimCompressedSteps= [compressedStepArray rangeForAxis !0]
  for stepId in dimCompressedSteps do
    @timingStep currentStep = [compressedStepArray valueAtIndex !stepId !0]
    var nextStepList =@uintlist.emptyList{}
    for (@uint oldId) in  [currentStep nextStepList] do
      @uint newId
      [oldToNewStepId searchKey !lstringWith(![oldId string]) ?newId]
      nextStepList += !newId
    end
    [!?currentStep setNextStepList !nextStepList]
    [!?compressedStepArray setValueAtIndex !currentStep !stepId !0]
  end
}

#this function returns true if the simulation may be stopped after this step:
#this occurs if:
# * step has to wait for a nb of cycles or
# * step has to synchronize using a signal
func simMayStop
  ?let  @timingStep step
  -> @bool simulationMayStop {
  simulationMayStop = [[step waitCycle] length] > 0
  simulationMayStop = simulationMayStop | [[step synchroInList]  length] > 0
  simulationMayStop = simulationMayStop | [[step synchroOutList] length] > 0
}

#this function merge stepA and stepB
#if stepA -> stepB and all contraints are OK (checked by mergeSteps routine).
#
func mergeSteps
  ?let  @timingStep stepA
  ?let  @timingStep stepB
  -> @timingStep mergedStep {
  mergedStep = stepA
  #next step list is the one of stepB.
  if [[stepA nextStepList] length] > 1 then
    error @location.here: "internal error: nextStepList size should be one exactly."
  end
  [!?mergedStep setNextStepList ![stepB nextStepList]]
  for (@instruction inst) in  [stepB updateList] do
    [!?mergedStep addUpdate !inst]
  end
  #guard list
  if [[stepA guardList] length] > 0 then
    error @location.here : "internal error: guardList should be empty to merge steps!"
  end
  [!?mergedStep setGuardList ![stepB guardList]]
  #synchro
  if [[stepA synchroInList] length] > 0 |  [[stepA synchroOutList] length] > 0  then
    error @location.here : "internal error: sychro lists should be empty to merge steps!"
  end
  [!?mergedStep setSynchroInList  ![stepB synchroInList]]
  [!?mergedStep setSynchroOutList ![stepB synchroOutList]]
  #synchro broadcast (should merge step A and step B)
  @stringlist mergedSynchroBCList = [stepA synchroOutBroadcastList]
  for (@string emitBC) in  [stepB synchroOutBroadcastList] do
    mergedSynchroBCList += !emitBC
  end
  [!?mergedStep setSynchroOutBroadcastList !mergedSynchroBCList]
  #wait for.
  if [[stepA waitCycle] length] > 0 then
    error @location.here : "internal error: wait cycle should be 0 to merge steps!"
  end
  [!?mergedStep setWaitCycle ![stepB waitCycle]]
}

#recursive routine to merge steps.
proc mergeStepsInAutomata
  ?let  @timingStep stepA
  ?let  @timingStepArray stepArray
  ?! @timingStepArray compressedStepArray
  ?let  @intMap destinationSteps
  ?! @intMap oldToNewStepId
  ?let  @bool externalActivation {
  #we can merge stepA and stepB if:
  # * stepA has only one transition (no condition)
  # * stepB follows stepA
  # * stepB has not been processed, except if stepA is Empty
  # * stepB is NOT an entry point of another step, except if stepA is empty: 
  #         exception: stepB is step 0 and 'externalActivation' is set => can't merge
  # * stepA does not set a "wait" -> wait for cycle or synchro
  if [[stepA nextStepList] length] > 1 then
    #stepA does not have only one transition. Can't merge stepA and stepB.
    #save stepA into the compressed step array.
    @uint sizeOfCompressedArray = [compressedStepArray sizeForAxis !0]
    [!?compressedStepArray forceValueAtIndex !stepA !sizeOfCompressedArray !0]
    #start to merge from each step following the current one.
    for (@uint nextStepId) in  [stepA nextStepList] do
      @timingStep nextStepA = [stepArray valueAtIndex !nextStepId !0]    
      [!?oldToNewStepId insertKey !lstringWith(![nextStepId string]) ![compressedStepArray sizeForAxis !0]]
      mergeStepsInAutomata ( !nextStepA !stepArray !?compressedStepArray !destinationSteps !?oldToNewStepId !externalActivation)
    end
  else
    #only one condition. Get stepB.
    @uint stepBId
    [[stepA nextStepList] first ?stepBId]
    @timingStep stepB = [stepArray valueAtIndex !stepBId !0]
    if [oldToNewStepId hasKey ![stepBId string]] then
      @bool exception = externalActivation & (stepBId==0)
      #stepB has been processed. However, we can still merge if stepA is empty.
      if [stepA isEmpty] & not exception then
        #this part less simple, has we have to update the compressedStepArray that is build...
        #get the already generated step (in compressedStepArray), and not the old stepB.
        @uint newStepBId
        [oldToNewStepId searchKey !lstringWith(![stepBId string]) ?newStepBId]
        stepB = [compressedStepArray valueAtIndex !newStepBId !0]     
        #.. and merge...
        @timingStep mergedStep = mergeSteps(!stepA !stepB)
        #..and re save updated step...
        [!?compressedStepArray setValueAtIndex !mergedStep !newStepBId !0]
        #and update oldToNewStepId, because links has alreaydy been done.
        @uint currentIndex= [compressedStepArray sizeForAxis !0] #index to update.
        var oldToNewStepIdUpdated =@intMap.emptyMap{}
        for (@lstring key @uint newId) in  oldToNewStepId do
          @uint newIdUpdated
          if newId == currentIndex then newIdUpdated = newStepBId
          else newIdUpdated = newId
          end
          [!?oldToNewStepIdUpdated insertKey !key !newIdUpdated]
        end
        oldToNewStepId = oldToNewStepIdUpdated
      else
        #save stepA into the compressed step array.
        @uint sizeOfCompressedArray = [compressedStepArray sizeForAxis !0]
        [!?compressedStepArray forceValueAtIndex !stepA !sizeOfCompressedArray !0]  
      end
      #stepB has been done. Stop recursion.
    else
      #check that stepB is NOT an entry point of another step
      #i.e. stepB has only one predecessor.
      @uint nbPreds
      [destinationSteps searchKey !lstringWith(![stepBId string]) ?nbPreds]
      if nbPreds > 1 then
        #more than one predecessor
        #we can still merge if stepA is empty.
        if [stepA isEmpty] then
          #OK. Merge.
          @timingStep mergedStep = mergeSteps(!stepA !stepB)
          [!?oldToNewStepId insertKey !lstringWith(![stepBId string]) ![compressedStepArray sizeForAxis !0]]
          mergeStepsInAutomata ( !mergedStep !stepArray !?compressedStepArray !destinationSteps !?oldToNewStepId !externalActivation)
        else
          #-> can't merge stepA and stepB.
          #save stepA into the compressed step array.
          @uint sizeOfCompressedArray = [compressedStepArray sizeForAxis !0]
          [!?compressedStepArray forceValueAtIndex !stepA !sizeOfCompressedArray !0]
          #start from new stepB.
          [!?oldToNewStepId insertKey !lstringWith(![stepBId string]) ![compressedStepArray sizeForAxis !0]]
          mergeStepsInAutomata ( !stepB !stepArray !?compressedStepArray !destinationSteps !?oldToNewStepId !externalActivation)
        end
      else
        if simMayStop(!stepA) then
          #can't merge. Simulation may stop.
          @uint sizeOfCompressedArray = [compressedStepArray sizeForAxis !0]
          [!?compressedStepArray forceValueAtIndex !stepA !sizeOfCompressedArray !0]
          #start from new stepB.
          [!?oldToNewStepId insertKey !lstringWith(![stepBId string]) ![compressedStepArray sizeForAxis !0]]
          mergeStepsInAutomata ( !stepB !stepArray !?compressedStepArray !destinationSteps !?oldToNewStepId !externalActivation)
        else
          #Ok. Merging.
          @timingStep mergedStep = mergeSteps(!stepA !stepB)
          [!?oldToNewStepId insertKey !lstringWith(![stepBId string]) ![compressedStepArray sizeForAxis !0]]
          mergeStepsInAutomata ( !mergedStep !stepArray !?compressedStepArray !destinationSteps !?oldToNewStepId !externalActivation)
        end
      end
    end
  end
}

#recursive routine that builds simulations steps from Harmless automata.
#this routine generate at least one step for each state,
proc getSimulationStepsRec
  ?let  @adjMat harmlessAutomata
  ?let  @uint currentState
  ?! @uint currentStepId
  ?! @uint previousStepId
  ?! @timingStepArray stepArray
  ?! @intMap statesDone {
  @timingStep currentStep = getEmptyStep()
  #should check that state have not been done.
  #to generate code only once for each automata state.
  if not [statesDone hasKey ![currentState string]] then
    #add an empty step that is associated to that state.
    changeToNextStep ( !?previousStepId !?currentStepId !?stepArray !?currentStep)
    #Save stepId related to that state in the case of more than one incoming transition.
    #the currentStepId gives the index of the next step to insert,
    #previousStepId gives the index of the last inserted. That's the one required here.
    [!?statesDone insertKey !lstringWith(![currentState string]) !previousStepId]
    #is current state have a wait?
    @expressionlist waitCycleList = [[harmlessAutomata stateList] waitCycleListAtIndex !currentState]
    if [waitCycleList length] > 0 then #there is a wait, add a step.
      [!?currentStep setWaitCycle !waitCycleList]
      changeToNextStep ( !?previousStepId !?currentStepId !?stepArray !?currentStep)
    end
    #search for output Transitions
    @uintlist nextStateList = [harmlessAutomata getOutputTransitions !currentState]
    if [nextStateList length] == 1 then
      #ok, only one, get it.
      @uint nextState
      [nextStateList first ?nextState]
      @timingTransition transition = [harmlessAutomata getTransition !nextState !currentState]
      #check that there is no condition (as there is only one transition):
      if [[transition guardList] length] > 0 then
        error @location.here: "internal error in timing. As there is only one transition from one state"+
                    " to another, it should not have any condition."
      end
      #check for synchro => imply a new step
      if [[transition synchroInList] length] > 0 then
        [!?currentStep setSynchroInList ![transition synchroInList]]
        changeToNextStep ( !?previousStepId !?currentStepId !?stepArray !?currentStep)
      end
      if [[transition synchroOutList] length] > 0 then
        [!?currentStep setSynchroOutList ![transition synchroOutList]]
        changeToNextStep ( !?previousStepId !?currentStepId !?stepArray !?currentStep)
      end
      if [[transition synchroOutBroadcastList] length] > 0 then
        [!?currentStep setSynchroOutBroadcastList ![transition synchroOutBroadcastList]]
        changeToNextStep ( !?previousStepId !?currentStepId !?stepArray !?currentStep)
      end
      #update
      if [[transition updateList] length] > 0 then
        [!?currentStep setUpdateList ![transition updateList]]      
        changeToNextStep ( !?previousStepId !?currentStepId !?stepArray !?currentStep)
      end
      #done. recursive call.
      getSimulationStepsRec ( !harmlessAutomata !nextState !?currentStepId !?previousStepId !?stepArray !?statesDone)
    else
      #more than one output condition (as there are many output transitions)
      for (@uint dst) in  nextStateList do
        #transform condition list into one condition code string
        @timingTransition transition = [harmlessAutomata getTransition !dst !currentState]
        @string guardCode = ""
        for (@expression exp) in  [transition guardList]
        do guardCode += "("+[exp generateCode !@codeCtx. C]+")"
        between guardCode += "&&"
        end
        #add the guard.
        [!?currentStep addGuard !guardCode]
      end
      changeToNextStep ( !?previousStepId !?currentStepId !?stepArray !?currentStep)
      #save the previousStepId (state that have conditions).
      @uint previousStepIdSav = previousStepId
      for (@uint dst) in  nextStateList do
        previousStepId = previousStepIdSav
        getSimulationStepsRec ( !harmlessAutomata !dst !?currentStepId !?previousStepId !?stepArray !?statesDone)    
      end
    end
  else # we are on a done state.
    #link that previous step (the new one won't be used) to the one corresponding to the 
    #state's step.
    @uint dst
    [statesDone searchKey !lstringWith(![currentState string]) ?dst]
    setNextStepId ( !?stepArray !previousStepId !dst)      #update previous step (link)  
  end
}

#debugging routines.
proc timingStepLog
  ?let  @timingStep step {
  #update
  for (@instruction inst) in  [step updateList] 
  before message "update: "
  do message [inst generateCode !0 !@codeCtx. C]
  between message ", "
  after message "\n"
  end
  #synchro in
  for (@string sig) in  [step synchroInList] 
  before message "synchro wait: "
  do message sig
  between message ", "
  after message "\n"
  end
  #synchro out
  for (@string sig) in  [step synchroOutList] 
  before message "synchro emit: "
  do message sig
  between message ", "
  after message "\n"
  end
  #synchro out broadcast
  for (@string sig) in  [step synchroOutBroadcastList] 
  before message "synchro broadcast emit: "
  do message sig
  between message ", "
  after message "\n"
  end  
  #wait
  for (@expression exp) in  [step waitCycle]
  before message "wait:"
  do 
    @string waitStr = [exp generateCode !@codeCtx. Uppaal]
    message waitStr
  between message " + "
  after message "\n"
  end
  #next.
  if [[step guardList] length] == 0 then #one next only
    @string nextStr
    if [[step nextStepList] length] > 0 then
      @uint next
      [[step nextStepList] first ?next]
      nextStr = [next string]
    else nextStr = "unknown"
    end
    message "next step:"+nextStr+"\n"
  else #more than one output transition
    for (@uint next) in  [step nextStepList], (@string guardCode) in [step guardList] 
    do message "condition "+guardCode+" -> step "+[next string]+"\n"
    end
    if [[step nextStepList] length] != [[step guardList] length] then
      message "ERROR: not the same nb of conditions/next steps.\n"
    end
  end
}

# With the 'activation', one last step cannot be merged with the first step.
# This is done to easily know if the automata has done one loop.
# We can optimze if the step just before (the last stage) should not wait.
# * the transition is updated.
func timingStepOptimWithAutomataActivation
  ?let  @timingStepArray stepArray
  -> @timingStepArray optimStepArray {
  optimStepArray = stepArray
  #determine last step (the only that points to step 0)
  @uint lastStepId = 0
  @range dimSteps= [stepArray rangeForAxis !0]
  @uint stepId = 0
  for stepId in dimSteps do
    @timingStep currentStep = [stepArray valueAtIndex !stepId !0]
    if [[currentStep nextStepList] length] == 1 then #one condition
      for (@uint next) in  [currentStep nextStepList] do
        if next == 0 then # found
          if lastStepId != 0 then error @location.here : "internal error in timingStepOptimWithAutomataActivation" end
          lastStepId = stepId
        end
      end
    end
  end
  #ok. Then get all steps that points to this lastStepId, and update their transition id steps does not wait.
  for stepId in dimSteps do
    @timingStep currentStep = [stepArray valueAtIndex !stepId !0]
    if not simMayStop(!currentStep) then
      var nextStepList =@uintlist.emptyList{}
      for (@uint next) in  [currentStep nextStepList] do
        if next == lastStepId then
          nextStepList += !0
        else
          nextStepList += !next
        end
      end
      [!?currentStep setNextStepList !nextStepList]
    end
    [!?optimStepArray setValueAtIndex !currentStep !stepId !0]
  end
}


proc timingStepArrayLog
  ?let  @timingStepArray stepArray {
  @range dimSteps= [stepArray rangeForAxis !0]
  for stepId in dimSteps do
    @bool valid =  [stepArray isValueValidAtIndex !stepId !0]
    if valid then
      @timingStep currentStep = [stepArray valueAtIndex !stepId !0]
      message "****** step "+[stepId string]+" *****\n"
      timingStepLog ( !currentStep)
      message "------ step "+[stepId string]+" ------\n"
    end
  end
}
# vim:ft=galgas:ts=2:sw=2:tw=0
