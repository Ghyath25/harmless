#
# @file template_functions.ggs
#
# @section File description
#
# functions available in the templates
#
# @section Copyright
#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline is protected by the french intellectual property law.
#
# goil is distributed under the GNU Public Licence V2
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# @section File informations
#
# $Date$
# $Rev$
# $Author$
# $URL$
#



#import "systemConfig.gSemantics";

func trueFalse ?let @bool inBool ->@string result {
  if inBool then
    result = "true"
  else
    result = "false"
  end
}

func yesNo ?let @bool inBool ->@string result {
  if inBool then
    result = "YES"
  else
    result = "NO"
  end
}

func TRUEFALSE ?let @bool inBool ->@string result {
  if inBool then
    result = "TRUE"
  else
    result = "FALSE"
  end
}

func tab ?let @uint64 nbTab -> @string result {
  @uint64 i = 0L
  result = ""
  loop( 80)
  while i < nbTab do
    result += "\t"
    i = i+1
  end 
}

#type 0 -> unsigned
#type 1 -> signed
func CType ?let @uint64 size -> @string result {
  if    size <= 8L  then result = "8"
  elsif size <= 16L then result = "16"
  elsif size <= 32L then result = "32"
  elsif size <= 64L then result = "64"
  else error @location.here: "type too large to be encoded." :result
  end
}

#number of bits required to encode an unsigned number. tested.
#function nbBitsToCodeUnsigned
#  ?@uint64 val
#  -> @uint nbBits
#:
#  @uint var := 65; # max 64 loops.
#  nbBits := 0;
#  loop var:
#  while (val != 0L) do
#    val := val >> 1;
#    nbBits := nbBits + 1;
#  end loop;
#end function;


