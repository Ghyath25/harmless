  #define @instruction and instruction List

# basic instructions (extends @instruction):
# + @instIf
# + @instReturn
# + @instNop
# + @instLoop
# + @instError
# + @instPrint
# + @instMessage
# + @instFunctionCall
# + @instAssignment
# + @instDeclaration   -> declared in gadl_variable.gSemantics
#   -> @instDeclarationRegSlice 
#   -> @instDeclarationDevice
# + @instTypeDefinition

#reader:
# @instructionList getDeclarations -> return the map of variable, fields, etc.

## get name for instDeclaration -> because there is a subclass for slice registers.

#abstract class @instruction {
#  @location loc;
#}
#
#list @instructionList {
#  @instruction inst;
#}

#mainly used for debug and trace.
getter @instructionList getDeclarations
  ?let  @varClass varClass
  -> @varBaseTypeMap varBaseTypeMap {
  varBaseTypeMap = @varBaseTypeMap. emptyMap
  for () in  self do
    if (inst is == @instDeclaration) then
      let @instDeclaration instCast = ( inst as @instDeclaration)      
      if varClass == [instCast access] then
        if not [varBaseTypeMap hasKey ![[instCast name] string]] then
          [!?varBaseTypeMap insertKey ![instCast name] ![[instCast type] getBaseType]]
        end
      end
    end
  end
}



class @instIf : @instruction {
  @expression cond
  @instructionList instIfList
  @instructionList instElseList
}

class @instReturn : @instruction {
  @expression exp
}

class @instNop : @instruction {
  @expressionContext expContext
  @expression cond
}

class @instLoop : @instruction {
  @expression guard
  @expression expCondition
  @instructionList loopInstList
}

class @instError : @instruction {
  @bool onlyWarn
  @lstring msg
}

class @instPrint : @instruction {
  @expression exp
}

class @instMessage : @instruction {
  @lstring msg
}

class @instFunctionCall : @instruction {
  @expIdf exp
}

#This class is used for a function call:
#example:
# u1 myFunc(u8 a)
# ...
# myFunc(g)
#=> create an alias u8 a=&g
#class @instAlias : @instruction {
#  @lstring idf
#  @typedefMemberMap memberList
#}

class @instAssignment : @instruction {
  #got 2 idf, because the code may be different to access the idf for writting and reading.
  @expIdf idfAssign
  @expIdf idfRead #for fieldLists, we have also to read the left side idf.
  @fieldList flist
  @expression exp
}

#  @instDeclaration declared in gadl_variable.gSemantics

#class @instDeclaration extends @instruction {
#  @varAbstractType type;
#  @lstring idf feature nogetter; #should not be used directly -> use the 'name' reader instead.
#  @varClass access;
#  @string prefixLocal; #used to get a unique local var name.
#}

class @instDeclarationDevice : @instDeclaration {
  @memoryMapping address
}

class @instDeclarationRegSlice : @instDeclaration {
  @lstring sliceName
  @fieldList fieldList
}

class @instTypeDefinition : @instruction {
  @lstring idf
  @typedefMemberMap memberList
}



##########
## get name for instDeclaration
getter @instDeclaration name
  -> @lstring fullName {
  fullName = idf
}

override getter @instDeclarationRegSlice name
  -> @lstring fullName {
  fullName = @lstring. new { ![idf string]+"_"+[sliceName string] ![sliceName location]}
}


# vim:ft=galgas:ts=2:sw=2:tw=0
