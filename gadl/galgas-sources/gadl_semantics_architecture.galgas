

#This structure is deducted from the pipeline data structures. It is a sequence of simple pipelines
#that is in an instruction path. Example:
#  consider the pipeline (a|b),c,(d|e). One @instructionPipelinePath is a-c-d
list @instructionPipelinePath
{
  @simplePipeline pipeline
}

#This structure collects ALL the sequential simple pipelines that may be taken by instructions.
#  consider the pipeline (a|b),c,(d|e). The @instructionPipelinePathList contains 4 items
#  a-c-d, a-c-e, b-c-d, b-c-e.
list @instructionPipelinePathList
{
  @instructionPipelinePath instructionPath
}

#This map stores all sequential pipelines for all machines. 
map @instructionPipelinePathListForMachine
{
  @instructionPipelinePathList ippList
  insert insertKey error message "[internal error] the '%K' ipplist is already defined in %L" 
  search searchKey error message "[internal error] the '%K' ipplist is not defined in map"
}

#debug purpose. Just give the pipeline string: a-c-d
# OK CHECKED.
proc getInstructionPipelinePathString
  ?let  @instructionPipelinePath ipp
  !  @string str {
  str = ""
  for (@simplePipeline sp) in  ipp do
    str += [[sp mPipelineName] string]
    if [[sp mPipelineAlias] string] != "" then
      str += "("+[[sp mPipelineAlias] string]+")"
    end
  between
    str += "-"
  end
}

#this routine get ALL the sequential simple pipelines that may be taken by instructions from 
#a pipeline expression. (recursive routine).
# the 'node' is the root of the pipelineExpression (found in the machineMap)
# the instructionPipelinePathList is should have one element at the beginning (an empty instructionPipelinePath)
# It is then populated in the routine.
# OK CHECKED.
proc getInstructionPipelinePath
  ?let  @pipelineExpression node
  ?! @instructionPipelinePathList instructionPipelinePathList {
  cast node
  case == @simplePipeline sp :
    #This is a simple pipeline. Add it to ALL items of the instructionPipelinePathList.
    var ippl =@instructionPipelinePathList.emptyList{}
    for (@instructionPipelinePath instructionPath) in  instructionPipelinePathList do
      @instructionPipelinePath newInstructionPath = instructionPath
      newInstructionPath += !sp
      ippl += !newInstructionPath
    end
    instructionPipelinePathList = ippl
  case == @pipelineSequence ps :
    #sequence, propagation to the left and right nodes.
    getInstructionPipelinePath ( ![ps mLeftOperand]  !?instructionPipelinePathList)
    getInstructionPipelinePath ( ![ps mRightOperand] !?instructionPipelinePathList)
  case == @pipelineParallel pp :
    #parallel. Duplicate the list.
    @instructionPipelinePathList ipplRight = instructionPipelinePathList
    getInstructionPipelinePath ( ![pp mLeftOperand]  !?instructionPipelinePathList)
    getInstructionPipelinePath ( ![pp mRightOperand] !?ipplRight)
    for (@instructionPipelinePath instructionPath) in  ipplRight do
      instructionPipelinePathList += !instructionPath
    end
  else
    error @location.here: "internal error: Cannot handle pipeline data type."
  end
}



#This routine checks that instructions can map on the pipeline model:
#first, we have to get instruction flow inside sequential pipelines.
#  consider the pipeline (a|b),c,(d|e), the different paths are
#  a-c-d, a-c-e, b-c-d, b-c-e.
#second, we have to get, for each instruction, the ordered list of components methods used.
#third, we have to map all these instructions onto 1 of the pipeline path.
proc extractPipelinePaths
  ?let  @machineMap machine
  !  @instructionPipelinePathListForMachine ippListMap {
  ippListMap = @instructionPipelinePathListForMachine. emptyMap
  for(@lstring machineName @pipelineExpression pipelineExpression) in  machine do
    #first, get instruction pipeline paths.
    @string ioChaine = ""
    [pipelineExpression parcours !?ioChaine]
    if [option .verbose_output value] then
      message "machine '"+machineName+"' have the pipeline "+ioChaine+"\n"
    end
    var instructionPipelinePathList =@instructionPipelinePathList.emptyList{}
    var ipp =@instructionPipelinePath.emptyList{}
    instructionPipelinePathList += !ipp
    getInstructionPipelinePath ( !pipelineExpression !?instructionPipelinePathList)
    if [option .verbose_output value] then
      message "instruction paths are\n"
      for (@instructionPipelinePath instructionPath) in  instructionPipelinePathList do
        @string str
        getInstructionPipelinePathString ( !instructionPath ?str)
        message "\t"+str+"\n"
      end
    end
    [!?ippListMap insertKey !machineName !instructionPipelinePathList]
  end
}

func isDevicePortShared
  ?let  @architectureMap architectureMap
  ?let  @lstring archName
  ?let  @lstring deviceName
  ?let  @lstring portName
  -> @bool isShared {
  @deviceMap deviceMap
  @portMap portMap
  [architectureMap searchKey !archName ?deviceMap ?*]
  [deviceMap searchKey !deviceName ?* ?portMap ?* ?*]
  [portMap searchKey !portName ?isShared ?*]
}

# vim:ft=galgas:ts=2:sw=2:tw=0
