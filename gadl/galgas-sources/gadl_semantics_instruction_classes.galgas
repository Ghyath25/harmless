 #varIdfStruct (address space)
  

#list of pipeline stages (+port/devices) for one pipeline sequence.
list @flatPipelineStageList {
  @lstring pipelineName     #pipeline that owns the stage
  @lstring architectureName #architecture on which the pipeline is mapped.
  @lstring stageName
  @stageBodyList body #devide mapping.
}

#list of @flatPipelineStageList. One for each pipeline sequence.
list @flatPipelineStageListList {
  @flatPipelineStageList fpsList
  @string logString
}

#this routine uses a '@instructionPipelinePath' structure to determine a list
#of pipeline stages, with an easier to process data structure.
proc getListOfPipelineStages
  ?let  @pipelineMap pipelineMap
  ?let  @instructionPipelinePath ipp
  !  @flatPipelineStageList fps {
  fps = @flatPipelineStageList. emptyList
  for (@simplePipeline pipeline) in  ipp do
    @lstring pipelineName = [pipeline mPipelineName]
    @lstring architectureName
    @stageList stageList
    [pipelineMap searchKey !pipelineName ?architectureName ?stageList]
    for (@lstring stageName @stageBodyList stageBodyList) in  stageList do
      fps += !pipelineName !architectureName !stageName !stageBodyList
    end
  end
}

proc logFlatPipelineStageList
  ?let  @flatPipelineStageList fps
  ?!  @string logStr {
  for (@lstring pipelineName 
               @lstring archName 
               @lstring stageName 
               @stageBodyList body) in  fps do
    logStr +="<p>"+pipelineName+"(arch:"+archName+") -> stage "+stageName+":<br/>\n"
    for (@stageBody stageBody) in  body do
      @lstring deviceName = [stageBody device]
      logStr += "device "+deviceName+":"
      @lstringlist portList = [stageBody portList]
      for (@lstring port) in  portList do
        logStr += [port string]
      between
        logStr += ", "
      end
      logStr += "<br/>\n"
    end
    logStr += "</p>\n"
  end
}

#This routine is applied on 1 device, where components are matching.
#returns all the matching ports for a method.
proc getMatchingPortsOnDevice
  ?let  @portMap portMap
#  ?? @aliasMap readAliasMap  #aliases for the 'read' access
#  ?? @aliasMap writeAliasMap #aliases for the 'write' access
  ?let  @lstring methodName
  !  @stringset matchingPortsInDevice {
  matchingPortsInDevice = @stringset. emptySet
  for (@lstring name * @functionAllowedToAPort functionAllowedToAPort) in  portMap do
    #@bool hasRead := false;
    #@bool hasWrite := false;
    cast functionAllowedToAPort
    case == @isOr functionAllowedToAPortIsOr :
      @lstringlist methodList = [functionAllowedToAPortIsOr functionAllowedList]
      for (@lstring methodLStr) in  methodList do
        if [methodLStr string] == [methodName string] then
          matchingPortsInDevice += ![name string]
        #elsif [methodLStr string] == "read" then
        #  hasRead := true;
        #elsif [methodLStr string] == "write" then
        #  hasWrite := true;
        end
      end
    case == @isWithNumber functionAllowedToAPortIsWithNumber :
      @string methodStr = [[functionAllowedToAPortIsWithNumber functionAllowedName] string]
      if methodStr == [methodName string] then
        matchingPortsInDevice += ![name string]
      #elsif methodStr == "read" then
      #  hasRead := true;
      #elsif methodStr == "write" then
      #  hasWrite := true;
      end
    case == @isAll : #Ok.
      matchingPortsInDevice += ![name string]
    case == @isExcept functionExcludedToAPort :
      @lstringlist methodExcludedList = [functionExcludedToAPort functionExcludedList]
      @bool found = false
      for (@lstring methodLStr) in  methodExcludedList do
        if [methodLStr string] == [methodName string] then
          found = true
        #elsif [methodLStr string] == "read" then
        #  foreach readAliasMap (@lstring methodStr) do
        #    if [methodStr string] == [methodName string] then
        #      found := true;
        #    end if;
        #  end foreach;
        #elsif [methodLStr string] == "write" then
        #  foreach writeAliasMap (@lstring methodStr) do
        #    if [methodStr string] == [methodName string] then
        #      found := true;
        #    end if;
        #  end foreach;
        end
      end
      if not found then #not excluded
        matchingPortsInDevice += ![name string]
      end
    else
      error @location.here: "internal error in routine 'getMatchingPortsOnDevice'"
    end
    #if hasRead then #check in the read list.
    #  foreach readAliasMap (@lstring methodStr) do
    #    if [methodStr string] == [methodName string] then
    #      matchingPortsInDevice += ![name string];
    #    end if;
    #  end foreach;
    #end if;
    #if hasWrite then #check in the read list.
    #  foreach writeAliasMap (@lstring methodStr) do
    #    if [methodStr string] == [methodName string] then
    #      matchingPortsInDevice += ![name string];
    #    end if;
    #  end foreach;
    #end if;
  end
}

proc isComponentMethodMatchingDevice
  ?let  @deviceMap deviceMap #structure created during device parsing. Store all architecture device info.
  ?let  @stageBody stageBody #structure created during pipeline parsing for 1 device. Store the port list.
  ?let  @lstring componentName #component name of the instruction to map on pipeline
  ?let  @lstring methodName #method name ...
  ?let  @varIdfStruct varIdfStruct  
  !  @bool ok #return true if the component.method match the device.
  ! @lstring portName {
  @lstring device = [stageBody device]
  @lstringlist portList = [stageBody portList]
  ok = false
  #get info about the device.
  @lstring componentRelatedToDeviceName
  @portMap  portMap       #ports for the device.
  #@aliasMap readAliasMap;  #aliases for the 'read' access TODO: a supprimer?
  #@aliasMap writeAliasMap; #aliases for the 'write' access
  #[deviceMap searchKey !device ?componentRelatedToDeviceName ?portMap ?readAliasMap ?writeAliasMap];
  [deviceMap searchKey !device ?componentRelatedToDeviceName ?portMap ?* ?*]
  #message "\tcomponentName :".componentName."\n";
  #message "\tmethodName :".methodName." -> ".[methodName leftSubString !4]."\n";
  #check for address space.
  @bool isAnAddressSpace = [varIdfStruct.memSpaceMap hasKey ![componentRelatedToDeviceName string]]
  if ([componentName string] == [componentRelatedToDeviceName string]) | isAnAddressSpace then
    @lstring methodToSearch = methodName
    if isAnAddressSpace then
      if [methodName leftSubString !4] == "read" then 
        methodToSearch = @lstring. new { !"read" !@location.here}
      elsif [methodName leftSubString !5] == "write" then
        methodToSearch = @lstring. new { !"write" !@location.here}
      end
    end
    #component name is matching, next is method
    @stringset matchingPortsInDevice
    #getMatchingPortsOnDevice !portMap !readAliasMap !writeAliasMap !methodName ?matchingPortsInDevice;
    getMatchingPortsOnDevice ( !portMap !methodToSearch ?matchingPortsInDevice)
    #Ok. Now, we have a stringSet (matchingPortsInDevice) that contains the ports that can accept the method.
    #get a stringset of ports available in pipeline stage;
    var portsAvailableInPipelineStage =@stringset.emptySet{}
    for (@lstring port) in  portList do
      portsAvailableInPipelineStage += ![port string]
    end
    #then checks that it maps. 3 possibilities
    # 0 match -> method can't map.
    # 1 match -> method can map \o/
    # >1 match -> ambiguity.
    @stringset intersection = matchingPortsInDevice & portsAvailableInPipelineStage
    if [intersection count] == 0 then    # 0 match -> method can't map.
      ok = false
      portName = @lstring. new { !"" !@location.here} #unused value.
    elsif [intersection count] == 1 then # 1 match -> method can map \o/
      ok = true
      portName = @lstring. new { !"" !@location.here}
      for (@string port) in  intersection do #1 loop only.
        portName = @lstring. new { !port !@location.here} #no more location info :-/
      end
    else     # >1 match -> ambiguity.
      error device: "The component access "+[componentName string]+"."+[methodName string]+
       " is ambiguous. It can match with the following ports:"
      for (@string port) in  intersection do #1 loop only.
        error device: "\t port "+port
      end
      ok = false
      portName = @lstring. new { !"" !@location.here} #unused value.
    end
  else
    ok = false
    portName = @lstring. new { !"" !@location.here} #unused value.
  end
  #special case for implicit fetch.
  if [componentName string] == "__fetch_component" then
    if [portMap hasKey !"fetch"] then #ok.
      portName = @lstring. new { !"fetch" !@location.here}
      ok = true
    else
      portName = @lstring. new { !"" !@location.here} #unused value.
      ok = false
    end
  end
}

proc getMaxPortAccess
  ?let  @architectureMap architectureMap
  ?let  @lstring archName
  ?let  @lstring deviceName
  ?let  @lstring portName
  !  @uint val {
  @deviceMap deviceMap
  @portMap portMap
  @functionAllowedToAPort functionAllowedToAPort
  [architectureMap searchKey !archName ?deviceMap ?*]
  [deviceMap searchKey !deviceName ?* ?portMap ?* ?*]
  [portMap searchKey !portName ?* ?functionAllowedToAPort]
  cast functionAllowedToAPort
  case == @isWithNumber withNumber :
    val = [[withNumber numberOfPermission] uint]
  case == @isOr isOr :
    val = [[isOr numberOfPermission] uint]
  case == @isAll isAll :
    val = [[isAll numberOfPermission] uint]
  else
    val = 1
  end
}

#This routine checks that the number of accesses to the device/ports
#does not exceeds the max limits.
proc checkForPortAccessLimits
  ?let  @architectureMap architectureMap
  ?let  @lstring archName
  ?let  @lstring deviceName
  ?let  @lstring portName
  ?! @intMap accessMap
  ?! @bool foundStage {
  #update the uint map to be sure that it does not exceed the limit.
  @lstring lportDev = @lstring. new { ![deviceName string]+"_"+[portName string] !@location.here}
  if [accessMap hasKey ![lportDev string]] then
    #update the value.
    @uint val
    [accessMap searchKey !lportDev ?val]
    #compare the current value with the max.
    @uint max
    getMaxPortAccess ( !architectureMap !archName !deviceName !portName ?max)
    if val >= max then
      #it will exced the max (if the current one is inserted). 
      #We did not found the correct stage.
      foundStage = false
    else
      #ok. Update the map.
      [!?accessMap removeKey !lportDev ?*]
      [!?accessMap insertKey !lportDev !val+1]
    end
  else #insert a new value.
    [!?accessMap insertKey !lportDev !1]
  end
#  log accessMap;
}


#This routine maps one instruction on one pipeline path. This is called by
# mapInstructionsOnArchitecture
# exploration is lead by instructions: i.e. At one graph node, we search for the appropriate 
# pipeline stage.
# This routine is recursive: It processes the current nodeRoot and call recursively the 
# routine to process sub-nodes.
proc mapInstructionOnPipelinePath
  ?let  @architectureMap architectureMap
  ?let  @lstring instName
  ?let  @flatPipelineStageList fps #list of pipeline stages.
  ?let  @graphNode nodeRoot        #input : graph with component/method.
  ?let  @varIdfStruct varIdfStruct  
  ?! @intMap accessMap          #map to record accesses to port devices.
  !  @graphNode portAccessNode  #output: graph with device/port
  ?! @uint nodeId               #to generate the 'portAccessNode' graph.
  !  @bool ok                   #return true if there was no pb.
  ?let  @bool debug {
  #process the current node:
  @bool foundStage = false
  @lstringlist data = [nodeRoot data] #componentName methodName;
  @flatPipelineStageList copyFps = fps #this structure will be used in recursives calls.
  @lstring deviceName = @lstring. new { !"" !@location.here}
  @lstring portName = @lstring. new { !"" !@location.here}
  if [data length] == 2 then #This is not an empty node.
    @lstring componentName
    @lstring methodName
    [!?data popFirst ?componentName]
    [!?data popFirst ?methodName]
    if debug then message "\t\tprocessing : "+[componentName string]+"."+[methodName string]+": line "+[[[methodName location] line] string]+"\n" end
    #for each stage.
    for (@lstring pipelineName 
                 @lstring archName 
                 @lstring stageName 
                 @stageBodyList body) in  fps while not foundStage do
      #can the component access map on the stage?
      for (@stageBody stageBody) in  body while not foundStage do
        deviceName = [stageBody device]
        @deviceMap deviceMap
        [architectureMap searchKey !archName ?deviceMap ?*]
        if debug then message "\t\t\tmatching "+[deviceName string]+" ? " end
        isComponentMethodMatchingDevice ( !deviceMap !stageBody !componentName !methodName !varIdfStruct ?foundStage ?portName)
        if debug then if foundStage then message "yes -> "+[deviceName string]+"."+[portName string]+"\n" 
        else message "no\n" end end
      end
      #answer is in 'foundStage'. But, even if it matches, does it exceed max port accesses limit?
      if foundStage then
        checkForPortAccessLimits ( !architectureMap !archName !deviceName
                                 !portName !?accessMap !?foundStage)
        if debug & not foundStage then message "\t\t\t\t-> but excess port access limits\n" end
      end
      if not foundStage then #not a 'else' case, because the bool may have change in the 'if'.
        #This stage does not fit. Try the next one.
        [!?copyFps popFirst ?* ?* ?* ?*]
        accessMap = @intMap. emptyMap #new stage -> reset accessMap.
      end
    end
  else #no data in node -> empty node. Don't use it.
    foundStage = true
  end
  if foundStage then
    #we found a stage: start recursion and set node.
    var subNodeList =@graphNodeList.emptyList{}
    @bool subOk = true
    for (@graphNode subnode) in  [nodeRoot nextNodeList] while subOk do
      @graphNode portAccessSubNode
      @intMap accessMapSubNode = accessMap #make a copy for subnodes.
      mapInstructionOnPipelinePath ( !architectureMap !instName !copyFps !subnode !varIdfStruct !?accessMapSubNode ?portAccessSubNode !?nodeId ?subOk !debug)
      subNodeList += !portAccessSubNode
    end
    ok = subOk #ok since all subnodes are ok and current stage is ok.
    var data =@lstringlist.emptyList{}
    @string strId = ""
    if [[nodeRoot data] length] == 2 then #This is not an empty node.
      data += !deviceName
      data += !portName
      strId += [deviceName string]+"_"+[portName string]
    else
      strId += "empty"
    end
    @string uid = getGraphNodeUniqueId(!"strId" ! subNodeList)
    portAccessNode = @graphNode. new { !data !subNodeList !uid}
    nodeId = nodeId + 1
  else
    #we did not found a stage. The instruction can not map on the pipeline.
    #This is not an error: it may map on another pipeline path.
    portAccessNode = @graphNode. new { !@lstringlist. emptyList !@graphNodeList. emptyList !"empty"}
    ok = false
  end
}

#a map that contains a graphNodeMap...
#This data structure is used because each instruction can have several graphs, 
#depending on the pipeline path.
#so the first Key is the instruction name. Then it returns a second map on which
#key is the pipeline path name.
map @graphNodeMapMap {
  @graphNodeMap graphNodeMap
  insert insertKey error message "the '%K' value is already defined in %L" 
  search searchKey error message "the '%K' value is not defined"
  remove removeKey error message "the '%K' value is not defined and cannot be removed."
}

#This routine maps instructions on the pipeline:
#entry is the graph of components access for each instructions.
#output is the same graph for each instruction, but component accesses are replaced by
#device/port access.
proc mapInstructionsOnArchitecture
  ?let  @architectureMap architectureMap
  ?let  @pipelineMap pipelineMap
  ?let  @instructionPipelinePathList ippList
  ?let  @graphNodeMap componentAccessMap
  !  @graphNodeMapMap portAccessMap 
  ?let  @string exportDir
  ?let  @varIdfStruct varIdfStruct  
  ?! @TfieldMap templateStruct {
  #first, extract the pipeline paths into flatPipelineStageList (and log)
  @string logStr = ""
  var fpsList =@flatPipelineStageListList.emptyList{}
  for (@instructionPipelinePath ipp) in  ippList do
    @string str
    getInstructionPipelinePathString ( !ipp ?str)
    @flatPipelineStageList fps
    getListOfPipelineStages ( !pipelineMap !ipp ?fps)
    logStr += "<h2>Pipeline sequence "+str+"</h2>\n"
    logFlatPipelineStageList ( !fps !?logStr)
    fpsList += !fps !str
  end
  addStringValue ( !?templateStruct !lstringWith(!"HTML_LOG_PIPELINE_PATHS") !logStr)  
  #ok. All is in fpsList (and a log file).
  portAccessMap = @graphNodeMapMap. emptyMap
  #for each instruction
  var instMapping =@TfieldMapList.emptyList{}
  for (@lstring instName @graphNode nodeRoot) in  componentAccessMap do
    var instMappingBody =@TfieldMap.emptyMap{}
    addLStringValue ( !?instMappingBody !"name" !instName)
    var portAccessMapForInstruction =@graphNodeMap.emptyMap{}
    @uint nbSolution = 0
    #search for a valid pipeline path.
#    message "try to map ".instName.":\n";
    @bool foundAPath = false
    var instMappingOnPipeline =@TfieldMapList.emptyList{}
    for (@flatPipelineStageList fps @string fpsLog) in  fpsList do
      var instMappingOnPipelineBody =@TfieldMap.emptyMap{}
      @graphNode portAccessNode
#      message "\ton ".fpsLog."..";
      #This map is used to record accesses to port devices.
      # key is device'_'port. val is the number of times it has been used.
      var accessMap =@intMap.emptyMap{}
      @uint nodeId = 0
      @bool ok
      mapInstructionOnPipelinePath ( !architectureMap !instName !fps !nodeRoot !varIdfStruct !?accessMap ?portAccessNode !?nodeId ?ok !false)
      foundAPath = foundAPath | ok
      addStringValue ( !?instMappingOnPipelineBody !lstringWith(!"pipelineName") !fpsLog)
      if ok then
        [!?portAccessMapForInstruction insertKey !@lstring. new { !fpsLog !@location.here} !portAccessNode]
        @string graphVizContent = graphNodeOutput(!portAccessNode ![instName string])
        @string exportFileName = [instName string]+"-dev"+nbSolution
        createFile ( !exportDir+"/log" !exportFileName+".dot" !graphVizContent)
        addStringValue ( !?instMappingOnPipelineBody !lstringWith(!"file") !exportFileName)
        nbSolution ++
#        message "ok\n";
      end
      instMappingOnPipeline += !instMappingOnPipelineBody
    end
    addListValue (   !?instMappingBody !lstringWith(!"pipelineList") !instMappingOnPipeline)
    #not found -> cannot map.
    if not foundAPath then
      error instName: "The instruction "+instName+" cannot map on the pipeline architecture. Here is the full log of mapping process:"
      #now get the full log.
      for (@flatPipelineStageList fps @string fpsLog) in  fpsList do
        message "\tTry to map "+instName+" on "+fpsLog+"..\n"
        var accessMap =@intMap.emptyMap{}
        @uint nodeId = 0
        mapInstructionOnPipelinePath ( !architectureMap !instName !fps !nodeRoot !varIdfStruct !?accessMap ?* !?nodeId ?* !true)
      end
    end
    [!?portAccessMap insertKey !instName !portAccessMapForInstruction]
    instMapping += !instMappingBody
  end
  addListValue (   !?templateStruct !lstringWith(!"instMappingOnPipeline") !instMapping)
}

#list of data (device/port)
list @stringlistList
{
  @stringlist stringlist
}

list @lstringlistList
{
  @lstringlist stringlist
}

proc mergeListsOfDeviceAccess
  ?let  @lstringlistList list1Const
  ?let  @lstringlistList list2Const
  !  @lstringlistList listOut {
  @lstringlistList list2 = list2Const
  listOut = @lstringlistList. emptyList
  for (@lstringlist data1) in  list1Const do
    listOut += !data1
    #search for 'data1' in the 2nd list.
    var list2Copy =@lstringlistList.emptyList{}
    @bool found = false
    for (@lstringlist data2) in  list2 do
      #same entry found.
      if not found then
        if [data2 length] == [data1 length] then
          @bool ok = true
          for (@lstring str1) in  data1, (@lstring str2) in data2 while ok do
            ok = ok & ([str1 string] == [str2 string])
          end
          if ok then #the same
            found = true
          else
            list2Copy += !data2
          end
        else 
          list2Copy += !data2
        end
      else #already found. Just copy the list.
        list2Copy += !data2
      end  
    end
    #ok. get a copy of list2, without the value in list1
    list2 = list2Copy
  end
  for (@lstringlist data2) in  list2 do
    listOut += !data2
  end
}

#This routine only checks the mergeListsOfDeviceAccess routine... 
#Not called in the Harmless compiler.
#first list:  A-B
#second list: C-B-B-C-AB
#merge should give: A-B-C-B-C-AB
proc testMergeListsOfDeviceAccess {
  var list1 =@lstringlistList.emptyList{}
  var list2 =@lstringlistList.emptyList{}
  var strListA =@lstringlist.emptyList{}
  strListA += !@lstring. new { !"A" !@location.here}
  var strListB =@lstringlist.emptyList{}
  strListB += !@lstring. new { !"B" !@location.here}
  var strListC =@lstringlist.emptyList{}
  strListC += !@lstring. new { !"C" !@location.here}
  var strListAB =@lstringlist.emptyList{}
  strListAB += !@lstring. new { !"A" !@location.here}
  strListAB += !@lstring. new { !"B" !@location.here}
  list1 += !strListA
  list1 += !strListB
  list2 += !strListC
  list2 += !strListB
  list2 += !strListB
  list2 += !strListC
  list2 += !strListAB
  @lstringlistList listOut
  mergeListsOfDeviceAccess ( !list1 !list2 ?listOut)
  for(@lstringlist strList) in  listOut do
    for(@lstring str) in  strList do
      message [str string]
    end
  between
    message "-"
  end
  message "\n"
}


#This routine gets in the graph to extract the max number of device access required.
# for example, the code
# val := ALU.read32(regIndex);
# if val != 0 then
#   val := mem.read32(val)
# end if
# will generate the graph:
# ALU.read32
#    |  \
#    |   \
#    |    mem.read32
#    |    /
#    |  /
#, then, through the graph with devices generates:
# ALUDev.rs
#    |  \
#    |   \
#    |    memDev.read
#    |    /
#    |  /
#This routine gets the lists:
# ALUDev.rs -> memDev.read, as it has the maximum length.
proc getMaxBranchAccess
  ?let  @graphNode node
  ?! @lstringlistList dataList {
  dataList += ![node data]
  var maxDataList =@lstringlistList.emptyList{}
  for (@graphNode next) in  [node nextNodeList] do
    var currentBranchDataList =@lstringlistList.emptyList{}
    getMaxBranchAccess ( !next !?currentBranchDataList)
    @lstringlistList newMaxDataList
    #Ok, then get the max between maxDataList and currentBranchDataList.
    mergeListsOfDeviceAccess ( !maxDataList !currentBranchDataList ?newMaxDataList)
    maxDataList = newMaxDataList
  end
  for (@lstringlist data) in  maxDataList do
    dataList += !data
  end
}

sortedlist @devicePortAccessList {
  @string device
  @string port
  @uint nbCall
}{
  device >, port >, nbCall >
}

func getdevicePortAccessListString
  ?let  @devicePortAccessList dpal
  -> @string str {
  str = ""
  for (@string device @string port @uint nbCall) in  dpal do
    str += device+"."+port+" ("+[nbCall string]+")"
  between
    str += " - "
  end
}

func compareDevicePortAccessList
  ?let  @devicePortAccessList list1
  ?let  @devicePortAccessList list2
  ->  @bool same {
  same = [list1 length] == [list2 length]
  for (@string device1 @string port1 @uint nbCall1) in  list1, (@string device2 @string port2 @uint nbCall2) in  
          list2 while same do
    same = (device1 == device2) & (port1 == port2) & (nbCall1 == nbCall2)
  end
}

func compareInstructionClasses
  ?let  @instructionClass ic1
  ?let  @instructionClass ic2
  ->  @bool same {
  same = [ic1 count] == [ic2 count] #should be ok for the same nb of pipelines.
  for (@lstring pipe1 @devicePortAccessList dpal1) in  ic1 while same do
    if [ic2 hasKey ![pipe1 string]] then
       @devicePortAccessList dpal2
      [ic2 searchKey !pipe1 ?dpal2]
      same = compareDevicePortAccessList(!dpal1 !dpal2)
    else
      same = false #ic1 is ok for that pipeline, but not ic2.
    end
  end
}

func getKeyForStringList
  ?let  @lstringlist data
  -> @string key {
  key = ""
  for (@lstring str) in  data do
    key += [str string]
  between
    key += "."
  end
}

func getDevicePortAccessListFromFlatList
 ?let  @lstringlistList flatList
 -> @devicePortAccessList outList {
  outList = @devicePortAccessList. emptySortedList
  @lstringlistList flatListCopy = flatList
  var intMap =@intMap.emptyMap{}
  for (@lstringlist data) in  flatList do
    if [data length] == 2 then
      @string key = getKeyForStringList(!data)
      @lstring lkey = @lstring. new { !key !@location.here}
      @uint nb = 1
      if [intMap hasKey !key] then
        [intMap searchKey !lkey ?nb]
        nb = nb + 1
        [!?intMap removeKey !lkey ?*]
      end
      [!?intMap insertKey !lkey !nb]
    end
  end
  for (@lstringlist data) in  flatList do
    if [data length] == 2 then
      @string key = getKeyForStringList(!data)
      @lstring lkey = @lstring. new { !key !@location.here}
      if [intMap hasKey !key] then
        @uint nb
        [intMap searchKey !lkey ?nb]
        @lstring deviceName
        @lstring portName
        @lstringlist dataCopy = data
        [!?dataCopy popFirst ?deviceName]
        [!?dataCopy popFirst ?portName]
        outList += ![deviceName string] ![portName string] !nb
        [!?intMap removeKey !lkey ?*] #only one time.
      end
    end
  end
}

#stores device/port access for each pipeline path
#This is ONE instruction class. 
#The map is required because there is one list for each pipeline path.
# -> key is the pipeline path.
map @instructionClass {
  @devicePortAccessList devicePortAccessList 
  insert insertKey error message "the '%K' value is already defined in %L" 
  search searchKey error message "the '%K' value is not defined"
  remove removeKey error message "the '%K' value is not defined and cannot be removed."
}

#store instruction class for each instruction.
map @instructionClassMap {
  @uint id
  @instructionClass ic 
  insert insertKey error message "the '%K' value is already defined in %L" 
  search searchKey error message "the '%K' value is not defined"
  remove removeKey error message "the '%K' value is not defined and cannot be removed."
}

#This routine gets the instruction device/port graph for each pipeline path.
#Then, it "flats" graphs, to get the most longest path.
#Then it checks that each pipeline path generate the same "flat" device/port accesses (else an error is generated).
#From the flat list of device/port access, it generates a more usable "@devicePortAccessList"
#Eventually, it generates the instruction class Map: Each instruction that use the same device/port the
#same nb of times is in the same instruction class.
proc extractInstructionClasses
  ?let  @graphNodeMapMap portAccessMap
  !  @instructionClassMap icMap
  !  @stringMap instToInstructionClassMap #inst Name is the Key. value is the inst class name.
  ?! @TfieldMap unused templateStruct {
  icMap = @instructionClassMap. emptyMap
  instToInstructionClassMap = @stringMap. emptyMap
  @uint nbIc = 0
  for (@lstring instName @graphNodeMap graphNodeMap) in  portAccessMap do
    @string htmlLog = ""
    var icCurrent =@instructionClass.emptyMap{}
    htmlLog += "<h3>Device/Port accesses (with nb of occurences)</h3>"
    for (@lstring pipePath @graphNode deviceGraph) in  graphNodeMap do
      var flatList =@lstringlistList.emptyList{}
      getMaxBranchAccess ( !deviceGraph !?flatList)
      @devicePortAccessList dpal = getDevicePortAccessListFromFlatList(!flatList)
      [!?icCurrent insertKey !pipePath !dpal]
      htmlLog += "<p>For "+[pipePath string]+" :"+getdevicePortAccessListString(!dpal)+"</p>\n"
    end
    #search if there is an instruction class.
    @bool icFound = false
    @string instClassName = ""
    for (@lstring name @uint id @instructionClass ic) in  icMap while not icFound do
      icFound = compareInstructionClasses(!icCurrent !ic) #same
      if icFound then
        instClassName = [name string]
        [!?instToInstructionClassMap insertKey !instName !instClassName]
      end
    end
    if not icFound then
      instClassName = "instClass_"+[nbIc string]
      [!?icMap insertKey !@lstring. new { !instClassName !@location.here} !nbIc !icCurrent]
      [!?instToInstructionClassMap insertKey !instName !instClassName]
      nbIc = nbIc + 1
    end
      
    htmlLog += "<p>instruction class is <a href=\"instructionClass.html#"+instClassName+"\">"+instClassName+"</a></p>\n"
    #addStringValue !?templateStruct !lstringWith[!"HTML_INSTRUCTION_CLASS_EXTRACTION_FOR_INST"] !htmlLog;  
  end
  if [option .verbose_output value] then
    message "There are "+[icMap count]+" instruction classes (before reduction) for "+
            [instToInstructionClassMap count]+" instructions.\n"
  end
}

#This function simply returns how many times
#a device/port is used in pipelines. (for inst class reduction).
proc nbUsageofDevicePortInPipeline
  ?let  @lstring archName
  ?let  @lstring deviceName
  ?let  @lstring portName
  ?let  @pipelineMap pipelineMap
  !  @bool reductionPossible
  !  @uint nb {
  reductionPossible = true
  nb = 0
  for (@lstring pipeName @lstring architectureName @stageList stageList) in  pipelineMap while reductionPossible do
    if [archName string] == [architectureName string] then #same architecture.
      for (* @stageBodyList stageBodyList) in  stageList while reductionPossible do
        for (@stageBody stageBody) in  stageBodyList while reductionPossible do
          if [[stageBody device] string] == [deviceName string] then #same device
            @bool found = false
            for (@lstring port) in  [stageBody portList] while not found do
              if [portName string] == [port string] then
                #same device/port found. check that its type is not '@isRelease'
                #because it should be associated to an internal resource in that last case.
                cast stageBody
                  case == @isRelease :
                  reductionPossible = false #Associated to a 'internal resource'.
                else
                  nb = nb+1
                  found = true
                end
              end
            end
          end
        end
      end
    end
  end
}

func maxAccessesToAPortFromInstruction
  ?let  @instructionClassMap icMap
  ?let  @lstring deviceName
  ?let  @lstring portName
  -> @uint max {
  max = 0
  for (* * @instructionClass ic) in  icMap do
    for (* @devicePortAccessList devicePortAccessList) in  ic do
      for (@string device @string port @uint nbCall) in  devicePortAccessList do
        if ([deviceName string] == device) & ([portName string] == port) then
          if nbCall > max then
            max = nbCall
          end
        end
      end
    end
  end
}

proc logInstructionClasses
  ?let  @instructionClassMap icMap
  ?let  @instructionClassMap newIcMap
  ?let  @boolMap devicePortToRemove
  ?! @TfieldMap templateStruct {
  @string htmlLog = "<h2>Instruction Classes before reduction</h2>"
  for (@lstring name * @instructionClass ic) in  icMap do
    htmlLog += "<a name="+[name string]+"><h3>Instruction class: "+[name string]+"</h3></a>\n"
    for (@lstring pipe @devicePortAccessList devicePortAccessList) in  ic do
      htmlLog += "<p><strong>"+[pipe string]+"</strong>:"
      for (@string device @string port @uint nbCall) in  devicePortAccessList do
        htmlLog += device+"."+port+"("+[nbCall string]+")"
      between
        htmlLog += " -- "
      end
      htmlLog += "</p>\n"
    end
  end
  htmlLog += "<h2>Device/Port that can be removed</h2>"
  htmlLog += "<p>Some Device/port can be removed because they never cause any structural hazard inside the pipeline.</p>"
  for (@lstring key) in  devicePortToRemove do
    htmlLog += "<p>"+[key string]+"</p>\n"
  end
  htmlLog += "<h2>Instruction Classes after reduction</h2>"
  htmlLog += "<p>Id 0 is reserved for stalls (no instruction).</p>"
  for (@lstring name * @instructionClass ic) in  newIcMap do
    htmlLog += "<a name="+[name string]+"><h3>Instruction class: "+[name string]+"</h3></a>\n"
    for (@lstring pipe @devicePortAccessList devicePortAccessList) in  ic do
      htmlLog += "<p>"+[pipe string]+":"
      for (@string device @string port @uint nbCall) in  devicePortAccessList do
        htmlLog += device+"."+port+"("+[nbCall string]+")</p>\n"
      end
    end
  end
  
  addStringValue ( !?templateStruct !lstringWith(!"HTML_INSTRUCTION_CLASSES") !htmlLog)  
}

proc updateInstructionClasses
  ?let  @instructionClassMap icMap
  !  @instructionClassMap newIcMap
  ?! @stringMap instToInstructionClassMap #inst Name is the Key. value is the inst class name.
  ?let  @boolMap devicePortToRemove {
  newIcMap = @instructionClassMap. emptyMap
  var pastToNewInstructionClass =@stringMap.emptyMap{} #Key is old ic, data is new ic.
  @uint id = 1 #id = 0 is reserved for stalls.
  for (@lstring icName * @instructionClass ic) in  icMap do
    var newIc =@instructionClass.emptyMap{}
    for (@lstring pipeName @devicePortAccessList devicePortAccessList) in  ic do
      #update @devicePortAccessList for the instruction class.
      var newDevicePortAccessList =@devicePortAccessList.emptySortedList{}
      for (@string device @string port @uint nbCall) in  devicePortAccessList do
        #is this device/port removable.
        @string key = device+"."+port
        if not [devicePortToRemove hasKey !key] then #not removable.
          newDevicePortAccessList += !device !port !nbCall
        end
      end
      [!?newIc insertKey !pipeName !newDevicePortAccessList]
    end  
    #then look if there is already an instruction class.
    @bool icFound = false
    for (@lstring name * @instructionClass ic) in  newIcMap while not icFound do
      icFound = compareInstructionClasses(!ic !newIc) #same
      if icFound then
        [!?pastToNewInstructionClass insertKey !icName ![name string]]
      end
    end
    if not icFound then
      @lstring newIcName = @lstring. new { !"reducedInstClass_"+[id string] !@location.here}
      [!?newIcMap insertKey !newIcName !id !newIc]
      [!?pastToNewInstructionClass insertKey !icName ![newIcName string]]
      id = id + 1
    end
  end
  #update map that make the link between instruction name and instruction class.
  var newInstToInstructionClassMap =@stringMap.emptyMap{}
  for (@lstring key @string oldIcName) in  instToInstructionClassMap do
    @string newIcName
    [pastToNewInstructionClass searchKey !@lstring. new { !oldIcName !@location.here} ?newIcName]
    [!?newInstToInstructionClassMap insertKey !key !newIcName]
  end
  instToInstructionClassMap = newInstToInstructionClassMap
  if [option .verbose_output value] then
    message "After reduction, there are "+[newIcMap count]+" instruction classes\n"
  end
  #debug.
#  foreach pastToNewInstructionClass (@lstring old @string new) do
#    message "\tinstruction class ".[old string]." -> ".new."\n";
#  end foreach;
#  foreach instToInstructionClassMap (@lstring key @string newIcName) do
#    message "\t".[key string]." -> ".newIcName."\n";
#  end foreach;
}

#to reduce instruction Classes, we iterate on each device/port (for each pipeline)
#if port is either shared or released in another port -> keep it.
#if the device/port is used only one time => remove it.
#if it is used many times, calculate the max simultaneous accesses that are possible.
#It informs if the port may be removed or not.
proc reduceInstructionClasses
  ?let  @architectureMap architectureMap
  ?let  @pipelineMap pipelineMap
  ?! @instructionClassMap icMap
  ?! @stringMap instToInstructionClassMap #inst Name is the Key. value is the inst class name.
  ?! @TfieldMap templateStruct
  !  @boolMap devicePortToRemove {
  if [option .verbose_output value] then
    message "reduce instruction classes\n"
  end
  #first get the "removable list": that contains device/port that can be removed:
  # * not shared
  # * used either 1 time or more, but the maximum access is not achieved.
  # * without the 'release' attribute in any pipeline stage.
  devicePortToRemove = @boolMap. emptyMap #device.port
  for (@lstring archName @deviceMap deviceMap *) in  architectureMap do
    for (@lstring deviceName * @portMap portMap * *) in  deviceMap do
      for (@lstring portName @bool isShared @functionAllowedToAPort functionAllowedToAPort) in  portMap do
        if not isShared then
          @uint nbUsage
          @bool reductionPossible
          nbUsageofDevicePortInPipeline ( !archName !deviceName !portName !pipelineMap ?reductionPossible ?nbUsage)
          if reductionPossible then
            #message "\t".[deviceName string].".".[portName string]." usage: ".[nbUsage string]."\n";
            if nbUsage > 1 then
              #more than 1 access to the port. Get the max number of // access to port:
              @uint maxParallelAccess
              cast functionAllowedToAPort
              case == @isWithNumber isWithNumber :
                maxParallelAccess = [[isWithNumber numberOfPermission] uint]
              else
                maxParallelAccess = 1
              end
              #get the max accesses from 1 inst.
              @uint maxFromInst = maxAccessesToAPortFromInstruction(!icMap !deviceName !portName)
              #worst case, is with this instruction class at each pipeline stage that accesses the port:
              if maxFromInst*nbUsage > maxParallelAccess then
                reductionPossible = false
              end
            end
          #else
          #  message "\t".[deviceName string].".".[portName string]." without reduction.\n";
          end
          if reductionPossible then
            @string key = [deviceName string]+"."+[portName string]
            [!?devicePortToRemove insertKey !@lstring. new { !key !@location.here}]
            if [option .verbose_output value] then
              message "\t"+key+" can be removed\n"
            end
          end
        end
      end
    end
  end
  #then we rebuild the instruction class list without uneeded device/ports.
  @instructionClassMap newIcMap
  updateInstructionClasses ( !icMap ?newIcMap !?instToInstructionClassMap !devicePortToRemove)
  logInstructionClasses ( !icMap !newIcMap !devicePortToRemove !?templateStruct)
  icMap = newIcMap #replace instruction class Map
}

# vim:ft=galgas:ts=2:sw=2:tw=0
