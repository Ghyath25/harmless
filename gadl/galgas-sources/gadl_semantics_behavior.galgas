
  

proc instructionBehaviorPart
  ?let  @ASTbehaviorMap ASTbehaviorMap
  ?let  @instructionImplementationMap impMap
  ?let  @string modelName
  ?let  @varIdfStruct idfStruct
  ?! @TfieldMap templateStruct  
  !  @decodedBehaviorMap decodedBehaviorMap {
  @varIdfStruct idfStructCopy = idfStruct
  #for code generation
  #we have a pointer to the core using "_core"
  idfStructCopy.idfPrefixCore = "_core->"
  @decodedBehaviorList decodedBehaviorList = getDecodedBehaviorList(!ASTbehaviorMap !idfStructCopy)
  decodedBehaviorMap = [decodedBehaviorList getMap !modelName !impMap]
  [!?decodedBehaviorMap checkInstructionWithFormatPart !impMap]
  updateTemplateForBehavior ( !decodedBehaviorMap !?templateStruct)
  if @application.verboseOutput then  
    message "There are "+[decodedBehaviorMap count]+" behavior(s) "+
            "instructions (with a corresponding format)\n"
  end
  #test.
  #[decodedBehaviorList showBehaviorPath];
}

#a root behavior is a behavior that is never called by another one.
#OK. Tested.
func detectRootBehaviors
  ?let   @ASTbehaviorMap ASTbehaviorMap
  ->  @ASTbehaviorMap rootASTbehaviorMap {
  #a root behavior is a behavior that is never called by another one.
  rootASTbehaviorMap = ASTbehaviorMap
  for (* * @ASTBehBody body) in  ASTbehaviorMap do
    @ASTbehaviorChunkList chunkList = [body chunkList]
    for (@ASTbehaviorChunk chunk) in  chunkList do
      if (chunk is == @ASTbehChunkCall) then
        @ASTbehChunkCall chunkCall = ( chunk as @ASTbehChunkCall)
        @lstring behaviorCallName = [chunkCall behaviorCallName]
        #ok. This behavior call another behavior:behaviorCallName.
        #Consequently, behaviorCallName is not a root. 
        #Remove it from rootBehaviorMap (if it has not been removed before.)
        if [rootASTbehaviorMap hasKey ![behaviorCallName string]] then
          [!?rootASTbehaviorMap removeKey !behaviorCallName ?* ?*]
        end
      end
    end
  end
}
###############################################################################
# generation of the instruction related information,
# based on the path of each behavior.
# it uses a list 'decodedBehaviorList' during build
# but, it is converted to a map after.
###############################################################################

getter @lstringlist string
  -> @string str {
  str = ""
  for(@lstring lkey) in  self do str += [lkey string]
  between str += "_"
  end
}


setter @decodedBehaviorList addASTInstForAll
  ?let  @ASTInstructionList ASTinstListToAdd
  ?! @varIdfStruct idfStruct {
  #get the instruction related to the ASTInstruction
  var symbolMap =@symbolValueMap.emptyMap{}
  @instructionList newInstlist
  getInst ( !ASTinstListToAdd !@expressionContext. behavior !symbolMap !?idfStruct ?newInstlist)
  #then add to each path;
  [!?self addInstForAll !newInstlist]
}

setter @decodedBehaviorList addInstForAll
  ?let  @instructionList instListToAdd {
  #add to each path
  var result =@decodedBehaviorList.emptyList{}
  for () in  self do
     result += !refSet !path !instList+instListToAdd
  end
  #update structure.
  self = result
}

setter @decodedBehaviorList addRefForAll
  ?let  @stringset refsetToAdd
  ?let  @lstringlist currentSuffix {
  @string suffix = [currentSuffix string]
  var result =@decodedBehaviorList.emptyList{}
  for () in  self do
    @stringset set = refSet
    for () in  refsetToAdd do
      @string str = key + suffix
      set += !str
    end
    result += !set !path !instList
  end
  self = result
}

setter @decodedBehaviorList addDebugPath
  ?let  @lstring pathToAdd {
  var result =@decodedBehaviorList.emptyList{}
  for () in  self do
    @lstringlist ls = path
    ls += !pathToAdd
    result += !refSet !ls !instList
  end
  self = result
}

#init with one empty path.
setter @decodedBehaviorList addEmpty {
  self += !@stringset.default !@lstringlist.default !@instructionList.default
}

#concatenation.
setter @decodedBehaviorList cat
  ?let  @decodedBehaviorList other {
  for () in  other do
    self += !refSet !path !instList
  end
}


func giveSequence
  ?let  @lstringlist pathlist
  -> @string seq {
  seq = ""
  for () in  pathlist do
    seq+=[mValue string]
    if not [[mValue string] containsCharacter !'#'] then
      seq += "(l."+[[mValue location] line]+")"
    end
  between seq+=" -> "
  end
}

#debug
method @decodedBehaviorList showBehaviorPath {
  message "paths: ("+[self length]+")\n"
  for () in  self do
    for () in  refSet
    before message " ("
    do message "#"+key
    between message "-"
    after message ")"
    end

    message "\n\tfields:"
    @varBaseTypeMap fieldMap = [instList getDeclarations !@varClass. field]
    for () in  fieldMap do
      message [lkey string]
    between message " - "
    end

    message "\n\tlocals:"
    @varBaseTypeMap localsMap = [instList getDeclarations !@varClass. localVar]
    for () in  localsMap do
      message [lkey string]
    between message " - "
    end

    message "\npath:\n"
    message giveSequence(!path)

    message "\n\tcode:\n"
    @string code = generateCode(!instList !1 !@codeCtx. C)
    message code+"\n"

    message "\n"
  end
}

proc handleBehBody
  ?let  @lstring behaviorName
  ?let  @ASTBehBody body
  ?let  @ASTbehaviorMap ASTbehaviorMap
  ?! @decodedBehaviorList current
  ?let  @lstringlist currentSuffix
  ?let  @varIdfStruct idfStructOrig #original idfStruct (without any locals)
  ?let  @varIdfStruct idfStruct {
  @varIdfStruct idfStructCopy = idfStruct
  #prepare idfStruct
  idfStructCopy.idfSuffixName = [currentSuffix string]
  idfStructCopy.idfprefix = [behaviorName string]
  #add declaration fields
  [!?current addASTInstForAll ![body fieldList] !?idfStructCopy]
  #add declaration locals
  [!?current addASTInstForAll ![body varDeclarationList] !?idfStructCopy]
  #add declaration refs
  for () in  [body referenceSet] do
    [!?current addDebugPath !@lstring. new { !"#"+key+currentSuffix !@location.here}]
  end
  [!?current addRefForAll ![body referenceSet] !currentSuffix]

  for () in  [body chunkList] do
    cast chunk
    case == @ASTbehChunkImplementation chImp:
      [!?current addASTInstForAll ![chImp instList] !?idfStructCopy]
    case == @ASTbehChunkCall           chCall:
      #classical call -> search the called bahavior
      @parameterDefList parameterDefList
      @ASTBehBody bodyCall
      [ASTbehaviorMap searchKey ![chCall behaviorCallName] ?parameterDefList ?bodyCall]
      #update varIdfStruct
      @bool gotARef = [[chCall postRefName] string] != ""
      @lstringlist copySuffix = currentSuffix
      if gotARef then copySuffix += ![chCall postRefName] end
      #prepare the next idfStruct -> without any local var defined.
      @varIdfStruct nextIdfStruct = idfStructOrig
      nextIdfStruct.idfSuffixName = [copySuffix string]
      nextIdfStruct.idfprefix = [[chCall behaviorCallName] string]
      #check arguments and get related instructions to the function call.
      #a refaire: c'est l'ancien idfStruct pour l'exp, et le nouveau (prefix) pour l'idf.
      @instructionList instListToAdd
      @location defLoc = [ASTbehaviorMap locationForKey ![[chCall behaviorCallName] string]]
      [parameterDefList getInlinedInsts ![chCall idfExpList] !@expressionContext. behavior 
                                        ![[chCall behaviorCallName] location] !defLoc
                                        !idfStructCopy !?nextIdfStruct ?instListToAdd]
      [!?current addInstForAll !instListToAdd]      
      #call that behavior
      [!?current addDebugPath ![chCall behaviorCallName]]
      handleBehBody ( ![chCall behaviorCallName] !bodyCall !ASTbehaviorMap !?current !copySuffix !idfStructOrig !nextIdfStruct)
      #no pop of current suffix, because we work with a copy.
    case == @ASTbehChunkSelect         chSelect:
      var merge =@decodedBehaviorList.emptyList{}
      for(@ASTBehBody selectBody) in  [chSelect bodyList] do
        @decodedBehaviorList copy = current
        [!?copy addDebugPath !@lstring. new { !"select" ![selectBody loc]}]      
        handleBehBody ( !behaviorName !selectBody !ASTbehaviorMap !?copy !currentSuffix !idfStructOrig !idfStructCopy)
        [!?merge cat !copy]
      end
      current = merge
    else
      error @location.here : "internal error: handleBehBody with unknown behavior chunk"
    end
  end
}

func getDecodedBehaviorList
  ?let  @ASTbehaviorMap ASTbehaviorMap
  ?let  @varIdfStruct idfStruct
  -> @decodedBehaviorList decodedBehaviorList {
  #Construct the list of chunks for each instruction.
  decodedBehaviorList = @decodedBehaviorList. emptyList
  if @application.verboseOutput then
    message "contructing behavior tree..."
  end
  @ASTbehaviorMap rootASTbehaviorMap = detectRootBehaviors(!ASTbehaviorMap)
  for () in  rootASTbehaviorMap do
    if @application.verboseOutput then
      message "\n\tfrom root "+[lkey string]+"..."
    end  
    var current =@decodedBehaviorList.emptyList{}
    [!?current addEmpty]
    [!?current addDebugPath !lkey]
    handleBehBody ( !lkey !body !ASTbehaviorMap !?current !@lstringlist. emptyList !idfStruct !idfStruct)
    [!?decodedBehaviorList cat !current]
  end
  #debug
  #[decodedBehaviorList showBehaviorPath];
}

###############################################################################
# end of path extraction :
# * we have a decodedBehaviorList for each path.
# -> now we have to get a map, where the key is the instruction signature.
# -> and to restrict the map to instructions that have a format part 
#    associated.
###############################################################################

# extract the map from the list of decoded behaviors.
# remove paths which do not have any format associated
# WARNING: no check with format part done.
#          -> should call checkInstructionWithFormatPart after
getter @decodedBehaviorList getMap
  ?let  @string modelName
  ?let  @instructionImplementationMap impMap
  -> @decodedBehaviorMap decodedBehaviorMap {
  decodedBehaviorMap = @decodedBehaviorMap. emptyMap
  for () in  self do
    @lstring instName = @lstring. new { !getInstructionName(!refSet !modelName) !@location.here}
    if [impMap hasKey ![instName string]] then
      #Ok. There is a corresponding format. Check for redundancy.
      if [decodedBehaviorMap hasKey ![instName string]] then
        error @location.here: "2 behaviors paths may be used for the same instructions:"
        message "\n * "+giveSequence(!path)
        @lstringlist otherPath
        [decodedBehaviorMap searchKey !instName ?* ?* ?otherPath]
        message "\n * "+giveSequence(!otherPath)
      else
        [!?decodedBehaviorMap insertKey !instName !refSet !instList !path]
      end
    end
  end
}

#this modifier checks that the behavior have a corresponding 
#format:
# * if there is no format, no code will be generated
#   for that behavior (silently ignored)
# * if there is a matching format, it then checks that each field
#   is corectly used (size and sign), and same number.
# * NOTE: restrict map only to behavior with a valid format
setter @decodedBehaviorMap checkInstructionWithFormatPart
  ?let  @instructionImplementationMap impMap {
  var resultDecodedBehaviorMap =@decodedBehaviorMap.emptyMap{}
  for () in  self do
    if [impMap hasKey ![lkey string]] then
      #ok matching.
      #then checks that each field is correctly set (name and type).
      @varBaseTypeMap varBaseTypeMap
      [impMap searchKey !lkey ?* ?* ?* ?* ?* ?* ?varBaseTypeMap]
      
      #get fields:
      #TODO: get a @varBaseTypeMap from instList.
      #and add a reader for comparison.
      @varBaseTypeMap fieldMap = [instList getDeclarations !@varClass. field]
      if [fieldMap count] != [varBaseTypeMap count] then
        error @location.here: "The instruction "+lkey+" has "+[varBaseTypeMap count]+" binary fields"+
                    " in the format part, but has "+[fieldMap count]+" fields in the "+
                    "behavior path:"+giveSequence(!path)
      else
        #ok, same number of fields. Then check for sign/size.
        @bool ok = true
        for(@lstring fieldName @varBaseType type) in  fieldMap while ok do
          if not [varBaseTypeMap hasKey ![fieldName string]] then
            error fieldName: "the field "+fieldName+" is not declared in the format part for "+
                        "instruction "+lkey+".Behavior path:"+giveSequence(!path)
            ok = false
          else
            @varBaseType formatType
            [varBaseTypeMap searchKey !fieldName ?formatType]
            @varAbstractType behType = type
            if not [formatType checkEqual !behType] then
              ok = false
            end
          end
        end
        if ok then
          [!?resultDecodedBehaviorMap insertKey !lkey !refSet !instList !path]
        end
      end
    end
  end
  self = resultDecodedBehaviorMap
}

proc updateTemplateForBehavior
  ?let  @decodedBehaviorMap decodedBehaviorMap
  ?! @TfieldMap templateStruct {
  var instNameList =@stringlist.emptyList{}
  var instCodeTpl =@TfieldMapList.emptyList{}
  #for each instruction
  for () in  decodedBehaviorMap do
    var instCodeTplBody =@TfieldMap.emptyMap{}
    addLStringValue ( !?instCodeTplBody !"name" !lkey)
    #get the path (debug)
    #@string instBody := "\t//".[path string]."\n";
    #We get the instruction implementation body
    @string instBody = generateCode(!instList !1 !@codeCtx. C)
    addStringValue ( !?instCodeTplBody !lstringWith(!"code") !instBody)
    instCodeTpl += !instCodeTplBody
  end
  addListValue ( !?templateStruct !lstringWith(!"instCodeList") !instCodeTpl)
}


# vim:ft=galgas:ts=2:sw=2:tw=0
