syntax gadl_components_parser (gadl_lexique) { #varClass.

#from gadl_implementation_parser
rule <typeDeclaration> ! @varAbstractType type
rule <implementationOrEmpty> ?! @ASTInstructionList instList
rule <typeDefinition> ?! @ASTInstructionList instList
rule <declaration> ?! @ASTInstructionList instList
#from gadl_expression_parser
rule <bitField> !@ASTfieldList fieldList

#from gadl_function_parser
#not the outType and functionName in the rule due to grammar LL1 restrictions.
rule <functionDef> 
  ?let  @varAbstractType outType
  ?let  @lstring functionName
  ?! @ASTFunctionMap ASTFunctionMap

#defined in gadl_register_parser.gSyntax
rule <registerBitAccessDef>
  ?let  @lstring regName
  ?let  @varAbstractType type
  ?! @ASTInstructionList regDefList

#registers as defined in components.
rule <registerDef>
  ?! @ASTInstructionList regDefList {
  @varClass varClass
  select
    $register$
    varClass = @varClass. GPR
  or
    $program$ $counter$
    varClass = @varClass. programCounter
  end
  <typeDeclaration> ?var @varAbstractType type
  $idf$ ?var @lstring idf
  regDefList += !@ASTInstDeclaration. new { !@location.here !varClass !type !idf}
  select
  or
    <registerBitAccessDef> !idf !type !?regDefList
  end
}

rule <component> 
  ?! @ASTComponentMap ASTComponentMap
  ?! @uint currentComponentId
  ?! @lstringMap componentMapOrder {
  @lstring compName
  $component$ 
  $idf$ ?compName 
  ${$
    var ASTFunctionMap =@ASTFunctionMap.emptyMap{}
    #should contains typedef and local var allocation
    var regDefList =@ASTInstructionList.emptyList{}
    repeat
      select
      #  #structured types definitions. -> TODO moved to peripheral
      #  <typeDefinition> !?regDefList;
      #or 
        <registerDef> !?regDefList
      or
        @varAbstractType type
        <typeDeclaration> ?type
        @lstring idf
        $idf$ ?idf
        #select #TODO: to remove: no local var in component.
        #  #simple local var declaration
        #  regDefList += ![@ASTInstDeclaration new !here ![@varClass localVar] !type !idf];
        #or
          #function def.
          <functionDef> !type !idf !?ASTFunctionMap
        #end select;
      end
    while
    end
    [!?ASTComponentMap insertKey !compName !ASTFunctionMap !regDefList]
    [!?componentMapOrder insertKey !@lstring. new { !"comp_"+[currentComponentId string] !@location.here} !compName]
    currentComponentId = currentComponentId + 1
  $}$
}

}
# vim:ft=galgas:ts=2:sw=2:tw=0
