#---------------------------------------------------------------------------*
#                                                                           *
#  GOIL Template parser                                                     *
#                                                                           *
#  Copyright (C) 2009, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax template_parser (template_scanner) {

rule <goil_template_start_symbol>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?@TfieldMap inTemplateVariableMap
  ?!@string ioResultingString

rule <template_instruction>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string ioResultingString

rule <sorting_order>
  !@lsint order

#nonterminal <struct_path>
#  ?!@lstringlist path
##;

rule <variable>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?let @TfieldMap inVariableMap
  !@TvarPath path

rule <variable_or_here>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?let @TfieldMap inTemplateVariableMap
  !@location outWhere

rule <expression>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?let @TfieldMap inTemplateVariableMap
  !@Tvalue outExpression
  !@Ttype outResultType

rule  <template_instruction_list>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap inTemplateVariableMap
  ?!@string ioResultingString

#---------------------------------------------------------------------------*

rule <template_instruction>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string ioResultingString {
  $!$
  @Tvalue expression
  @Ttype resultType
  <expression>
    !inPrefix
    !inPath
    !inTemplateDirectory
    !ioTemplateVariableMap
    ?expression
    ?resultType
  switch resultType 
  case stringType, enumType:
    ioResultingString += [expression mStringValue]
  case unsignedType:
    ioResultingString += [[expression mUnsigned64Value] string]
  case boolType:
    if [expression mUnsigned64Value] == 0L then
      ioResultingString += "false"
    else
      ioResultingString += "true"
    end
  case listType :
    error @location.here : "a list expression cannot be emitted"
  case mapType :
    error @location.here : "a map expression cannot be emitted"
  case structType :
    error @location.here : "a struct expression cannot be emitted"
  case unconstructedType:
    error @location.here: "internal error, unconstructed type found"
  end
}

#---------------------------------------------------------------------------*
rule <template_instruction>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string unused ioResultingString {
  @bool fileNameOk = true
  $write$ $to$
  @Tvalue expression
  @Ttype expressionType
  @TfieldMap templateVariableMap = ioTemplateVariableMap
  <expression>
    !inPrefix
    !inPath
    !inTemplateDirectory
    !ioTemplateVariableMap
    ?expression
    ?expressionType
  if [templateVariableMap hasKeyAtLevel !"FILENAME" !0] then
    [!?templateVariableMap removeKey !lstringWith(!"FILENAME") ?* ?*]
  end
  if [templateVariableMap hasKeyAtLevel !"FILEPATH" !0] then
    [!?templateVariableMap removeKey !lstringWith(!"FILEPATH") ?* ?*]
  end
  @Tvalue fileName = valueWithString(![[expression mStringValue] lastPathComponent])
  @Tvalue nativeFilePath = valueWithString(![[expression mStringValue] nativePathWithUnixPath])
  [!?templateVariableMap insertKey !lstringWith(!"FILENAME") !expressionType !fileName]
  [!?templateVariableMap insertKey !lstringWith(!"FILEPATH") !expressionType !nativeFilePath]
  @location fileNameLocation = @location.here
  if expressionType != @Ttype. stringType then
    error @location.here: "a file name should be of type string"
    fileNameOk = false    
  end
  $:$
  @string writeBlockResult = ""
  <template_instruction_list>
    !inPrefix
    !inPath
    !inTemplateDirectory
    !?templateVariableMap
    !?writeBlockResult
  if fileNameOk & @uint. errorCount == 0 then
    writeOnDiskIfUpdated ( ![expression mStringValue] !writeBlockResult)
#    [writeBlockResult makeDirectoryAndWriteToFile ![expression mStringValue]];
  end
  $end$ $write$
}

#---------------------------------------------------------------------------*

rule <template_instruction>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string ioResultingString {
  @string nextPrefix = inPrefix
  $template$
  select
    $if$ $exists$
    $identifier$ ?var  @lstring templateName
    @bool found
    select
      $in$ $string$ ?var @lstring prefix
      nextPrefix = fullPrefix(!ioTemplateVariableMap !prefix)
    or
    end
    templateInvocation (
      !templateName
      !nextPrefix
      !inPath
      !inTemplateDirectory
      !false
      !ioTemplateVariableMap
      !?ioResultingString
      ?found
    )
    select
      $or$
      #log found;
      parse with not found:
        var templateVariableMap =@TfieldMap.mapWithMapToOverride{ !ioTemplateVariableMap}
        <template_instruction_list>
          !nextPrefix
          !inPath
          !inTemplateDirectory
          !?templateVariableMap
          !?ioResultingString
        ioTemplateVariableMap = [templateVariableMap overriddenMap]
      else
         parse<template_instruction_list>
      end
      $end$ $template$
    or
    end
  or
    $identifier$ ?var  @lstring templateName
    select
      $in$ $string$ ?var @lstring prefix
      nextPrefix = fullPrefix(!ioTemplateVariableMap !prefix)
    or
    end
    templateInvocation (
      !templateName
      !nextPrefix
      !inPath
      !inTemplateDirectory
      !true
      !ioTemplateVariableMap
      !?ioResultingString
      ?*
    )
  end
}

#---------------------------------------------------------------------------*

rule <template_instruction>
  ?let @string unused inPrefix
  ?let @string unused inPath
  ?let @string unused inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string ioResultingString {
  $?$
  $identifier$ ?var  @lstring columnConstantName
  @string value = ""
  @bool searchEndOfLine = true
  @uint idx = [ioResultingString length]
  loop( [ioResultingString length])
  while (idx > 0) & searchEndOfLine
  do
    searchEndOfLine = [ioResultingString characterAtIndex !idx - 1] != '\n'
    idx --
    if searchEndOfLine then
      value += " "
    end
  end
  [!?ioTemplateVariableMap insertKey
    !columnConstantName
    !@Ttype. stringType
    !valueWithString(!value)
  ]
}

#---------------------------------------------------------------------------*

#rule <template_instruction>
#  ?!@typeVariablesMap ioTemplateVariableMap
#  ??@EXsemanticContext inSemanticContext
#  ??@TfieldMap inComponentSemanticsEntitiesMap
#  ??@M_optionComponents inOptionsComponentsMapForUse
#  ?!@templateInstructionList ioResultingInstructionList
#:
#  $block$;
#  @Tvalue expression;
#  @Ttype resultType;
#  <expression>
#    !inComponentSemanticsEntitiesMap
#    !inSemanticContext
#    !inOptionsComponentsMapForUse
#    !?ioTemplateVariableMap
#    ?expression
#    ?resultType
#  ;
#  @typeGalgas_uint x := (cast resultType if >= @typeGalgas_uint else error here);
#  $:$;
##--- Instruction list
#  @templateInstructionList blockInstructionList [emptyList];
#  enterTemplateString !? blockInstructionList;
#  repeat
#  while
#    <template_instruction>
#      !?ioTemplateVariableMap
#      !inSemanticContext
#      !inComponentSemanticsEntitiesMap
#      !inOptionsComponentsMapForUse
#      !?blockInstructionList
#    ;
#    enterTemplateString !?blockInstructionList;
#  end repeat;
##---
#  $end$;
#  $block$;
#  ioResultingInstructionList += ![@templateBlockInstruction new
#   !expression
#   !here
#   !blockInstructionList
#  ];
#end rule;

#---------------------------------------------------------------------------*

rule <template_instruction>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string ioResultingString {
  $if$
  @bool currentCondition = false
  repeat
    parse
    with not currentCondition :
      @Tvalue expression
      @Ttype expressionType
      <expression>
        !inPrefix
        !inPath
        !inTemplateDirectory
        !ioTemplateVariableMap
        ?expression
        ?expressionType
      if expressionType != @Ttype. boolType then
        error @location.here:"the operand of the 'not' operator should be boolean"
      end
      currentCondition = [expression mUnsigned64Value] == 1L
      $then$
      parse
      with currentCondition :
        var templateVariableMap =@TfieldMap.mapWithMapToOverride{ !ioTemplateVariableMap}
        <template_instruction_list>
          !inPrefix
          !inPath
          !inTemplateDirectory
          !?templateVariableMap
          !?ioResultingString
        ioTemplateVariableMap = [templateVariableMap overriddenMap]
      else
         parse<template_instruction_list>
      end
    else
       parse<expression>
      $then$
       parse<template_instruction_list>
    end
  while
    $elsif$
  end
#--- else
  select
  or
    $else$
    parse
    with not currentCondition :
      var templateVariableMap =@TfieldMap.mapWithMapToOverride{ !ioTemplateVariableMap}
      <template_instruction_list>
        !inPrefix
        !inPath
        !inTemplateDirectory
        !?templateVariableMap
        !?ioResultingString
      ioTemplateVariableMap = [templateVariableMap overriddenMap]
    else
       parse<template_instruction_list>
    end
  end
#---
  $end$
  $if$
}

#---------------------------------------------------------------------------*

rule  <template_instruction_list>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string ioResultingString {
  ioResultingString += @string. retrieveAndResetTemplateString
  repeat
  while
    <template_instruction>
      !inPrefix
      !inPath
      !inTemplateDirectory
      !?ioTemplateVariableMap
      !?ioResultingString
    ioResultingString += @string. retrieveAndResetTemplateString
  end
}

#---------------------------------------------------------------------------*

rule  <goil_template_start_symbol>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?@TfieldMap inTemplateVariableMap
  ?!@string ioResultingString {
  <template_instruction_list>
    !inPrefix
    !inPath
    !inTemplateDirectory
    !?inTemplateVariableMap
    !?ioResultingString
}

#---------------------------------------------------------------------------*

rule <template_instruction>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string ioResultingString {
  $foreach$ $identifier$ ?var  @lstring variableName $in$
  @Tvalue enumeratedValue
  @Ttype expressionType
  <expression>
    !inPrefix
    !inPath
    !inTemplateDirectory
    !ioTemplateVariableMap
    ?enumeratedValue
    ?expressionType
    
  @uint listLength = 0
  @lstringlist keyList
  switch expressionType
  case listType:
    listLength = [[enumeratedValue mMapListValue] length]
    keyList = @lstringlist. emptyList
  case mapType:
    listLength = [[enumeratedValue mStructValue] count]
    keyList = [[enumeratedValue mStructValue] keyList]
  case boolType, enumType, unsignedType, stringType, structType, unconstructedType:
    error @location.here:"only a list or a map can be enumerated": keyList
  end

  @string foreachPrefix
  select
    foreachPrefix = ""
  or
    $prefixedby$
    $identifier$ ?var  @lstring prefixString
    foreachPrefix = [prefixString string]
  end

#--- before block
  select
  or
    $before$
    parse
    with listLength > 0 :
      <template_instruction_list>
        !inPrefix
        !inPath
        !inTemplateDirectory
        !?ioTemplateVariableMap
        !?ioResultingString
    else
       parse<template_instruction_list>
    end
  end
#--- Do block
  $do$
  @uint idx = 0
  parse loop listLength
  while idx < listLength do
    var templateVariableMap =@TfieldMap.mapWithMapToOverride{ !ioTemplateVariableMap}
    @Ttype itemType
    @Tvalue itemValue
    if expressionType == @Ttype. mapType then
      @lstring keyOfItem = [keyList mValueAtIndex !idx]
      [[enumeratedValue mStructValue] searchKey !keyOfItem ?itemType ?itemValue]
      addLStringValue ( !?templateVariableMap !"KEY" !keyOfItem)
    else
      let @TfieldMap fieldMap = [[enumeratedValue mMapListValue] mMapAtIndex !idx]
      itemType = @Ttype. structType
      itemValue = @Tvalue. new { !0L !"" !@TfieldMapList. emptyList !fieldMap}
    end
    @lstring varName = @lstring. new { !foreachPrefix + [variableName string] ![variableName location]}
    [!?templateVariableMap insertKey !varName !itemType !itemValue]

    addUnsignedValue ( !?templateVariableMap !@lstring. new { !foreachPrefix+"INDEX" !@location.here} ![idx uint64])

    <template_instruction_list>
      !inPrefix
      !inPath
      !inTemplateDirectory
      !?templateVariableMap
      !?ioResultingString
    idx ++
    select
    or
      $between$
      parse 
      with idx < listLength :
        <template_instruction_list>
          !inPrefix
          !inPath
          !inTemplateDirectory
          !?templateVariableMap
          !?ioResultingString
      else
         parse<template_instruction_list>
      end
    end
    ioTemplateVariableMap = [templateVariableMap overriddenMap]
  end
  @string s = @string. retrieveAndResetTemplateString # Value not used
#--- after block
  select
  or
    $after$
    parse
    with listLength > 0 :
      <template_instruction_list>
        !inPrefix
        !inPath
        !inTemplateDirectory
        !?ioTemplateVariableMap
        !?ioResultingString
    else
       parse<template_instruction_list>
    end
  end
#---
  $end$
  $foreach$
}

#---------------------------------------------------------------------------*

rule <template_instruction>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string ioResultingString {
  $for$ $identifier$ ?var  @lstring variableName
#  if [ioTemplateVariableMap hasKey ![variableName string]] then
#    [!?ioTemplateVariableMap removeKey !variableName ?* ?*];
#  end if;
  $in$
  var enumerationList =@TexpressionList.emptyList{}
  repeat
    @Tvalue enumeratedValue
    @Ttype expressionType
    <expression>
      !inPrefix
      !inPath
      !inTemplateDirectory
      !ioTemplateVariableMap
      ?enumeratedValue
      ?expressionType
    if expressionType != @Ttype. boolType &
       expressionType != @Ttype. unsignedType &
       expressionType != @Ttype. stringType then
       error @location.here:"only a bool, integer or string can be enumerated"
    end
    enumerationList += !enumeratedValue !expressionType
  while
    $,$
  end
#--- Do block
  $do$
  @uint idx = 0
  parse loop [enumerationList length]
  while [enumerationList length] > 0 do
    var templateVariableMap =@TfieldMap.mapWithMapToOverride{ !ioTemplateVariableMap}
    @Tvalue value
    @Ttype type
    [!?enumerationList popFirst ?value ?type]
    [!?templateVariableMap insertKey
      !variableName
      !type
      !value]
      
#    if [templateVariableMap hasKey !"INDEX"] then
#      [!?templateVariableMap removeKey ![@lstring new !"INDEX" !here] ?* ?*];
#    end if;
    addUnsignedValue ( !?templateVariableMap !@lstring. new { !"INDEX" !@location.here} ![idx uint64])
      
    <template_instruction_list>
      !inPrefix
      !inPath
      !inTemplateDirectory
      !?templateVariableMap
      !?ioResultingString
    idx ++
    select
    or
      $between$
      parse 
      with [enumerationList length] > 0 :
        <template_instruction_list>
          !inPrefix
          !inPath
          !inTemplateDirectory
          !?templateVariableMap
          !?ioResultingString
      else
         parse<template_instruction_list>
      end
    end
    ioTemplateVariableMap = [templateVariableMap overriddenMap]
  end
  @string s = @string. retrieveAndResetTemplateString # Value not used
#---
  $end$
  $for$
}

#---------------------------------------------------------------------------*

rule <template_instruction>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string ioResultingString {
  $loop$ $identifier$ ?var  @lstring variableName
  $from$
  @Tvalue startValue
  @Ttype startType
  <expression>
    !inPrefix
    !inPath
    !inTemplateDirectory
    !ioTemplateVariableMap
    ?startValue
    ?startType
  if startType != @Ttype. unsignedType then
    error @location.here:"loop start value should be an integer"
  end
  $to$
  @Tvalue endValue
  @Ttype endType
  <expression>
    !inPrefix
    !inPath
    !inTemplateDirectory
    !ioTemplateVariableMap
    ?endValue
    ?endType
  if endType != @Ttype. unsignedType then
    error @location.here:"loop end value should be an integer"
  end
#--- Before block
  select
  or
    $before$
    parse
    with [endValue mUnsigned64Value] >= [startValue mUnsigned64Value] :
      <template_instruction_list>
        !inPrefix
        !inPath
        !inTemplateDirectory
        !?ioTemplateVariableMap
        !?ioResultingString
    else
       parse<template_instruction_list>
    end
  end
#--- Do block
  $do$
  @uint start = [[startValue mUnsigned64Value] uint]
  @uint stop = [[endValue mUnsigned64Value] uint]
  @uint idx = start
  parse loop stop - start + 1
  while idx <= stop do
    var templateVariableMap =@TfieldMap.mapWithMapToOverride{ !ioTemplateVariableMap}
#    if [templateVariableMap hasKey ![variableName string]] then
#      [!?templateVariableMap removeKey !variableName ?* ?*];
#    end if;
    addUnsignedValue ( !?templateVariableMap !variableName ![idx uint64])

    <template_instruction_list>
      !inPrefix
      !inPath
      !inTemplateDirectory
      !?templateVariableMap
      !?ioResultingString
    idx ++
    select
    or
      $between$
      parse 
      with idx <= stop :
        <template_instruction_list>
          !inPrefix
          !inPath
          !inTemplateDirectory
          !?templateVariableMap
          !?ioResultingString
      else
         parse<template_instruction_list>
      end
    end
    ioTemplateVariableMap = [templateVariableMap overriddenMap]
  end
  @string s = @string. retrieveAndResetTemplateString # Value not used
#--- after block
  select
  or
    $after$
    parse
    with stop >= start :
      <template_instruction_list>
        !inPrefix
        !inPath
        !inTemplateDirectory
        !?ioTemplateVariableMap
        !?ioResultingString
    else
       parse<template_instruction_list>
    end
  end
#---
  $end$
  $loop$
}

#rule <struct_path>
#  ?!@lstringlist path
#:
#  select
#    $::$; $identifier$ ?@lstring pathElement;
#    path += !pathElement;
#    <struct_path> !?path;
#  or end select;
#end rule;

rule <template_instruction>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string unused ioResultingString {
  @TvarPath path
  $let$ <variable> !inPrefix !inPath !inTemplateDirectory !ioTemplateVariableMap ?path
  @Tvalue enumeratedValue
  @Ttype expressionType
  select
    $:=$
    <expression>
      !inPrefix
      !inPath
      !inTemplateDirectory
      !ioTemplateVariableMap
      ?enumeratedValue
      ?expressionType
#    if [ioTemplateVariableMap hasKey ![variableName string]] then
#      [!?ioTemplateVariableMap setMTypeForKey !expressionType ![variableName string]];
#      [!?ioTemplateVariableMap setMValueForKey !enumeratedValue ![variableName string]];
#    else
#      [!?ioTemplateVariableMap insertKey !variableName !expressionType !enumeratedValue];
#    end if;
    setVariableInPath ( !path !?ioTemplateVariableMap !expressionType !enumeratedValue)
  or
    $+=$
    <expression>
      !inPrefix
      !inPath
      !inTemplateDirectory
      !ioTemplateVariableMap
      ?enumeratedValue
      ?expressionType
    if expressionType != @Ttype. stringType then
      if expressionType != @Ttype. structType then
        error @location.here: "string or struct type expected"
      else
        # struct type
        @Tvalue variableValue
        @Ttype variableType
        @bool found
        searchFieldIfExists ( !path !ioTemplateVariableMap ?variableType ?variableValue ?found)
        variableValue.mMapListValue += ![enumeratedValue mStructValue]
        if not found then 
          variableType = @Ttype. listType
        end
        setVariableInPath ( !path !?ioTemplateVariableMap !variableType !variableValue)
      end
    else
      @Tvalue variableValue
      @Ttype variableType
      @bool found
      searchFieldIfExists ( !path !ioTemplateVariableMap ?variableType ?variableValue ?found)
      var fieldMap =@TfieldMap.emptyMap{}
      [!?fieldMap insertKey !@lstring. new { !"NAME" !@location.here} !expressionType !enumeratedValue]
      variableValue.mMapListValue += !fieldMap
      if not found then
        variableType = @Ttype. listType
      end
      setVariableInPath ( !path !?ioTemplateVariableMap !variableType !variableValue)
    end
  end
}

#---------------------------------------------------------------------------*

rule <variable_or_here>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?let @TfieldMap inTemplateVariableMap
  !@location outWhere {
  select
    $here$
    outWhere = @location.here
  or
    @TvarPath path
    <variable> !inPrefix !inPath !inTemplateDirectory !inTemplateVariableMap ?path
    @Tvalue variableValue
    @Ttype variableType
    searchField ( !path !inTemplateVariableMap ?variableType ?variableValue ?outWhere)
  end
}

#---------------------------------------------------------------------------*

rule <template_instruction>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string unused ioResultingString {
  $error$
  @location where
  <variable_or_here> !inPrefix !inPath !inTemplateDirectory !ioTemplateVariableMap ?where
  @Tvalue enumeratedValue
  @Ttype expressionType
  $:$
  <expression>
    !inPrefix
    !inPath
    !inTemplateDirectory
    !ioTemplateVariableMap
    ?enumeratedValue
    ?expressionType
  if expressionType != @Ttype. stringType then
    error @location.here: "error message should by a string expression"
  else
    error where: [enumeratedValue mStringValue]
  end
}

#---------------------------------------------------------------------------*

rule <template_instruction>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string unused ioResultingString {
  $warning$
  @location where
  <variable_or_here>  !inPrefix !inPath !inTemplateDirectory !ioTemplateVariableMap ?where
  @Tvalue enumeratedValue
  @Ttype expressionType
  $:$
  <expression>
    !inPrefix
    !inPath
    !inTemplateDirectory
    !ioTemplateVariableMap
    ?enumeratedValue
    ?expressionType
  if expressionType != @Ttype. stringType then
    error @location.here: "error message should by a string expression"
  else
    warning where: [enumeratedValue mStringValue]
  end
}

rule <template_instruction>
  ?let @string unused inPrefix
  ?let @string unused inPath
  ?let @string unused inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string unused ioResultingString {
  $display$ $identifier$ ?var @lstring variableName
  @Ttype variableType
  @Tvalue variableValue
  [ioTemplateVariableMap searchKey !variableName ?variableType ?variableValue]
  message [variableName string]+" ("+[[variableName location] locationString]+") : "+[variableType messageGoilTemplateType]+"\n"
  printVariable ( !0 !variableType !variableValue)
}

rule <sorting_order>
  !@lsint order {
  select
    $>$ 
    order = @lsint. new { !-1s !@location.here}
  or
    $<$
    order = @lsint. new { !1s !@location.here}
  end
}

rule <template_instruction>
  ?let @string unused inPrefix
  ?let @string unused inPath
  ?let @string unused inTemplateDirectory
  ?!@TfieldMap ioTemplateVariableMap
  ?!@string unused ioResultingString {
  $sort$ $identifier$ ?var @lstring variableName
  @Ttype variableType
  @Tvalue variableValue
  [ioTemplateVariableMap searchKey !variableName ?variableType ?variableValue]
  $by$
  var keys =@sortingKeyList.emptyList{}
  @lsint firstOrder
  $identifier$ ?var @lstring firstKey <sorting_order> ?firstOrder
  keys += !firstKey !firstOrder
  repeat while
    @lsint nextOrder
    $,$ $identifier$ ?var @lstring nextKey <sorting_order> ?nextOrder
    keys += !nextKey !nextOrder
  end

  if variableType == @Ttype. listType then
    #log keys;
    @TfieldMapList variable = [variableValue mMapListValue]
    quickSort ( !?variable !0 ![variable length]-1 !keys)
    variableValue = @Tvalue. new { !0L !"" !variable !@TfieldMap. emptyMap}
    #log variable;
    [!?ioTemplateVariableMap setMTypeForKey !variableType ![variableName string]]
    [!?ioTemplateVariableMap setMValueForKey !variableValue ![variableName string]]
  else
    error variableName: "list type expected"
  end
}

#---------------------------------------------------------------------------*

rule <variable>
  ?let @string inPrefix
  ?let @string inPath
  ?let @string inTemplateDirectory
  ?let @TfieldMap inVariableMap
  !@TvarPath path {
  path = @TvarPath. emptyList
  $identifier$ ?var @lstring variableName
  @lstring key = emptyLString()
  select
    @Tvalue keyValue
    @Ttype keyType
    $[$
    <expression> !inPrefix !inPath !inTemplateDirectory !inVariableMap ?keyValue ?keyType
    switch keyType
    case stringType:
      key = @lstring. new { ![keyValue mStringValue] !@location.here}
    case boolType, unsignedType, listType, mapType, structType, enumType, unconstructedType:
      error @location.here: "map key must be a string": key
    end
    $]$
  or end
  path += !variableName !key
  repeat
  while
    $::$ $identifier$ ?variableName
    key = emptyLString()
    select
      @Tvalue keyValue
      @Ttype keyType
      $[$
      <expression> !inPrefix !inPath !inTemplateDirectory !inVariableMap ?keyValue ?keyType
      switch keyType
      case stringType:
        key = @lstring. new { ![keyValue mStringValue] !@location.here}
      case boolType, unsignedType, listType, mapType, structType, enumType, unconstructedType:
        error @location.here: "map key must be a string": key
      end
      $]$
    or end
    path += !variableName !key
  end
}

#---------------------------------------------------------------------------*

}

#---------------------------------------------------------------------------*

#routine setFieldAlongPath
#  ?@TvarPath path
#  ?!@Ttype variableType
#  ?!@Tvalue variableValue
#  ??@Ttype expressionType
#  ??@Tvalue enumeratedValue
#:
#  if [path length] > 0 then
#    @lstring pathItem;
#    @lstring key;
#    [!?path popFirst ?pathItem ?key];
#    
#    @Ttype subType [unconstructedType];
#    @Tvalue subValue := valueWithVoid[];
#    
#    if variableType == [@Ttype structType] then
#      if [[variableValue mStructValue] hasKey ![pathItem string]] then
#        [[variableValue mStructValue] searchKey ![pathItem string] ?subType ?subValue];
#      end if;
#    end if; 
#    
#    @Ttype currentType := subType;
#    @Tvalue currentValue := subValue;
#    if [key string] != "" & currentType == [@Ttype mapType] then
#      if [currentValue hasKey ![key string]] then
#        [currentValue searchKey !key ?subType ?subValue];
#      end if;
#    end if;
#    
#    setFieldAlongPath !path !?subType !?subValue !expressionType !enumeratedValue;
#    
#    # if key is not empty then the subType / subValue 
#    # is added to the m
#    if [key string] != "" then
#      
#    
#    variableType := [@Ttype structType];
#    @TfieldMap items := [variableValue mStructValue];
#    if [items hasKey ![pathItem string]] then
#      [!?items removeKey !pathItem ?* ?*];
#    end if;
#    [!?items insertKey
#      !pathItem
#      !subType
#      !subValue
#    ];
#    variableValue := valueWithStruct[!items];
#  else
#    variableType := expressionType;
#    variableValue := enumeratedValue;
#  end if;  
#end routine;

proc setVariableInPath
  ?@TvarPath path
  ?!@TfieldMap ioFieldMap
  ?let @Ttype expressionType
  ?let @Tvalue enumeratedValue {
  # get the name and the key of the variable
  @lstring varName
  @lstring key
  [!?path popFirst ?varName ?key]
  
  if [ioFieldMap hasKey ![varName string]] then
    @Ttype fieldType
    @Tvalue fieldValue
    [ioFieldMap searchKey !varName ?fieldType ?fieldValue]
    if fieldType == @Ttype. mapType then
      # then referenced field is a map
      if [key string] != "" then
        # a key has been defined for the map,
        @TfieldMap items = [fieldValue mStructValue]
        if [items hasKey ![key string]] then
          if [path length] == 0 then
            [!?items setMTypeForKey !expressionType ![key string]]
            [!?items setMValueForKey !enumeratedValue ![key string]]
          else
            @Ttype itemType
            @Tvalue itemValue
            [items searchKey !key ?itemType ?itemValue]
            @TfieldMap nextFieldMap = [itemValue mStructValue]
            setVariableInPath ( !path !?nextFieldMap !expressionType !enumeratedValue)
            itemValue.mStructValue = nextFieldMap
            itemType = @Ttype. structType
            [!?items setMTypeForKey !itemType ![key string]]
            [!?items setMValueForKey !itemValue ![key string]]
          end
        else
          if [path length] == 0 then
            [!?items insertKey !key !expressionType !enumeratedValue]
          else
            var nextFieldMap =@TfieldMap.emptyMap{}
            setVariableInPath ( !path !?nextFieldMap !expressionType !enumeratedValue)
            [!?items insertKey !key !@Ttype. structType !valueWithStruct(!nextFieldMap)]
          end
        end
        fieldValue.mStructValue = items
        [!?ioFieldMap setMTypeForKey !fieldType ![varName string]]
        [!?ioFieldMap setMValueForKey !fieldValue ![varName string]]
      else # no key has been defined, the type is changed to
        if [path length] == 0 then
          # the actual type
          [!?ioFieldMap setMTypeForKey !expressionType ![varName string]]
          [!?ioFieldMap setMValueForKey !enumeratedValue ![varName string]]
        else
          # a struct type
          var nextFieldMap =@TfieldMap.emptyMap{}
          setVariableInPath ( !path !?nextFieldMap !expressionType !enumeratedValue)
          [!?ioFieldMap setMTypeForKey !@Ttype. structType ![varName string]]
          [!?ioFieldMap setMValueForKey !valueWithStruct(!nextFieldMap) ![varName string]]
        end
      end
    elsif fieldType == @Ttype. structType then
      if [path length] == 0 then
        # the type is changed to the actual type
        [!?ioFieldMap setMTypeForKey !expressionType ![varName string]]
        [!?ioFieldMap setMValueForKey !enumeratedValue ![varName string]]
      else
        # the existing struct is got
        @TfieldMap nextFieldMap = [fieldValue mStructValue]
        setVariableInPath ( !path !?nextFieldMap !expressionType !enumeratedValue)
        # and updated
        fieldValue.mStructValue = nextFieldMap
        [!?ioFieldMap setMValueForKey !fieldValue ![varName string]]
      end
    else
      if [key string] == "" then
        if [path length] == 0 then
          # the type is changed to the actual type
          [!?ioFieldMap setMTypeForKey !expressionType ![varName string]]
          [!?ioFieldMap setMValueForKey !enumeratedValue ![varName string]]
        else
          var nextFieldMap =@TfieldMap.emptyMap{}
          setVariableInPath ( !path !?nextFieldMap !expressionType !enumeratedValue)
          [!?ioFieldMap setMTypeForKey !@Ttype. structType ![varName string]]
          [!?ioFieldMap setMValueForKey !valueWithStruct(!nextFieldMap) ![varName string]]
        end
      else
        # create a map
        var newMap =@TfieldMap.emptyMap{}
        if [path length] == 0 then
          [!?newMap insertKey !key !expressionType !enumeratedValue]
        else
          var nextFieldMap =@TfieldMap.emptyMap{}
          setVariableInPath ( !path !?nextFieldMap !expressionType !enumeratedValue)
          [!?newMap insertKey !key !@Ttype. structType !valueWithStruct(!nextFieldMap)]
        end
        [!?ioFieldMap setMTypeForKey !@Ttype. mapType ![varName string]]
        [!?ioFieldMap setMValueForKey !valueWithMap(!newMap) ![varName string]]
      end
    end
  else
    # The variable does not exist
    if [path length] == 0 then
      if [key string] == "" then
        [!?ioFieldMap insertKey !varName !expressionType !enumeratedValue]
      else
        var newMap =@TfieldMap.emptyMap{}
        [!?newMap insertKey !key !expressionType !enumeratedValue]
        [!?ioFieldMap insertKey !varName !@Ttype. mapType !valueWithMap(!newMap)]
      end
    else
      if [key string] == "" then
        var nextFieldMap =@TfieldMap.emptyMap{}
        setVariableInPath ( !path !?nextFieldMap !expressionType !enumeratedValue)
        [!?ioFieldMap insertKey !varName !@Ttype. structType !valueWithStruct(!nextFieldMap)]
      else
        var newMap =@TfieldMap.emptyMap{}
        var nextFieldMap =@TfieldMap.emptyMap{}
        setVariableInPath ( !path !?nextFieldMap !expressionType !enumeratedValue)
        [!?newMap insertKey !key !@Ttype. structType !valueWithStruct(!nextFieldMap)]
        [!?ioFieldMap insertKey !varName !@Ttype. mapType !valueWithMap(!newMap)]
      end
    end
  end
}

#---------------------------------------------------------------------------*
proc printVariable
  ?@uint indent
  ?let @Ttype variableType
  ?let @Tvalue variableValue {
  indent = indent + 4
  @string offset = @string. stringWithSequenceOfCharacters { !' ' !indent}
  switch variableType
  case boolType:
    if [variableValue mUnsigned64Value] == 1L then
      message offset+"true\n"
    else
      message offset+"false\n"
    end
  case unsignedType:
    message offset+[variableValue mUnsigned64Value]+"\n"
  case stringType:
    message offset+"\""+[variableValue mStringValue]+"\"\n"
  case enumType:
    message offset+[variableValue mStringValue]+"\n"
  case listType:
    for () in  [variableValue mMapListValue] do(idx)
      message offset+"item at "+idx+":\n"
      printVariable ( !indent !@Ttype. structType !@Tvalue. new { !0L !"" !@TfieldMapList. emptyList !mMap})
    end
  case mapType:
    for () in  [variableValue mStructValue] do
      message offset+lkey+":\n"
      printVariable ( !indent !mType !mValue)
    end
  case structType:
    for () in  [variableValue mStructValue] do
      message offset+lkey+":\n"
      printVariable ( !indent !mType !mValue)
    end
  case unconstructedType:
    error @location.here: "internal error, unconstructed type"
  end
}

#---------------------------------------------------------------------------*

list @sortingKeyList {
  @lstring key
  @lsint order
}

func structCompare
  ?let @TfieldMap s1
  ?let @TfieldMap s2
  ?@sortingKeyList fieldList
  ->@sint result {
  if [fieldList length] > 0 then
    @lstring field
    @lsint order
    [!?fieldList popFirst ?field ?order]
    @Ttype s1Type
    @Tvalue s1Value
    [s1 searchKey !field ?s1Type ?s1Value]
    @Ttype s2Type
    @Tvalue s2Value
    [s2 searchKey !field ?s2Type ?s2Value]
    if s1Type == s2Type & s1Type == @Ttype. unsignedType then
#      message "Compare ".s1Value." and ".s2Value." ";
      if [s1Value mUnsigned64Value] < [s2Value mUnsigned64Value] then
#        message "<\n";
        result = -1s * [order sint]
      else
        if [s1Value mUnsigned64Value] > [s2Value mUnsigned64Value] then
#          message ">\n";
          result = 1s  * [order sint]
        else
#          message "=\n";
          result = structCompare(!s1 !s2 !fieldList)
        end
      end
    else
      error field: "unsigned sort key required": result
    end
  else
    result = 0s
  end
}

proc swap
  ?!@TfieldMapList t
  ?let @uint index1
  ?let @uint index2 {
#  message "SWAP ".index1." and ".index2."\n";
  @TfieldMap temp = [t mMapAtIndex !index1]
  [!?t setMMapAtIndex ![t mMapAtIndex !index2] !index1]
  [!?t setMMapAtIndex !temp !index2]
}

proc partition
  ?!@TfieldMapList t
  ?@uint min
  ?@uint max
  ?let @sortingKeyList fieldList
  ?!@uint pivotIndex { 
  @TfieldMap pivot = [t mMapAtIndex !pivotIndex]
  swap ( !?t !pivotIndex !max)
  @uint storeIndex = min
  @uint i = min
  loop( max - min)
  while i < max do
    if structCompare(![t mMapAtIndex !i] !pivot !fieldList) == -1s then
      swap ( !?t !i !storeIndex)
      storeIndex++
    end
    i++
  end
  swap ( !?t !storeIndex !max)
  pivotIndex = storeIndex
}

proc quickSort
  ?!@TfieldMapList t
  ?let @uint min
  ?let @uint max
  ?let @sortingKeyList fieldList {
#  message "SORT from ".min." to ".max."\n";
  if min < max then
    @uint pivotIndex = (max + min) / 2
#    message "PIVOT = ".pivotIndex."\n";
    partition ( !?t !min !max !fieldList !?pivotIndex)
    quickSort ( !?t !min !pivotIndex !fieldList)
    quickSort ( !?t !pivotIndex+1 !max !fieldList)
  end
}