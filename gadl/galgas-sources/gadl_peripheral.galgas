 #TODO: tmp, test.

map @registerPeriphDefMap
{
  @instructionList regDecList
  @luint64 address
  @lstring readFuncCall
  @lstring writeFuncCall
  @varBaseType type #type of the register (u32, â€¦)
  insert insertKey error message "the '%K' peripheral register is already defined in %L" 
  search searchKey error message "the '%K' peripheral register is not defined"
  remove removeKey error message "the '%K' peripheral register is not defined. Can't remove it."
}

map @peripheralMap
{
  @luint64 size
  @registerPeriphDefMap registerPeriphDefMap
  @functionMap functionMap
  @instructionList instDeviceDecList
  @varIdfStruct idfStruct
  @timingMap timingMap
  @signalConnectionList signalConnectionList

  insert insertKey error message "the '%K' peripheral is already defined in %L" 
  search searchKey error message "the '%K' peripheral is not defined"
  remove removeKey error message "the '%K' peripheral is not defined. Can't remove it."
}

method @ASTregisterPeriphDefMap getRegisterPeriphDefMap
  ?let  @symbolValueMap symbolMap
  ?! @varIdfStruct idfStruct
  ?let  @ASTFunctionMap ASTFunctionMap
  ?let  @luint64 periphSize
  !  @registerPeriphDefMap registerPeriphDefMap {
  @expressionContext ctx = @expressionContext.peripheral
  registerPeriphDefMap = @registerPeriphDefMap.emptyMap
  for () in  self do
    #extract instruction declaration
    getInst ( !ASTregDecList !ctx !symbolMap !?idfStruct ?var @instructionList regDecList)
    #check that type is a basic type.
    @varBaseType vbt = [type getBaseType]
    #check that mapping is possible: map+size of reg <= peripheral mem size.
    if [[address uint64] uint] + ([vbt size]/8) > [[periphSize uint64] uint] then
      error address:"The peripheral memory size is not large enough to map this register."
    end
    #check that the Function call are defined.
    if [readFuncCall string] != "" then
      [ASTFunctionMap searchKey !readFuncCall ?var @parameterDefList param ?var @varAbstractType outType ?*]
      #one parameter valued with the current data in mem.
      var paramExpected =@parameterDefList.emptyList{}
      paramExpected += !false !vbt !@lstring.new { !"data" !@location.here}
      if not [param checkEqual !paramExpected ![readFuncCall location]] then
        error [readFuncCall location] : "The 'read' callback does not have correct parameters"
      end
      #check return type.
      if not [outType checkEqual !vbt] then
        error [readFuncCall location] : "The 'read' should return the value updated by the read handler"
      end
    end
    if [writeFuncCall string] != "" then
      [ASTFunctionMap searchKey !writeFuncCall ?var @parameterDefList param ?var @varAbstractType outType ?*]
      #param: 2 parameters (data and old data), same type as the register size.
      var paramExpected =@parameterDefList.emptyList{}
      paramExpected += !false !vbt !@lstring.new { !"data" !@location.here}
      paramExpected += !false !vbt !@lstring.new { !"oldData" !@location.here}
      if not [param checkEqual !paramExpected ![writeFuncCall location]] then
        error [writeFuncCall location] : "The 'write' callback does not have correct parameters"
      end
      #check return type.
      if not [outType checkEqual !vbt] then
        error [writeFuncCall location] : "The 'write' should return the value updated by the write handler"
      end
    end
    #insert in map.
    [!?registerPeriphDefMap insertKey !lkey !regDecList !address !readFuncCall !writeFuncCall !vbt]
  end
}

getter @ASTperipheralMap getPeriphMap
  ->  @peripheralMap peripheralMap {
  peripheralMap = @peripheralMap.emptyMap
  @expressionContext ctx = @expressionContext.peripheral

  for () in  self do
    #for each peripheral
    var idfStruct =@varIdfStruct.default
    idfStruct.currentPeriphName = lkey #methods defined for the current function.
    idfStruct.ASTperipheralMap = self
    var symbolMap =@symbolValueMap.emptyMap{}
    @registerPeriphDefMap registerPeriphDefMap
    #get type definitions (update idfStruct).
    getInst ( !ASTTypeDefList !ctx !symbolMap !?idfStruct ?*)
    #definition of locals.
    getInst ( !ASTLocalVarList !ctx !symbolMap !?idfStruct ?*) #TODO: get declaration code.
    #extract register code.
    [ASTregisterPeriphDef getRegisterPeriphDefMap !symbolMap !?idfStruct !ASTFunctionMap !size ?registerPeriphDefMap]
    #declare internal devices
    getInst ( ![ASTDeviceDecMap instList] !ctx !symbolMap !?idfStruct ?var @instructionList instDeviceDecList)
    #generate methods.
    @functionMap functionMap = [ASTFunctionMap getFunctionMap !ctx !idfStruct]
    #timing part.
    @timingMap timingMap = [ASTTimingMap getTimingMap !symbolMap !idfStruct]
    #signal connection part.
    @signalConnectionList scList = [ASTSignalConnectionList getSignalConnectionList !symbolMap !idfStruct]
    #add in the final object.
    [!?peripheralMap insertKey !lkey !size !registerPeriphDefMap !functionMap !instDeviceDecList !idfStruct !timingMap !scList]
  end
}



# vim:ft=galgas:ts=2:sw=2:tw=0
