

#in fact, not only setInTemplate -> do most of the job.
method @timingMap setInTemplate
  ?let  @string exportDir
  ?! @TfieldMap templateStruct 
{
  var timingTpl =@TfieldMapList.emptyList{}
  var signalSet =@stringset.emptySet{}
  for () in  self do
    var timingTplBody =@TfieldMap.emptyMap{}
    for  (@lstring sigName) in  signalIn do signalSet += ![sigName string] end
    for (@lstring sigName) in  signalOut do signalSet += ![sigName string] end

    addBoolMap ( !signalIn  !"name" !"signalWait" !?timingTplBody)
    addBoolMap ( !signalOut !"name" !"signalEmit" !?timingTplBody)

    @adjMat harmlessAutomata = computeMatAdj(!instList !externalActivation !false)
    @adjMat uppaalAutomata   = computeMatAdj(!instList !externalActivation !true)
    
    @pointList stateCoordinateList
    getAutomataCoordinates ( !exportDir !uppaalAutomata !lkey ?stateCoordinateList)
    #add name
    addLStringValue ( !?timingTplBody !"name" !lkey)
    #add local vars
    addListValue ( !?timingTplBody !lstringWith(!"localVarUppaal") ![instList getDeclarationList !@codeCtx.Uppaal])
    addListValue ( !?timingTplBody !lstringWith(!"localVar")  ![instList getDeclarationList !@codeCtx.C])
    #add automata (Uppaal and simulation ones).
    adjacencyMatrixTemplate ( !uppaalAutomata   !?timingTplBody !true !stateCoordinateList)  #Uppaal
    adjacencyMatrixTemplate ( !harmlessAutomata !?timingTplBody !false !stateCoordinateList) #sim

    addBoolValue ( !?timingTplBody !lstringWith(!"onActivation") !externalActivation)
    getSimulationSteps ( !harmlessAutomata !?timingTplBody !externalActivation)
    #expEnable
    addStringValue ( !?timingTplBody !lstringWith(!"expEnable") ![expEnable generateCode !@codeCtx.C])
    #end
    timingTpl += !timingTplBody
  end
  addListValue ( !?templateStruct !lstringWith(!"timingList") !timingTpl)
  addListValue ( !?templateStruct !lstringWith(!"signalDefinedInTiming") !stringSetToList(!signalSet !"name"))
  #enable condition.
  @boolMapMap timerCondMap = [self getEnableConditionIdf]
  var timingEnableTpl =@TfieldMapList.emptyList{}  
  for () in  timerCondMap do
    var timingEnableTplBody =@TfieldMap.emptyMap{}
    addLStringValue ( !?timingEnableTplBody !"name" !lkey)    
    addBoolMap ( !boolMap  !"name" !"timing" !?timingEnableTplBody)
    timingEnableTpl += !timingEnableTplBody
  end
  addListValue ( !?templateStruct !lstringWith(!"timingEnableList") !timingEnableTpl)
  #testCopy;
}

#return a map where:
# * the key is the register name (or field)
# * the value is a map of timing names.
getter @timingMap getEnableConditionIdf
  -> @boolMapMap timerCondMap
{
  timerCondMap = @boolMapMap.emptyMap
  for () in  self do #each timing
    #we get the list of identifiers in the 'enable' expression
    @lstring timingName = lkey
    @expIdfList idfList = [expEnable getIdf !@expIdfList.emptyList !@varIdfStruct.default]
    for () in  idfList do #with each identifier found in the 'enable' expression:
      switch [idf detectedType] #check correct type
        case unknown, structMember, localVar, tabularAccess, componentCall, periphCall, memoryAccess,timing,signal:
          error [lkey location]: "The condition to enable the timing should not have an identifier with "+
                                  [[idf detectedType] string]+". Only registers are allowed"
        case registerAccess, registerBitField :
          #then get the registers to update:
          #for reg.slice => we keep only the 'reg', because the method to access the 
          #slice call the full reg accessor
          #store the result in 'regName'
          @lstring lregName = [[idf idfList] idfAtIndex !0]#get identifier name of the first item.
          @string regName = [lregName string]
          #ok: we are here with the correct 'regName'.
          #The boolMapMap works as follow:
          #the first Key is the register -> we get a boolMap
          #In that boolMap, all the timing names that are dependant of this register are listed.
          if [timerCondMap hasKey !regName] then
            #already an entry -> the register is used
            [timerCondMap searchKey !lregName ?var @boolMap timingNameMap]
            if not [timingNameMap hasKey ![timingName string]] then
              #it is used for another 'timing'. Update
              [!?timingNameMap insertKey !timingName]
              #remove the old one and set the new one.
              [!?timerCondMap removeKey !lregName ?*]
              [!?timerCondMap insertKey !lregName !timingNameMap]
            end
          else
            var timingNameMap =@boolMap.emptyMap{}
            [!?timingNameMap insertKey !timingName]
            [!?timerCondMap insertKey !lregName !timingNameMap]
          end
      end
    end
  end
  #debug.
  for () in  timerCondMap do
    @lstring reg = lkey
    message "register "+[reg string]+":\n"
    for () in  boolMap do
      message "\ttiming "+[lkey string]+"\n"
    end
  end
}


getter @timingInstructionList getDeclarationList
  ?  let @codeCtx cgc              ## generation code context (C, Uppaal, ..)
  -> @TfieldMapList varMapTplList
{
  varMapTplList = @TfieldMapList.emptyList
  for () in  self do
    if (inst is >=  @tDeclaration) then
      var varMapTplBody =@TfieldMap.emptyMap{}  
      #Ok, get a declaration inst.
      let @tDeclaration tDecInst = ( inst as @tDeclaration)
      for () in  [tDecInst instList] do
        if (inst is >= @instDeclaration) then #inst is a @instruction here.
        let @instDeclaration instDec = ( inst as @instDeclaration)
         addLStringValue ( !?varMapTplBody !"name" ![instDec name])     
          #OK, generate code.
          @string declare = [inst generateCode !1 !cgc]
          addStringValue ( !?varMapTplBody !lstringWith(!"declare") !declare)      
        end
      end
      #end
      varMapTplList += !varMapTplBody
    elsif (inst is >=  @tLoop) then
      var instLoop = (inst as @tLoop)
      var varMapTplLoopList = [[instLoop tInstLoopList] getDeclarationList !cgc]
      varMapTplList = varMapTplList+varMapTplLoopList
    end
  end
}

proc addBoolMap
  ?let  @boolMap boolmap
  ?let  @string key
  ?let  @string mapName
  ?! @TfieldMap templateStruct
{
  var itemList =@TfieldMapList.emptyList{}
  for (@lstring val) in  boolmap do
    var itemBody =@TfieldMap.emptyMap{}  
    addLStringValue ( !?itemBody !key !val)
    itemList += !itemBody
  end
  addListValue ( !?templateStruct !lstringWith(!mapName) !itemList)
}

# vim:ft=galgas:ts=2:sw=2:tw=0
