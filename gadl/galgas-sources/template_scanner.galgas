#---------------------------------------------------------------------------*
#                                                                           *
#  GOIL template scanner definition                                         *
#                                                                           *
#  Copyright (C) 2009, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

template lexique template_scanner {

template "%" ... "%"

replace "\\%" -> "%"

replace "\\n" -> "\n"
replace "\\t" -> "\t"

replace "\\\\" -> "\\"

@string identifierString
@uint64 uint64value
@string tokenString

style keywordsStyle -> "Keywords"
style delimitersStyle -> "Delimiters"
style nonTerminalStyle -> "Non Terminal Symbols"
style integerStyle -> "Integer Constants"
style floatStyle -> "Floating Point Constants"
style stringStyle -> "String literals"
style commentStyle -> "Comments"

# -------------------------- identifier or lkey word --------------------
# keywords can be written in lower or upper case
# for identifiers, case is significant

$identifier$ ! tokenString error message "an identifier"

list goilTemplateKeyWordList style keywordsStyle error message "the '%K' keyword"{
  "after",
  "before",
  "between",
  "block",
  "by",
  "default",
  "display",
  "do",
  "else",
  "elsif",
  "emptylist",
  "emptymap",
  "end",
  "error",
  "exists",
  "false",
  "for",
  "foreach",
  "from",
  "here",
  "if",
  "in",
  "list",
  "let",
  "loop",
  "mapof",
  "mod",
  "no",
  "not",
  "or",
  "prefixedby",
  "sort",
  "template",
#  "templateresult",
  "then",
  "to",
  "true",
  "typeof",
  "yes",
  "warning",
  "while",
  "write"}

rule 'a'->'z' |  'A'->'Z' {
  repeat
    enterCharacterIntoString ( !?identifierString !toLower (!*) )
    enterCharacterIntoString ( !?tokenString !* )
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end
  send search identifierString in goilTemplateKeyWordList default $identifier$
}

#------------------------------- Integer, floating Point Constant ------------------
@double floatValue
$literal_double$ !floatValue !tokenString  style floatStyle error message "a float number"
$unsigned_literal_integer64$ ! uint64value  style integerStyle error message "a 64-bit unsigned decimal number"

message decimalNumberTooLarge : "decimal number too large"
message floatNumberConversionError : "invalid float number"
message internalError : "internal error"

rule '0'->'9' {
  enterCharacterIntoString ( !?tokenString !* )
  repeat
  while '0'->'9' :
    enterCharacterIntoString ( !?tokenString !* )
  while '_' :
  end
  select
  case '.' :
    enterCharacterIntoString ( !?tokenString !'.' )
    repeat
    while '0'->'9' :
      enterCharacterIntoString ( !?tokenString !* )
    while '_' :
    end
    convertStringToDouble ( !tokenString !?floatValue error floatNumberConversionError )
    send $literal_double$
  default
    convertDecimalStringIntoUInt64 ( !tokenString !?uint64value error decimalNumberTooLarge, internalError )
    send $unsigned_literal_integer64$
  end
}


#------------------------------- Floating point Number ------------------
$.$  style delimitersStyle error message "the '.' delimitor"
$.=$  style delimitersStyle error message "the '.=' delimitor"
$...$  style delimitersStyle error message "the '...' delimitor"

#--- Floating Point constant begining with a dot
rule '.' {
  select
  case '0'->'9' :
    enterCharacterIntoString ( !?tokenString !'0' )
    enterCharacterIntoString ( !?tokenString !'.' )
    enterCharacterIntoString ( !?tokenString !* )
    repeat
    while '0'->'9' :
      enterCharacterIntoString ( !?tokenString !* )
    while '_' :
    end
    convertStringToDouble ( !tokenString !?floatValue error floatNumberConversionError )
    send $literal_double$
  default
    select
    case ".." :
      send $...$
    case "=" :
      send $.=$
    default
      send $.$
    end
  end
}

# ----------------------------- Delimitors ---------------------------------------
list galgasDelimitorsList style delimitersStyle error message "the '%K' delimitor"{
  "*",     "|",    ",",      "+",     "--",
  "::",    ">",    ";",      ":",
  "-",     "(",    ")",     "->",      "?",
  "==",   "??",    "!",     ":=",     "++",
  "[",     "]",   "+=",     "?!",     "!?",
  "/",    "!=",   ">=",      "&",
  "{",     "}",   "+>",     "-=",
  "^",    ">>",    "~",     "<-",
  "@"}

rule list galgasDelimitorsList


# --------- Special delimitors / non terminal symbol --------------------------
$<$  style delimitersStyle error message "the '<' delimitor"
$<=$  style delimitersStyle error message "the '<=' delimitor"
$<<$  style delimitersStyle error message "the '<<' delimitor"

rule '<' {
  select
  case '=' :
    send $<=$
  case '<' :
    send $<<$
  default
    send $<$
  end
}

# ------------------------------------ String ----------------------------
message unterminatedLitteralString : "Unterminated literal string" 

@string a_string

message incorrectCharConstant : "incorrect literal character"

$string$ !a_string  style stringStyle error message "literal string"

rule '"' {
  repeat
  while '\\' :
    select
      case 'n' :
        enterCharacterIntoString ( !?tokenString !'\n' )
      case 't' :
        enterCharacterIntoString ( !?tokenString !'\t' )
      default
        error incorrectCharConstant
    end
  while '\u0020'->'\u0021' | '\u0023' -> '\uFFFD' :
    enterCharacterIntoString ( !?a_string !* )
  end  
  select
    case '"' :
      send $string$
    default
      error unterminatedLitteralString
  end
}

# ------------------------------------ Comment ----------------------------
$comment$  style commentStyle error message "a comment"
rule '#' {
  repeat
  while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
  end
  drop $comment$
}

# --------------------- separators -----------------------------------------
rule '\u0001' -> ' ' {
}

}
# vim:ft=galgas:ts=2:sw=2:tw=0
