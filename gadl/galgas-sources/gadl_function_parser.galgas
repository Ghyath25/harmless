syntax gadl_function_parser (gadl_lexique) {

#from gadl_implementation_parser
rule <typeDeclaration> ! @varAbstractType type
rule <implementationOrEmpty> ?! @ASTInstructionList instList

#define only the parameters in a function definition.
rule <functionDefParam>
  ! @parameterDefList parameterDefList {
  parameterDefList =@parameterDefList. emptyList
  #function args.
  $($
  select
    repeat
      @bool out
      select
        $out$ out = true
      or
        out = false
      end
      @varAbstractType argType
      <typeDeclaration> ?argType
      @lstring argName
      $idf$ ?argName
      parameterDefList += !out !argType !argName
    while
      $,$
    end
  or #no argument.
  end
  $)$
}

#not the outType and functionName in the rule due to grammar LL1 restrictions.
rule <functionDef>
  ?let  @varAbstractType outType
  ?let  @lstring functionName
  ?! @ASTFunctionMap ASTFunctionMap {
  @parameterDefList parameterDefList
  <functionDefParam> ?parameterDefList
  #function body.
  ${$
  var instList =@ASTInstructionList.emptyList{}
  <implementationOrEmpty> !? instList
  $}$
  [!?ASTFunctionMap insertKey !functionName !parameterDefList !outType !instList]
}

}