#this file is used to apply the semantics on the whole ISA
#Parsing should have been done.
# TODO: a map to support different isa
struct @ASTIsa
{
  #format stuff
  @formatMap formatMap
  @uint internalFormatId
  #syntax stuff.
  @syntaxMap syntaxMap
  @varMap fieldSyntaxMap
  @uint internalSyntaxId
  @printNumberTypeMap typeMap
  #behavior stuff.
  @ASTbehaviorMap ASTbehaviorMap
  @uint internalBehaviorId
  #component map
  @ASTComponentMap ASTComponentMap
  @lstringMap componentMapOrder
  @uint currentComponentId
  #default  
  @defaultSection defaultValues
}

#To be updated (no info about syntax...)
struct @Isa
{
  @instructionImplementationMap impMap
  @decodedBehaviorMap decodedBehaviorMap
  @staticInfoMap staticInfoMap
  @defaultSection defaultValues  
}

#This should be a reader, however, to support
#legacy syntax/format parts, the template is included in this
#semantic part.
method @ASTIsa getIsa
  ?! @varIdfStruct idfStruct #TODO ou constant?
  ?let  @lstring modelName
  ?let  @lstring exportDir
  ?! @TfieldMap templateStruct
  !  @Isa isa {
  ##########################################################################################
  # ISA
  ##########################################################################################
  # format
  @instructionImplementationMap impMap
  instructionFormatPart ( ![modelName string] !defaultValues !?templateStruct !formatMap !exportDir ?impMap) 
  generateInstConstructorAndDef ( !?templateStruct !impMap !formatMap)  
  # syntax
  instructionSyntaxPart ( !modelName !syntaxMap !impMap !?templateStruct !typeMap)
  # components
  [ASTComponentMap getComponentMap !?idfStruct !componentMapOrder]
  [idfStruct.componentMap setInTemplate !?templateStruct]
  #behavior.
  @decodedBehaviorMap decodedBehaviorMap
  instructionBehaviorPart ( !ASTbehaviorMap !impMap ![modelName string] 
                          !idfStruct !?templateStruct ?decodedBehaviorMap)

  #branch detection
#  @branchInstMap branchInstMap = [decodedBehaviorMap getBranchInstructions !idfStruct]
#  [branchInstMap updateTemplateForJumpInstructions !?templateStruct]
  #tmp.
  @staticInfoMap staticInfoMap = [decodedBehaviorMap getStaticInfo !idfStruct]
  
  #defaults
  [defaultValues updateTemplate !?templateStruct]
  #data to generate log file (.txt) about instructions, using templates.
  prepareLogTemplates(!impMap !defaultValues !?templateStruct)

  isa = @Isa.new { !impMap !decodedBehaviorMap !staticInfoMap !defaultValues}
}

# vim:ft=galgas:ts=2:sw=2:tw=0
