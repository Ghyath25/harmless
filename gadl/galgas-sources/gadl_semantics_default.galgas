

#----------------------------------------------------------------------------
#-------------------------- default values.
#----------------------------------------------------------------------------
struct @defaultSection {
  @luint   instructionSize
  @bool    isBigEndian
  @lstring fetchComponentName
  @lstring fetchMethodName
  @lstring fetchAddressComponentName
  @lstring fetchAddressMethodName
  @lstring progReadComponentName
  @lstring progReadMethodName
  @lstring debugComponentName
}

##check that the debug component provided is correct:
#routine checkDebugComponent
#  ?? @lstring unused debugComponentName
#  ?? @defaultSection unused defaultValues
#:
#  @methodPrototypeMap debugMethodMap [emptyMap];
#  @varType typeU8 := [@varType new ![@varKind unsigned] !8 !here];
#  @varType typeU32 := [@varType new ![@varKind unsigned] !32 !here];
#  @paramList paramList;
#  #getNBRegister
#  @returnTypeList returnList [emptyList];
#  returnList += ![@functionOutTypeClassic new !typeU8];
#  paramList := [@paramList emptyList];
#  [!?debugMethodMap insertKey ![@lstring new !"getNBRegister" !here] !returnList !paramList];
#  #getRegister
#  returnList := [@returnTypeList emptyList];
#  paramList := [@paramList emptyList];
#  paramList += !false !typeU8;
#  paramList += !true !typeU8;
#  returnList += ![@functionOutTypeClassic new !typeU32];
#  [!?debugMethodMap insertKey ![@lstring new !"getRegister" !here] !returnList !paramList];
#  #setRegister
#  returnList := [@returnTypeList emptyList];
#  paramList := [@paramList emptyList];
#  paramList += !false !typeU8;
#  paramList += !false !typeU32;
#  [!?debugMethodMap insertKey ![@lstring new !"setRegister" !here] !returnList !paramList];
#  #read8
#  returnList := [@returnTypeList emptyList];
#  paramList := [@paramList emptyList];
#  paramList += !false !typeU32;
#  returnList += ![@functionOutTypeClassic new !typeU8];
#  [!?debugMethodMap insertKey ![@lstring new !"read8" !here] !returnList !paramList];
#  #write8
#  returnList := [@returnTypeList emptyList];
#  paramList := [@paramList emptyList];
#  paramList += !false !typeU32;
#  paramList += !false !typeU8;
#  [!?debugMethodMap insertKey ![@lstring new !"write8" !here] !returnList !paramList];
#end routine;

func isThereAUserFetch
  ?let  @defaultSection defaultValues
  ->  @bool hasUserFetch {
  hasUserFetch = ([[defaultValues fetchComponentName] string] != "")
}

#this function returns:
# * if a user fetch function is defined, fetchImplementationName get the function name (the C name)
# * Otherwise. fetchImplementationName is set to an empty string.
proc getUserFetchFunction
  ?let  @defaultSection defaultValues
  !  @string fetchImplementationName {
  fetchImplementationName = ""
  @bool hasUserFetch = isThereAUserFetch(!defaultValues)
  if hasUserFetch then
    fetchImplementationName = [[defaultValues fetchComponentName] string]+"_"+
                               [[defaultValues fetchMethodName] string]
  end
}

# populate init template with:
#INST_DEFAULT_C_SIZE : default C Size for instructionSize (used in formats)
#INST_SIZE_IN_BITS   : corresponding to the instructionSize value in default section
#INST_SIZE_IN_BYTES  : corresponding to the instructionSize value in default section.
#                      the value is equal or greater than INST_SIZE_IN_BITS/8.
#INST_SIZE_IN_HALF_BYTES : in hexadecimal digits.
#IS_BIG_ENDIAN : either 'undef' or 'define'
#progReadComponentName
#progReadMethodName
#fetchAddressComponentName
#fetchAddressMethodName

method @defaultSection updateTemplate
  ?! @TfieldMap templateStruct {
  #INST_DEFAULT_C_SIZE
  #default size of instructions
  @varBaseType instSizeType = @varBaseType. new { !@varKind. unsigned ![instructionSize uint] ![instructionSize location]}
  @uint instructionSizeInBytes = [instructionSize uint]/8
  if ([instructionSize uint] & 7) != 0 then
    instructionSizeInBytes = instructionSizeInBytes + 1
  end
  @uint instructionSizeInHalfBytes = instructionSizeInBytes*2
  @string endiannes
  if isBigEndian then 
    endiannes = "define"
  else 
    endiannes = "undef"
  end
  addStringValue ( !?templateStruct !lstringWith(!"INST_DEFAULT_C_SIZE") ![instSizeType getCType])
  addStringValue ( !?templateStruct !lstringWith(!"INST_SIZE_IN_BITS") ![instructionSize string])
  addStringValue ( !?templateStruct !lstringWith(!"INST_SIZE_IN_BYTES") ![instructionSizeInBytes string])
  addStringValue ( !?templateStruct !lstringWith(!"INST_SIZE_IN_HALF_BYTES") ![instructionSizeInHalfBytes string])
  addStringValue ( !?templateStruct !lstringWith(!"IS_BIG_ENDIAN") ! endiannes)
#  @bool useGDB;
#  if [[defaultValues debugComponentName] string] == "" then useGDB := true;
#  else useGDB := false;
#  end if;
#  addBoolValue !?templateStruct !lstringWith[!"USE_GDB"] !useGDB;
#  addStringValue !?templateStruct !lstringWith[!"GDB_DEBUG_COMPONENT"] ![[defaultValues debugComponentName] string];
  #linker address translation.
  addLStringValue ( !?templateStruct !"progReadComponentName" !progReadComponentName)
  addLStringValue ( !?templateStruct !"progReadMethodName" !progReadMethodName)
  addLStringValue ( !?templateStruct !"fetchAddressComponentName" !fetchAddressComponentName)
  addLStringValue ( !?templateStruct !"fetchAddressMethodName" !fetchAddressMethodName)
}

