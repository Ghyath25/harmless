#---------------------------------------------------------------------------*
#                                                                           *
#  GOIL template invocation                                                 *
#                                                                           *
#  Copyright (C) 2009, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*


#import "goil_options.gOption";

#------------------------------------------------------------------------------*

func %once allowedFunctions -> @stringset outAllowedFunctionSet {
  outAllowedFunctionSet = @stringset. emptySet
  outAllowedFunctionSet += !"testFunction"
  outAllowedFunctionSet += !"tasks"
  outAllowedFunctionSet += !"trueFalse"
  outAllowedFunctionSet += !"yesNo"
}


func fullPrefix
  ?let @TfieldMap vars
  ?let @lstring prefix
  ->@string full {
  @string stringPrefix = [prefix string]
  if stringPrefix == "compiler" then
    @Ttype type
    @Tvalue value
    [vars searchKey !@lstring. new { !"COMPILER" !@location.here} ?type ?value]
    stringPrefix += "/" + [value mStringValue]
  elsif stringPrefix == "linker" then
    @Ttype type
    @Tvalue value
    [vars searchKey !@lstring. new { !"LINKER" !@location.here} ?type ?value]
    stringPrefix += "/" + [value mStringValue]
  elsif stringPrefix == "assembler" then
    @Ttype type
    @Tvalue value
    [vars searchKey !@lstring. new { !"ASSEMBLER" !@location.here} ?type ?value]
    stringPrefix += "/" + [value mStringValue]
  end
  full = stringPrefix
}


#------------------------------------------------------------------------------*
#                                                                              *
#  D I S P L A Y    T Y P E    A N D    V A L U E                              *
#                                                                              *
#------------------------------------------------------------------------------*

func displayTypeAndValue
  ?let @Ttype inType
  ?let @Tvalue inValue
  -> @string outResult {
  switch inType
  case boolType :
    outResult = "bool: " + if [inValue mUnsigned64Value] == 1L then "yes" else "no" end
  case unsignedType :
    outResult = "unsigned: " + [[inValue mUnsigned64Value] string]
  case stringType :
    outResult = "string: '" + [inValue mStringValue] + "'"
  case listType :
    outResult = "list, " + [[[inValue mMapListValue] length] string] + " element" + if [[inValue mMapListValue] length] > 1 then "s" else "" end + ":"
    for () in  [inValue mMapListValue] do(idx)
      outResult += "\n  #" + [idx string] + ":"
      for () in  mMap do
        outResult += "'" + lkey + "' "
        switch mType
        case boolType :
          outResult += "bool: " + if [mValue mUnsigned64Value] == 1L then "yes" else "no" end
        case unsignedType :
          outResult += "unsigned: " + [[mValue mUnsigned64Value] string]
        case stringType :
          outResult += "string: '" + [mValue mStringValue] + "'"
        case listType, structType, mapType :
        case enumType :
        case unconstructedType:
          error @location.here: "internal error, unconstructed type found"
        end
      between outResult += ", "
      end
    end
  case structType, mapType:
    outResult = ""
  case enumType:
    outResult = ""
  case unconstructedType:
    error @location.here: "internal error, unconstructed type found" : outResult
  end
}

#------------------------------------------------------------------------------*

proc displayTemplateVariableMap
  ?let @TfieldMap inTemplateVariableMap {
  for () in  inTemplateVariableMap do
    message "'" + lkey + "' " + displayTypeAndValue (!mType !mValue) + "\n"
  end
}

proc displayPathList
  ?let @stringlist pathList {
  message " -----------------------------------------\n"
  for () in  pathList do
    message " - '" + mValue + "'\n"
  end
  message " -----------------------------------------\n"
}

#------------------------------------------------------------------------------*

proc findFileInHierarchy
  ?let @string file
  ?let @string rootPath
  ?let @string searchPath
  ?!@stringlist searchedPathList
  ?!@bool found
  ?!@string fullPath {
  @string partialPath = searchPath
  loop( [searchPath length])
  while ([partialPath length] > 0) & not found do
    let @string fullFilePath = rootPath + "/" + partialPath + "/" + file
    searchedPathList += !fullFilePath
    found = [fullFilePath fileExists]
    if found then
      fullPath = fullFilePath
    else
      partialPath = [partialPath stringByDeletingLastPathComponent]
    end
  end
  if not found then
    let @string fullFilePath = rootPath + "/" + file
    searchedPathList += !fullFilePath
    found = [fullFilePath fileExists]
    if found then
      fullPath = fullFilePath
    end
  end
}

#------------------------------------------------------------------------------*

proc findAllFilesInHierarchy
  ?let @string file
  ?let @string rootPath
  ?let @string searchPath
  ?!@stringlist searchedPathList
  ?!@stringlist fullPaths {
  @string partialPath = searchPath
  loop( [searchPath length])
  while ([partialPath length] > 0) do
    let @string fullFilePath = rootPath + "/" + partialPath + "/" + file
    searchedPathList += !fullFilePath
    if [fullFilePath fileExists] then
      fullPaths += !fullFilePath
    end
    @string newPartialPath = [partialPath stringByDeletingLastPathComponent]
    if newPartialPath == partialPath then
      partialPath = ""
    else
      partialPath = newPartialPath
    end
  end 
  let @string fullFilePath = rootPath + "/" + file
  searchedPathList += !fullFilePath
  if [fullFilePath fileExists] then
    fullPaths += !fullFilePath
  end
}

#------------------------------------------------------------------------------*

proc findFileInPathList
  ?let @string file
  ?let @stringlist rootPathList
  ?let @string searchPath
  !@stringlist searchedPathList
  !@bool found
  !@string fullPath {
  searchedPathList = @stringlist. emptyList
  found = false
  fullPath = ""
  
  for (@string rootPath) in  rootPathList do
    findFileInHierarchy (
      !file
      !rootPath
      !searchPath
      !?searchedPathList
      !?found
      !?fullPath
    )
  end  
}

#------------------------------------------------------------------------------*

proc findAllFilesInPathList
  ?let @string file
  ?let @stringlist rootPathList
  ?let @string searchPath
  !@stringlist searchedPathList
  !@stringlist fullPaths {
  searchedPathList = @stringlist. emptyList
  fullPaths = @stringlist. emptyList
  
  for (@string rootPath) in  rootPathList do
    findAllFilesInHierarchy (
      !file
      !rootPath
      !searchPath
      !?searchedPathList
      !?fullPaths
    )
  end  
}

#------------------------------------------------------------------------------*

proc templateInvocation
  ?let @lstring   inTemplateName
  ?let @string    inPrefix
  ?let @string    inPath
  ?let @string    inTemplateDirectory
  ?let @bool      unused inErrorIfNotFound #for goil.
  ?let @TfieldMap inTemplateVariableMap
  ?!@string    ioResultingString
  !@bool       outNoErrorOccured {
  outNoErrorOccured = true
  @string templateName = "/"
  if inPrefix != "" then templateName += inPrefix + "/" end
  templateName += [inTemplateName string] + ".gadlTemplate"
  @string templateNameWithoutPrefix = "/"+[inTemplateName string] + ".gadlTemplate"

  if [option gadl_options.template_dir value] == "" then
    #no template in command line, use filewrapper.
    let @filewrapper fw = [filewrapper templateFileWrapper]
    @string templateContents = ""
    if [fw fileExistsAtPath !templateName] then
      templateContents = [fw textFileContentsAtPath !templateName]
    elsif [fw fileExistsAtPath !templateNameWithoutPrefix] then
      templateContents = [fw textFileContentsAtPath !templateNameWithoutPrefix]
    else
     outNoErrorOccured = false
    end
    grammar template_grammar on templateContents !inPrefix !inPath !inTemplateDirectory !inTemplateVariableMap !?ioResultingString    
  else
    templateName = inTemplateDirectory+templateName
    templateNameWithoutPrefix = inTemplateDirectory+templateNameWithoutPrefix
    if [templateName fileExists] then
      grammar template_grammar in @lstring. new { !templateName !@location.here} !inPrefix !inPath !inTemplateDirectory !inTemplateVariableMap !?ioResultingString    
    elsif [templateNameWithoutPrefix fileExists] then
      grammar template_grammar in @lstring. new { !templateNameWithoutPrefix !@location.here} !inPrefix !inPath !inTemplateDirectory !inTemplateVariableMap !?ioResultingString
    else
     outNoErrorOccured = false
    end
  end
  if not outNoErrorOccured then
    error @location.here:"Cannot retrieve template file in "+templateName+" and "+templateNameWithoutPrefix+"\n"
  end
  

#  if not [inTemplateDirectory directoryExists] then
#    error inTemplateName:"the template path '" . inTemplateDirectory . "' exists but is not a valid directory path";
#  else
#    @string fullTemplateDir;
#    if inPrefix == "" then
#      fullTemplateDir := inTemplateDirectory;
#    else
#      fullTemplateDir := inTemplateDirectory . "/" . inPrefix;
#    end if;
#    @string fullTemplatePath := fullTemplateDir . "/" . inTemplateName . ".gadlTemplate";
#    @bool found := [fullTemplatePath fileExists];
#    if found then
#      grammar template_grammar in [@lstring new !fullTemplatePath !here] !inPrefix !inPath !inTemplateDirectory !inTemplateVariableMap !?ioResultingString;    
#    else
#      #try without the prefix.
#      fullTemplatePath := inTemplateDirectory . "/" . inTemplateName . ".gadlTemplate";
#      grammar template_grammar in [@lstring new !fullTemplatePath !here] !inPrefix !inPath !inTemplateDirectory !inTemplateVariableMap !?ioResultingString;          
#    end if;
#    outNoErrorOccured := false;
#  end if;
}

#routine templateInvocation
#  ??@lstring   inTemplateName
#  ??@string    inPrefix
#  ??@string    inPath
#  ??@string    inTemplateDirectory
#  ??@bool      inErrorIfNotFound
#  ??@TfieldMap inTemplateVariableMap
#  ?!@string    ioResultingString
#  !@bool       outNoErrorOccured
#:
#  outNoErrorOccured := true;
#  if [@uint errorCount] == 0 then
#    const @string templateDir := inTemplateDirectory;
#    if [templateDir length] == 0 then
#      error inTemplateName:"the '--goil-templates' option or the environment variable GOIL_TEMPLATES is required for generating code";
#    elsif not [templateDir directoryExists] then
#      error inTemplateName:"the template path '" . templateDir . "' exists but is not a valid directory path";
#    else
#      const @string targetDir := [option goil_options.target_platform value];
#      @string fullTemplateDir;
#      if inPrefix == "" then
#        fullTemplateDir := templateDir;
#      else
#        fullTemplateDir := templateDir . "/" . inPrefix;
#      end if;
#      if [targetDir length] == 0 then
#        error inTemplateName:"the '--target' (or '-t') option is required for generating code";
#      elsif not [fullTemplateDir directoryExists] then
#        error inTemplateName: "internal. no '". fullTemplateDir . "' template found";
##      elsif not [templateDir . "/" . targetDir directoryExists] then
##        error inTemplateName:"the '--target' (or '-t') option value is '" . templateDir
##        . "', so the path formed with '--goil-templates' option is '"
##        . templateDir . "/" . targetDir
##        . "', but it is not a valid directory path";
#      else
#        @stringlist pathList [emptyList];
#        @bool found := false;
#        if inPath != "" then
#          @string userTemplateDir;
#          if inPrefix == "" then
#            userTemplateDir := inPath;
#          else
#            userTemplateDir := inPath . "/" . inPrefix;
#          end if;
#          const @string fullTemplatePath := userTemplateDir . "/" . inTemplateName . ".goilTemplate";
#          pathList += !fullTemplatePath;
#          found := [fullTemplatePath fileExists];
#          if found then
#            #displayPathList !pathList;
#            grammar template_grammar in [@lstring new !fullTemplatePath !here] !inPrefix !inPath !inTemplateDirectory !inTemplateVariableMap !?ioResultingString;
#          end if;
#        end if;
#        @string targetTemplatePartialPath := targetDir;
#        loop [targetDir length] :
#        while ([targetTemplatePartialPath length] > 0) & not found
#        do
#          const @string fullTemplatePath := fullTemplateDir . "/" . targetTemplatePartialPath . "/" . inTemplateName . ".goilTemplate";
#          pathList += !fullTemplatePath;
#          found := [fullTemplatePath fileExists];
#          if found then
#            #displayPathList !pathList;
#            grammar template_grammar in [@lstring new !fullTemplatePath !here] !inPrefix !inPath !inTemplateDirectory !inTemplateVariableMap !?ioResultingString;
#          else
#            targetTemplatePartialPath := [targetTemplatePartialPath stringByDeletingLastPathComponent];
#          end if;
#        end loop;
#        if not found then
#          const @string fullTemplatePath := fullTemplateDir . "/" . inTemplateName . ".goilTemplate";
#          pathList += !fullTemplatePath;
#          found := [fullTemplatePath fileExists];
#          if found then
#            #displayPathList !pathList;
#            grammar template_grammar in [@lstring new !fullTemplatePath !here] !inPrefix !inPath !inTemplateDirectory !inTemplateVariableMap !?ioResultingString;
#          end if;
#        end if;
#        if not found then
#          outNoErrorOccured := false;
#          if inErrorIfNotFound then
#            @string m := "cannot find a valid path for the '" . inTemplateName . "' template; I have tried:";
#            foreach pathList do
#              m .= "\n  - '" . mValue . "';";
#            end foreach;
#            error inTemplateName :m;
#          end if;
#        end if;
#      end if;
#    end if;
#  end if;
#end routine;

#------------------------------------------------------------------------------*

