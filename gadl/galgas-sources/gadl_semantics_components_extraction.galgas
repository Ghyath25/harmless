#createFile
  

#############################################################################
## getting components inside an expression
#############################################################################
#default: not adding nodes.
method @expression getComponents 
  ?let  @graphNodeList unused nextNodeList # list of successors.
  !  @graphNodeList rootNodeList {
  rootNodeList = @graphNodeList. emptyList
}

# * expDummy              -> nothing
# * expIntConst           -> nothing
# * expInstructionSize    -> nothing
# * expInstructionAddress -> nothing
# * expIdf                -> done -> here is the hard work!
# * expCast               -> done
# * expBitFieldOp         -> done
# * expUnary              -> done
# * expBinary             -> done

#@cIdf                    -> nothing.

#override method @cTabIndice  getComponents
#  ?? @graphNodeList nextNodeList # list of successors.
#  !  @graphNodeList rootNodeList # the root (may have 0, 1 or more nodes).
#:
#  [expIndice getComponents !nextNodeList ?rootNodeList];
#end method;

override method @expCast getComponents
  ?let  @graphNodeList nextNodeList # list of successors.
  !  @graphNodeList rootNodeList {
  [expCasted getComponents !nextNodeList ?rootNodeList]
}

override method @expBitFieldOp  getComponents
  ?let  @graphNodeList nextNodeList # list of successors.
  !  @graphNodeList rootNodeList {
  [expField getComponents !nextNodeList ?rootNodeList]
}

override method @expUnary  getComponents
  ?let  @graphNodeList nextNodeList # list of successors.
  !  @graphNodeList rootNodeList {
  [exp getComponents !nextNodeList ?rootNodeList]
}

#internal routine used by "getComponents" of @cExpression that
#handle 2 sub-expressions.
proc getComponentsIn2Expressions
  ?let  @expression expRight
  ?let  @expression expLeft
  ?let  @graphNodeList nextNodeList # list of successors.
  !  @graphNodeList rootNodeList {
  [expRight getComponents !nextNodeList ?rootNodeList]
  @graphNodeList currentNextNodeList = nextNodeList
  if [rootNodeList length] > 0 then #there is a new root.
    currentNextNodeList = rootNodeList
  end
  [expLeft getComponents !currentNextNodeList ?rootNodeList]
  if [rootNodeList length] == 0 then #nothing in the left part. return the right exp result.
    rootNodeList = currentNextNodeList
  end
}

override method @expBinary  getComponents
  ?let  @graphNodeList nextNodeList # list of successors.
  !  @graphNodeList rootNodeList {
  getComponentsIn2Expressions ( !expRight !expLeft !nextNodeList ?rootNodeList)
}

override method @expIdf getComponents
  ?let  @graphNodeList nextNodeList # list of successors.
  !  @graphNodeList rootNodeList {
  rootNodeList = @graphNodeList. emptyList
  switch detectedType
    case unknown,registerAccess,registerBitField,localVar,periphCall,timing,signal: #nothing.
    case structMember,tabularAccess: #maybe in parameter, or in the tab index.
      @graphNodeList currentNextNodeList = nextNodeList
      for > () in  idfList do
        for > (@expression exp ...) in  paramList do #foreach with reverse order.
          [exp getComponents !currentNextNodeList ?rootNodeList]
          if [rootNodeList length] > 0 then #there is a new root.
            currentNextNodeList = rootNodeList
          end
        end
      end
      if [rootNodeList length] == 0 then #last chunk was not a root, get back the target.
        rootNodeList = currentNextNodeList
      end
    case componentCall,memoryAccess:
      #parameters first.
      @graphNodeList currentNextNodeList = nextNodeList
      for > () in  idfList do      
        for > (@expression exp ...) in  paramList do #foreach with reverse order.
          [exp getComponents !currentNextNodeList ?rootNodeList]
          if [rootNodeList length] > 0 then #there is a new root.
            currentNextNodeList = rootNodeList
          end
        end
      end
      #then component call.
      var data =@lstringlist.emptyList{}
      for () in  idfList do
        data += !idf
      end
      rootNodeList = @graphNodeList. emptyList
      @string uid = getGraphNodeUniqueId(![idfList string] !currentNextNodeList)
      rootNodeList += !@graphNode. new { !data !currentNextNodeList !uid}
  end
}

#############################################################################
## getting components inside instructions
#############################################################################

#default: not adding nodes.
method @instruction getComponents 
  ?let  @graphNodeList unused nextNodeList # list of successors.
  !  @graphNodeList rootNodeList {
  rootNodeList = @graphNodeList. emptyList
}

override method @instFunctionCall getComponents ##this is the related instruction.
  ?let  @graphNodeList nextNodeList # list of successors.
  !  @graphNodeList rootNodeList {
  [exp getComponents !nextNodeList ?rootNodeList]
}

override method @instIf getComponents 
  ?let  @graphNodeList nextNodeList # list of successors.
  !  @graphNodeList rootNodeList {
  @graphNodeList IfNodeList   = @graphNodeList. emptyList
  @graphNodeList ElseNodeList = @graphNodeList. emptyList
  getComponentsInInstructionList ( !instIfList   !nextNodeList ?IfNodeList)
  getComponentsInInstructionList ( !instElseList !nextNodeList ?ElseNodeList)
  MergeGraphNodeList ( ?rootNodeList !IfNodeList !ElseNodeList)
#  rootNodeList := IfNodeList . ElseNodeList;
}

override method @instAssignment getComponents 
  ?let  @graphNodeList nextNodeList # list of successors.
  !  @graphNodeList rootNodeList {
  [exp getComponents !nextNodeList ?rootNodeList]
}

#recursive routine.
proc getComponentsInInstructionList
  ?let  @instructionList instList   # the instruction list to process
  ?let  @graphNodeList nextNodeList # list of successors.
  !  @graphNodeList rootNodeList {
  rootNodeList = @graphNodeList. emptyList
  @graphNodeList currentNextNodeList = nextNodeList
  for > () in  instList do #foreach with reverse order.
    [inst getComponents !currentNextNodeList ?rootNodeList]
    if [rootNodeList length] > 0 then #there is a new root.
      currentNextNodeList = rootNodeList
    end
  end
  if [rootNodeList length] == 0 then #last chunk was not a root, get back the target.
    rootNodeList = currentNextNodeList
  end
}

#############################################################################
## extraction routines.
#############################################################################

proc getInstructionComponentGraph
  ?let  @decodedBehaviorMap decodedBehaviorMap 
  ?let  @defaultSection defaultValues #user fetch.
  !  @graphNodeMap componentAccessMap {
  componentAccessMap = @graphNodeMap. emptyMap
  for (@lstring instName * @instructionList instListConst *) in  decodedBehaviorMap do
    @instructionList instList = instListConst #local copy.
    #we add the implicit fetch.
    var idfList =@idfItemList.emptyList{}
    if not isThereAUserFetch(!defaultValues) then
      idfList += !lstringWith(!"__fetch_component") !@idfItemType. basic !@expressionlist. emptyList !@idfItemSpecType. standard !"" !""
      idfList += !lstringWith(!"__implicit_fetch") !@idfItemType. functionCall !@expressionlist. emptyList !@idfItemSpecType. standard !"" !""
    else
      idfList += ![defaultValues fetchComponentName] !@idfItemType. basic !@expressionlist. emptyList !@idfItemSpecType. standard !"" !""
      idfList += ![defaultValues fetchMethodName] !@idfItemType. functionCall !@expressionlist. emptyList !@idfItemSpecType. standard !"" !""
    end
    @varBaseType dummyType = @varBaseType. new { !@varKind. unsigned !0 !@location.here}
    @expIdf idf = @expIdf. new { !dummyType !idfList !@idfType. componentCall !false}

    @instruction fetch = @instFunctionCall. new { !@location.here !idf}
    [!?instList insertAtIndex !fetch !0]
    #ok, done. Now, construct the graph.
    var nextNodeList =@graphNodeList.emptyList{}
    @graphNodeList rootNodeList
    getComponentsInInstructionList ( !instList !nextNodeList ?rootNodeList)
    @graphNode nodeRoot
    #if there is more than 1 root:
    if [rootNodeList length] > 1 then
      @string uid = getGraphNodeUniqueId(!"root" !rootNodeList)
      nodeRoot = @graphNode. new { !@lstringlist. emptyList !rootNodeList !uid}
    elsif [rootNodeList length] == 1 then
      [rootNodeList first ?nodeRoot]
    else
      #empty node.
      @string uid = getGraphNodeUniqueId(!"root" !rootNodeList)
      nodeRoot = @graphNode. new { !@lstringlist. emptyList !@graphNodeList. emptyList !uid}
      #message "No root nodes found\n";
    end
    #Ok, got the graph in 'nodeRoot'. Store it.
    [!?componentAccessMap insertKey !instName !nodeRoot]
  end
}

proc generateComponentAccessGraphViz
  ?let  @graphNodeMap componentAccessMap
  ?let  @string exportDir {
  for (@lstring instName @graphNode nodeRoot) in  componentAccessMap do
    #get the GraphViz output content.
    @string graphVizContent = graphNodeOutput(!nodeRoot ![instName string])
    #message "create file for ".[instName string]." (".[[graphVizContent length] string].")\n";
    createFile ( !exportDir+"/log" ![instName string]+".dot" !graphVizContent)
  end
}

# vim:ft=galgas:ts=2:sw=2:tw=0
