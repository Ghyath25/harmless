# new approach, get static info (including branch detection).

# donc staticInfo est une map (clé l'instruction traitée) qui contient 
# => une map (clé registre en écriture)
#    Pour chaque registre écrit:
#     => conditionnellement?
#     => valeur connu statiquement? => n'est pas redondant avec l'expression?
#     => expression pour connaitre la valeur dynamiquement.
# => une map (clé registre en lecture)
#     => conditionnellement?

# un truc à mettre à jour: TODO TODO TODO!!
# si on fait un accès à un composant qui retourne une valeur… ça ne marchera pas
# car l'accès est vu à l'intérieur d'une expression. Il faut toutes les parser :-/
# TODO: gestion des accès mémoire forcément, ça casse tout :-/

# TODO: pour le isConst, il suffit de parcourir la liste des depList opur tester 
#       le paramètre isConst… à moins que ce soit le valueUnkown?
map @staticInfoMapRegWrite {
  @expIdfList depList      #dependancies, i.e. registers and local vars that affect values.
  @bool conditionnalAccess #is register access conditionnal?
  @bool valueUnknown       #true if value may not be known statically.
  @expression exp          #expression to get value if available
  insert insertKey error message "the '%K' for static reg write info is already defined in %L" 
  search searchKey error message "the '%K' for static reg write info is not defined"
}

map @staticInfoMapRegRead {
  @bool conditionnalAccess #is register access conditionnal?
  insert insertKey error message "the '%K' for static reg read info is already defined in %L" 
  search searchKey error message "the '%K' for static reg read info is not defined"
}

map @staticInfoMap {
  @staticInfoMapRegWrite regWriteAccessMap
  @staticInfoMapRegRead regReadAccessMap
  insert insertKey error message "the '%K' for static info is already defined in %L" 
  search searchKey error message "the '%K' for static info is not defined"
}

getter @decodedBehaviorMap getStaticInfo
  ?let  @varIdfStruct idfStruct
  -> @staticInfoMap staticInfoMap
{
  staticInfoMap = @staticInfoMap.emptyMap
  for () in  self do
    @symbolValueMap symbolValueMap = .emptyMap
    @staticInfoMapRegWrite regWriteAccessMap = .emptyMap
    @staticInfoMapRegRead regReadAccessMap = .emptyMap
#    if [lkey string] == "e200z4_SP_Check_abs_bc_bd_bi_bo_d_f_statPred_updatelr_z" then #complexe
#    if [lkey string] == "e200z4_SP_Check_abs_b_li_updatelr" then #simple
     if [lkey string] == "e200z4_br_half_load_notu_ra_rb_rd_x" then

      [instList processStaticInfo !idfStruct !?symbolValueMap !?regWriteAccessMap !?regReadAccessMap !true]
    end
    #message "instruction "+[lkey string]+":\n"
    [[regWriteAccessMap removeDuplicates] debugRegWriteAccessMap]
    [!?staticInfoMap insertKey !lkey ![regWriteAccessMap removeDuplicates] !regReadAccessMap]
  end
}

method @instructionList processStaticInfo
  ?let  @varIdfStruct idfStruct
  ?! @symbolValueMap symbolValueMap
  ?! @staticInfoMapRegWrite regWriteAccessMap
  ?! @staticInfoMapRegRead regReadAccessMap
  ?let @bool goInsideFunc
{
  for > () in self do #start with last instruction.
    [inst processStaticInfo !idfStruct !?symbolValueMap !?regWriteAccessMap !?regReadAccessMap !goInsideFunc]
    #message [inst generateCode !0 !@codeCtx. C]+"\n";
  end
}

method @instruction processStaticInfo
  ?let  @varIdfStruct unused idfStruct
  ?! @symbolValueMap unused symbolValueMap
  ?! @staticInfoMapRegWrite unused regWriteAccessMap
  ?! @staticInfoMapRegRead unused regReadAccessMap
  ?let @bool unused goInsideFunc
  {}

func updateDepsForVar
  ?let @staticInfoMapRegWrite regWriteAccessMap
  ?let @lstring varNameWritten
  ->@staticInfoMapRegWrite newRegWriteAccessMap
{
  #we have for instance: C = A+B => C depends on A and B
  # so, if C is a dep of another idfs, is should be:
  # - removed from the list of deps to these idfs => fait.
  # - and replaced by A and B => à rajouter
  # - update the expression...
  newRegWriteAccessMap = @staticInfoMapRegWrite.emptyMap
  for () in regWriteAccessMap do
    #foreach reg that is written
    message "check "+[lkey string]+" with "+[varNameWritten string]+"\n"
    @expIdfList idfDepList = .emptyList
    for (idfDep) in depList do#@expIdf idf
      #we check each dependency
      @bool depUpdated = false
      if [idfDep detectedType] == @idfType.registerAccess |
         [idfDep detectedType] == @idfType.localVar then
         [[idfDep idfList] first ?var @lstring varNameDep ?* ?* ?* ?* ?* ?*]
         message "\tdep "+[varNameDep string]+"\n"
         #one dependency is 'varNameWritten'
         if [varNameDep string] == [varNameWritten string] then
           message "\t\tupdate "+[varNameWritten string]+" in "+[lkey string]+"\n"
           depUpdated=true
         end
      end
      #add all except the updated one
      if not depUpdated then
        #not updated => the var write does not depends on varNameWritten
        message "\t\tadd "+[[idfDep idfList] string]+"\n"
        idfDepList += !idfDep
      else
        #updated => the var write depends on varNameWritten,
        #we should replace it by the dependencies of 'varNameWritten'
        message "\t\treplacement of "+[varNameWritten string]+" with ";
        [regWriteAccessMap searchKey !varNameWritten ?@expIdfList depWList ?* ?* ?*]
        idfDepList += depWList
      end
    end
    [!?newRegWriteAccessMap insertKey !lkey !idfDepList !conditionnalAccess !valueUnknown !exp]
  end
}

method @staticInfoMapRegWrite debugRegWriteAccessMap
{
  for () in self
  before message "deps:\n"
  do
    message "\t"+[lkey string]+":"
    for (idfDep) in depList do
    message [[idfDep idfList] string]
    between message ", "
    end
  between message "\n"
  after message "\n"
  end
}

#in an assigment, we detect the dependencies of a var access.
override method @instAssignment processStaticInfo
  ?let  @varIdfStruct idfStruct
  ?! @symbolValueMap unused symbolValueMap
  ?! @staticInfoMapRegWrite regWriteAccessMap
  ?! @staticInfoMapRegRead unused regReadAccessMap
  ?let @bool unused goInsideFunc
{
  #tmp: => TODO: registerBitField, 2 valeurs. Pas dur.
  if [idfAssign detectedType] == @idfType.registerAccess |
     [idfAssign detectedType] == @idfType.localVar then
    [[idfAssign idfList] first ?var @lstring varNameWritten ?* ?* ?* ?* ?* ?*]
#    message "**** processing write of "+[varNameWritten string]+"****\n"
    #get deps.
    @expIdfList depList = .emptyList
    depList = [exp getIdf !depList !idfStruct]

    #insert reg access (write) into map
    if not [regWriteAccessMap hasKey ![varNameWritten string]] then 
      #if it is already ok, don't update, as we
      #get instructions in reverse order.
      #TODO: conditionnalAccess to be computed.
      #TODO: value known
      [!?regWriteAccessMap insertKey !varNameWritten !depList !false !false !exp]
    end
    #We update dependencies
    regWriteAccessMap = updateDepsForVar(!regWriteAccessMap !varNameWritten)
    #final    
#    debugRegWriteAccessMap(!regWriteAccessMap)
  end
}

override method @instFunctionCall processStaticInfo
  ?let @varIdfStruct idfStruct
  ?! @symbolValueMap symbolValueMap
  ?! @staticInfoMapRegWrite regWriteAccessMap
  ?! @staticInfoMapRegRead regReadAccessMap 
  ?let @bool goInsideFunc
  {
    switch [exp detectedType]
    case unknown,structMember,localVar,tabularAccess,registerAccess,registerBitField:
      error loc: "internal error: invalid detected type for a function call"+
                 [[exp detectedType] string]
    case componentCall:
      if goInsideFunc then
        #TODO: alias de variables.
        @instructionList instList = [idfStruct.componentMap getInstList ![exp idfList]]
        @parameterDefList paramDef = [idfStruct.componentMap getParamDefList ![exp idfList]]
        @expressionlist paramList = [[[self exp] idfList] paramListAtIndex !1]

        @varIdfStruct nextIdfStruct = idfStruct 
        [paramDef getInlinedInsts !paramList !@expressionContext.component 
                                  !loc !loc
                                  !idfStruct !?nextIdfStruct 
                                  ?@instructionList instListCall]
        @instructionList fullInstList = instListCall+instList
#        message "code\n"+generateCode(!fullInstList !1 !@codeCtx.C)+"\n"
        [fullInstList processStaticInfo !idfStruct !?symbolValueMap !?regWriteAccessMap !?regReadAccessMap !goInsideFunc]

      end
    case memoryAccess:
      #TODO: on peut recuperer de l'info ici
    case periphCall,timing,signal: #nothing here.
  end
}

override method @instIf processStaticInfo
  ?let @varIdfStruct idfStruct
  ?! @symbolValueMap symbolValueMap
  ?! @staticInfoMapRegWrite regWriteAccessMap
  ?! @staticInfoMapRegRead regReadAccessMap 
  ?let @bool goInsideFunc
{
  @staticInfoMapRegWrite regWriteAccessMapBefore = regWriteAccessMap
  #in an if statement, it depends on both if and else.
  [instIfList processStaticInfo !idfStruct !?symbolValueMap !?regWriteAccessMap !?regReadAccessMap !goInsideFunc]
  [instElseList processStaticInfo !idfStruct !?symbolValueMap !?regWriteAccessMap !?regReadAccessMap !goInsideFunc]
  #moreover, for each reg that have been written inside a instIf block, 
  #it also depends on the condition expression.    
  for (lkey * * * *) in regWriteAccessMap
#  before message "***IF***\n"
  do
    if not [regWriteAccessMapBefore hasKey ![lkey string]] then
      @expIdfList depList = [regWriteAccessMap depListForKey ![lkey string]]
      depList += [cond getIdf !depList !idfStruct]
      [!?regWriteAccessMap setDepListForKey !depList ![lkey string]]
#      message "\t => "+[lkey string]+"\n"
    end
#  after message "***##***\n"
  end
}

#there are duplicates in the dependencies.
getter @staticInfoMapRegWrite removeDuplicates 
 -> @staticInfoMapRegWrite newInfoMap
{
  newInfoMap = .emptyMap
  for () in self do
    @stringset set=.default
    @expIdfList updatedDepList =.emptyList
    for (@expIdf idf) in depList do
      @string key = [idf string]
      if not [set hasKey !key] then 
        #not a duplicate
        updatedDepList += !idf
        set += !key
      end
    end
    [!?newInfoMap insertKey !lkey !updatedDepList 
                  !conditionnalAccess !valueUnknown !exp]
  end
}

##################################################################
##################################################################
##################################################################
# TODO
# Ce qui suit est l'ancienne version!!!!
#
##################################################################
##################################################################
##################################################################



##################################################################
## This method:
## * detect if PC can be modified (i.e. is it a branch instruction?)
## * generate the code (instructionList) to calculate the branch Target.
## It should go inside components'method code
## if there is a condition ('if'), then there are different cases:
##   * the evaluation of the condition is const -> unconditional branch -> no pb.
##   * only one branch can modifiy the PC -> conditional branch. 
##     We only take the branch that updates PC.
##   * 2 branch modify PC. With is an unknown behavior 
##     -> impossible to detect statically.
##################################################################
#Main routine and functions:
# map @branchInstMap (map definition)
# method:
# * @branchInstMap updateTemplateForJumpInstructions : template export.
# * @branchInstMap debug : debug message
# reader:
# * @branchInstMap getBranchInstructions: populate the map.
# other:
# * @instruction processBranchTarget (and sub-classes).

#at this date, cannot get the static target of branch (as in gadl1).
map @branchInstMap {
  @instructionList targetEvalInstList
  @bool noCond
  @bool unknownStaticTarget

  insert insertKey error message "the '%K' branch instruction is already defined in %L" 
  search searchKey error message "the '%K' branch instruction is not defined"
}

method @branchInstMap updateTemplateForJumpInstructions
  ?! @TfieldMap templateStruct {
  var branchTpl =@TfieldMapList.emptyList{}
  for (instName instList noCond unknownStaticTarget) in self do
    var branchTplBody =@TfieldMap.emptyMap{}
    addLStringValue ( !?branchTplBody !"name" !instName)
    #********** TODO ************
#    message "*************************\n"
#    message [instName string]+"\n"
#    message generateCode(!instList !1 !@codeCtx.C)  
    addStringValue(!?branchTplBody !lstringWith(!"code") !generateCode(!instList !1 !@codeCtx.C))  
    addBoolValue(!?branchTplBody !lstringWith(!"unconditionnal") !noCond)
    addBoolValue(!?branchTplBody !lstringWith(!"unknown") !unknownStaticTarget)
    #********** TODO ************    
    
    branchTpl += !branchTplBody
  end
  addListValue ( !?templateStruct !lstringWith(!"branchInstList") !branchTpl)
}

method @branchInstMap debug {
  message "branch detection\n"
  for () in  self do
    message "####################################################################\n"
    message "Instruction "+[lkey string]+" : "
    if noCond then message "unconditionnal, " else message "conditionnal, " end
    if unknownStaticTarget then message "unkown target" else message "target OK" end
    if not unknownStaticTarget then
      message "##########################\n"
      message generateCode(!targetEvalInstList !1 !@codeCtx. C)
    end
    message "####################################################################\n"
  end
}

#return list of instructions that can modify the PC
getter @decodedBehaviorMap getBranchInstructions
  ?let  @varIdfStruct idfStruct
  -> @branchInstMap branchInstMap
{
  branchInstMap = @branchInstMap.emptyMap
  for () in  self do
    var targetEvalInstList = @instructionList.emptyList
    #becomes true if PC may be written
    @bool isABranch = false
    #is true if PC is always written (unconditional branch)
    @bool noCond = true
    #become true if it can't be resolved statically (indirect branch for instance).
    @bool unknownStaticTarget = false
    #stores value of symbol if they are constants.
    var symbolValueMap = @symbolValueMap.emptyMap

    for () in  instList while not isABranch do
      targetEvalInstList += !inst
      [inst processBranchTarget !idfStruct !?targetEvalInstList !?isABranch !?noCond !?unknownStaticTarget !?symbolValueMap]
    end

    if isABranch then
      [!?branchInstMap insertKey !lkey !targetEvalInstList !noCond !unknownStaticTarget]
    end
  end
}

#back from gadl1

abstract method @instruction processBranchTarget 
  ?let  @varIdfStruct idfStruct 
  ?! @instructionList unused targetEvalInstList
  ?! @bool isABranch
  ?! @bool noCond
  ?! @bool unknownStaticTarget
  ?! @symbolValueMap symbolValueMap

override method @instError processBranchTarget 
  ?let  @varIdfStruct unused idfStruct 
  ?! @instructionList unused targetEvalInstList
  ?! @bool unused isABranch
  ?! @bool unused noCond
  ?! @bool unused unknownStaticTarget
  ?! @symbolValueMap unused symbolValueMap {
}

override method @instMessage processBranchTarget 
  ?let  @varIdfStruct unused idfStruct 
  ?! @instructionList unused targetEvalInstList
  ?! @bool unused isABranch
  ?! @bool unused noCond
  ?! @bool unused unknownStaticTarget
  ?! @symbolValueMap unused symbolValueMap {
}

override method @instPrint processBranchTarget 
  ?let  @varIdfStruct unused idfStruct 
  ?! @instructionList unused targetEvalInstList
  ?! @bool unused isABranch
  ?! @bool unused noCond
  ?! @bool unused unknownStaticTarget
  ?! @symbolValueMap unused symbolValueMap {
}

override method @instNop processBranchTarget 
  ?let  @varIdfStruct unused idfStruct 
  ?! @instructionList unused targetEvalInstList
  ?! @bool unused isABranch
  ?! @bool unused noCond
  ?! @bool unused unknownStaticTarget
  ?! @symbolValueMap unused symbolValueMap {
}

override method @instIf processBranchTarget 
  ?let  @varIdfStruct idfStruct 
  ?! @instructionList targetEvalInstList
  ?! @bool isABranch
  ?! @bool noCond
  ?! @bool unknownStaticTarget
  ?! @symbolValueMap symbolValueMap {
  #first evaluate condition expression.
  @expression expEval = [cond eval !symbolValueMap]
  @bool expConst = false #true if the expression is constant -> can be evaluated statically
  @bool expState = false #result of the condition (usable only if expConst is true).
  cast expEval
    case == @expIntConst constVal :
      expConst = true
      expState = ([constVal value] != 0L)
    else
  end

  @bool isABranchIf = isABranch #isABranch in 'if' instruction flow
  @bool isABranchElse = isABranch #isABranch in 'else' instruction flow
  var targetEvalInstListIf =@instructionList.emptyList{}
  var targetEvalInstListElse =@instructionList.emptyList{}

  if not expConst | expState then #evaluated if condition is not const or if condition is true
    #TODO: variable allocation not taken into account in instruction if block.
    @symbolValueMap symbolValueMapIf = symbolValueMap
    for () in  instIfList while not isABranchIf do
        targetEvalInstListIf += !inst
        [inst processBranchTarget !idfStruct !?targetEvalInstListIf !?isABranchIf !?noCond !?unknownStaticTarget !?symbolValueMapIf]
    end
  end
  if not expConst | not expState then #evaluated if condition is not const or if condition is false
    @symbolValueMap symbolValueMapElse = symbolValueMap
    for () in  instElseList while not isABranchElse do
        targetEvalInstListElse += !inst
        [inst processBranchTarget !idfStruct !?targetEvalInstListElse !?isABranchElse !?noCond !?unknownStaticTarget !?symbolValueMapElse]
    end
  end

  #detect unconditional branches.
  if (not expConst) & (isABranchIf != isABranchElse) then
    #only one instruction list updated the PC. This is a conditional branch.
    noCond = false
    isABranch = true #as at least one instruction flow changed PC.
  else
    if expConst then
      if expState then isABranch = isABranchIf
      else isABranch = isABranchElse
      end
    else
      isABranch = isABranchIf #as they are identical.
    end
  end
  #If the 2 branches change PC, the target can't be detected statically.
  if (not expConst) & isABranchIf==true & isABranchElse==true then
    unknownStaticTarget = true
  end
  #update the targetEvalInstList to generate the code to detect the branch.
  if isABranch then
    if isABranchIf then
      targetEvalInstList = targetEvalInstList+targetEvalInstListIf
    else
      targetEvalInstList = targetEvalInstList+targetEvalInstListElse
    end
  end
}

override method @instDeclaration processBranchTarget 
  ?let  @varIdfStruct unused idfStruct 
  ?! @instructionList unused targetEvalInstList
  ?! @bool unused isABranch
  ?! @bool unused noCond
  ?! @bool unused unknownStaticTarget
  ?! @symbolValueMap unused symbolValueMap {
}

override method @instTypeDefinition processBranchTarget 
  ?let  @varIdfStruct unused idfStruct 
  ?! @instructionList unused targetEvalInstList
  ?! @bool unused isABranch
  ?! @bool unused noCond
  ?! @bool unused unknownStaticTarget
  ?! @symbolValueMap unused symbolValueMap {
}

override method @instLoop processBranchTarget 
  ?let  @varIdfStruct unused idfStruct 
  ?! @instructionList unused targetEvalInstList
  ?! @bool unused isABranch
  ?! @bool unused noCond
  ?! @bool unused unknownStaticTarget
  ?! @symbolValueMap unused symbolValueMap {
  #TODO: does not explore inside a loop.
  ##search in instruction list.
  #foreach code (@cInstruction inst) while not isABranch do
  #    [inst processBranchTarget !idfStruct !?targetEvalInstList !?isABranch !?noCond !?unknownStaticTarget !?symbolValueMapInComponent];
  #end foreach ;
}

#import "gadl_semantics_implementation_code_generation.gSemantics";

getter @varMap isProgramCounter
  ?let  @expIdf idf
  -> @bool result {
  result = false
  if [idf detectedType] == @idfType. registerAccess then
    @lstring name
    [[idf idfList] first ?name ?* ?* ?* ?* ?* ?*]
    if [self hasKey ![name string]] then
      @varClass varClass
      [self searchKey !name ?* ?* ?varClass ?*]
      if varClass == @varClass. programCounter then
        result = true
      end
    end
  end
}

override method  @instAssignment processBranchTarget 
  ?let  @varIdfStruct idfStruct 
  ?! @instructionList unused targetEvalInstList
  ?! @bool isABranch
  ?! @bool unused noCond
  ?! @bool unused unknownStaticTarget
  ?! @symbolValueMap symbolValueMap {
  if [idfStruct.varMap isProgramCounter !idfAssign] then
    isABranch = true
  end
  if [idfAssign detectedType] == @idfType. registerAccess |
     [idfAssign detectedType] == @idfType. localVar then
     [[idfAssign idfList] first ?var @lstring name ?* ?* ?* ?* ?* ?*]
     updateSymbolMap ( !?symbolValueMap !name !exp)
  end
}

override method @instReturn processBranchTarget 
  ?let  @varIdfStruct unused idfStruct 
  ?! @instructionList unused targetEvalInstList
  ?! @bool unused isABranch
  ?! @bool unused noCond
  ?! @bool unused unknownStaticTarget
  ?! @symbolValueMap unused symbolValueMap {
}

method @varIdfStruct getComponentMethodCode
  ?let  @expIdf idf
  ! @instructionList instList 
  ! @parameterDefList param
  ! @expressionlist methParamList {
  #check that it is a component call.
  @idfItemList idfListCopy = [idf idfList]
  #first item  -> component name
  #second item -> method name
  [!?idfListCopy popFirst ?var @lstring componentName ?var @idfItemType CompType ?var @expressionlist compParamList ?* ?* ?* ?*]
  if [self.componentMap hasKey ![componentName string]] then 
    #ok, it is a component call.
    [!?idfListCopy popFirst ?var @lstring methodName ?var @idfItemType methType ?methParamList ?* ?* ?* ?*]
    #and only 2 items.
    if [idfListCopy length] != 0 then
      error componentName: "a component call should have bot the component name and the associated method name"
    end
    #check item types.
    if CompType != @idfItemType. basic then 
      error componentName: "Type of component mismatch."
    end
    if [compParamList length] >0 then
      error componentName : "Cannot handle a tabular of components"
    end
    if methType != @idfItemType. functionCall then 
      error methodName : "The method name is not refered as a function call"
    end
    #Then get code.
    [self.componentMap searchKey !componentName ?var @functionMap methodMap]
    #may check again parameters? only done.
    [methodMap searchKey !methodName ?param ?* ?instList]
  else
    #this is not a component call.
    instList = @instructionList. emptyList
    param = @parameterDefList. emptyList
    methParamList = @expressionlist. emptyList
  end
}

override method @instFunctionCall processBranchTarget 
  ?let  @varIdfStruct idfStruct 
  ?! @instructionList targetEvalInstList
  ?! @bool isABranch
  ?! @bool noCond
  ?! @bool unknownStaticTarget
  ?! @symbolValueMap symbolValueMap {
  [idfStruct getComponentMethodCode !exp ?var @instructionList instList ?var @parameterDefList paramDef ?var @expressionlist paramList]
  #
  #update the symbol map with values in parameter.
  #
  @symbolValueMap symbolValueMapInComponent = symbolValueMap
  for(* * @lstring name) in  paramDef do
    if [symbolValueMapInComponent hasKey ![name string]] then
      #same name used in component. the symbol is now associated to the one in the component.
      [!?symbolValueMapInComponent removeKey !name ?* ?*]
    end
  end
  for (@expression exp) in  paramList,(@bool out * @lstring name) in  paramDef do
    updateSymbolMap ( !?symbolValueMapInComponent !name !exp)
  end

  #then search in instruction list.
  for (@instruction inst) in  instList while not isABranch do
    targetEvalInstList += !inst
    [inst processBranchTarget !idfStruct !?targetEvalInstList !?isABranch !?noCond !?unknownStaticTarget !?symbolValueMapInComponent]
  end

  #update with parameters that are defined as out.
  for (@expression exp) in  paramList,(@bool out * @lstring name) in  paramDef do
    if out then
      @lstring varName = [exp getLocalVar !loc]
      #this is an out expression. Get back the value.
      if [symbolValueMapInComponent hasKey ![varName string]] then
        @uint64 value
        @bool negative
        [symbolValueMapInComponent searchKey !varName ?value ?negative]
        [!?symbolValueMap insertKey !varName !value !negative]
      end
    end
  end
}


# vim:ft=galgas:ts=2:sw=2:tw=0
