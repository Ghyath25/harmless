
  
##
#modifier @lstring cat
##return the idf with the prefix and suffix.
# define struct @varIdfStruct that embedds all the required information to 
#        handle idf in both exp/inst.
#
# -> reader @varIdfStruct getIdfPrePost
# -> reader @varIdfStruct getIdfPost
# -> reader @varIdfStruct string
#
# -> reader @varIdfStruct getReplacedIdf

# -> routine checkTypeExists

#utils..
setter @lstring cat
  ?let  @string str {
  @lstring result = @lstring. new { ![self string]+str ![self location]}
  self = result
}

map @lstringMap
{
  @lstring lstr
  insert insertKey error message "the '%K' element is already defined in %L" 
  search searchKey error message "the '%K' element is not defined"
  remove removeKey error message "the '%K' element is not defined and cannot be removed."
}

#structure that store information that can be accessed
#inside an expression (through idf)

#*****************************************************************************
#* structure that store information that can be accessed
#* inside an expression (through idf)
#*****************************************************************************
#When an idf is found in an expression (in the GetExp reader)
#it searches for an entry in one of the members of this structure.
#in the order defined in the structure.
struct @varIdfStruct {
  @varMap varMap #local vars as well as registers.
  @typedefMap typedefMap #type defined.
  @string idfSuffixName #TODO: one suffix for fields, one for other behaviors, 
  @string idfprefix     #used for idf names (in behaviors for instance), when inlining code.
  @string idfPrefixCore #prefix to access a core (components, mem,..)
  @string idfPrefixLocal #prefix for local vars only (to prevent same names when inlining).TODO remove.
  @componentMap componentMap
  @lstring currentPeriphName #to get prototypes of methods defined in the current periph.
  #@ASTFunctionMap currentPeriphMethods; #to get prototypes of methods defined in the current periph.
  @ASTperipheralMap ASTperipheralMap #peripheral map.
  #if an idf is in this map, it should be replaced in the code. This is used
  #when inlining a function with a 'out' parameter.
  @lstringMap replaceMap
  @memSpaceMap memSpaceMap #memory space (not defined in isa).
  @bool assign #true for left side of an assignment.
  #locals of another class that can be access (using friend classes)
  #It is used with timings that can have their own locals, but can also
  #use the one of the peripheral (which is in another class in the generated codeâ€¦)
  #Access to maps from this varMap use a specific prefix (and have less priority
  #than using vars in the varMap).
  @varMap varMapFriend
  @string friendAccessPrefix 
  
}

getter @varIdfStruct string
  -> @string str {
  #base.
  str = "varMap "+[varMap string]+"\n"
  str += "prefix "+idfprefix+"\n"
  str += "suffix "+idfSuffixName+"\n"
  #components
  for () in  componentMap 
  before str += "componentMap:\n"  
  do
    str+= "\t"+[lkey string]+":\n"
    for () in  methodMap do
      str+= "\t\t"+[lkey string]+"\n"
    end
  end
  #peripherals
  str += [ASTperipheralMap string]
  #replace Map
  str += "replaceMap:\n"  
  
  for () in  replaceMap 
  before str += "replaceMap:\n"  
  do str += "\t"+[lkey string]+" -> "+[lstr string]+"\n"
  end
  #mem spaces
  for () in  memSpaceMap 
  before str += "mem space map :\n"  
  do
    str+= "\t"+[lkey string]+", width "+[width string]+" bits:\n"
    for () in  methodMap do
      str+= "\t\t"+[lkey string]+"\n"
    end
    if isProgram then str += "\t\tmem space to get the program code\n"
    end
  end
}

#return the idf with the prefix and suffix.
getter @varIdfStruct getIdfPrePost
  ?let  @lstring idf
  -> @lstring idfFull {
  @string str = ""
  if idfprefix != "" then
    str = idfprefix+"_"
  end
  str += [[self getIdfPost !idf] string]
  idfFull = @lstring. new { !str ![idf location]}
}

#return the idf with only the suffix.
# -> used with '@..' in ISA description.
getter @varIdfStruct getIdfPost
  ?let  @lstring idf
  -> @lstring idfFull {
  @string str = ""
  str += [idf string]
  if idfSuffixName != "" then
    str += idfSuffixName
  end
  idfFull = @lstring. new { !str ![idf location]}
}

#*****************************************************************************
# reader related to replaceMap.
#*****************************************************************************
getter @varIdfStruct getReplacedIdf
  ?let  @lstring idf
  -> @lstring new {
  if [self.replaceMap hasKey ![idf string]] then
    [self.replaceMap searchKey !idf ?new]
  else
    new = idf
  end
}

#*****************************************************************************
#* useful functions and routines.
#*****************************************************************************
# recursive routine. Check that members of a typedef are defined.
proc checkTypeExists
  ?let  @varAbstractType type
  ?let  @varIdfStruct idfStruct {
  cast [type getFinalType] #get final type -> tabulars.
  case == @varStructType vst : #struct type.
    @lstring typeName = [vst typeName]
    @typedefMemberMap memberList
    [idfStruct.typedefMap searchKey !typeName ?memberList]
    for (* @varAbstractType memberType) in  memberList do
      checkTypeExists ( !memberType !idfStruct)
    end
  else
    #either basic or tabular, no pb.
  end
}

#*****************************************************************************
#* Decorated structures that are used in the idfStruct.
#*****************************************************************************

#decorated structure for components.
map @componentMap {
  @functionMap methodMap
  #idfStruct that embedds local vars (in varMap) and types
  #@varIdfStruct idfStruct;
  #instructions dedicated to type definitions and local var declaration.
  #@instructionList instDeclareList;
  insert insertKey error message "the '%K' component is already defined in %L" 
  search searchKey error message "the '%K' component is not defined"
  remove removeKey error message "the '%K' component is not defined and cannot be removed."
}

#function related structure.
list @parameterDefList {
  @bool out #true out, false in.
  @varAbstractType type
  @lstring name
}

#not yet decorated structure for a function.
map @ASTFunctionMap {
  @parameterDefList param
  @varAbstractType outType
  @ASTInstructionList code
  insert insertKey error message "the '%K' component method is already defined in %L" 
  search searchKey error message "the '%K' component method is not defined"
}

#decorated structure for a function.
map @functionMap {
  @parameterDefList param
  @varAbstractType outType
  @instructionList instList
  insert insertKey error message "the '%K' component method is already defined in %L" 
  search searchKey error message "the '%K' component method is not defined"
}

#not yet decorated map for a peripheral (see gadl_peripheral_AST.gSemantics)
map @ASTperipheralMap
{
  @luint64 size
  @ASTregisterPeriphDefMap ASTregisterPeriphDef
  @ASTFunctionMap ASTFunctionMap
  @ASTInstructionList ASTDeviceDecList
  @ASTInstructionList ASTTypeDefList#type defs.
  @ASTInstructionList ASTLocalVarList
  @varMap varMap #registers and register slices only!
  @ASTTimingMap ASTTimingMap
  insert insertKey error message "the '%K' peripheral is already defined in %L" 
  search searchKey error message "the '%K' peripheral is not defined"
  remove removeKey error message "the '%K' peripheral is not defined. Can't remove it."
}

map @memSpaceMap 
{
  @uint width
  @functionMap methodMap #accessors for ISA.
  @bool isProgram
  @uint stride #computed value, a bit shift.
  insert insertKey error message "the '%K' memory chunk is declared twice." 
  search searchKey error message "the '%K' memory chunk is not defined."
}

method @componentMap checkComponentMethod
  ?let  @lstring componentName
  ?let  @lstring methodName {
  [self searchKey !componentName ?var @functionMap methodMap]
  if [methodMap hasKey ![methodName string]] then
  else error [methodName location]: "No method named :"+ methodName +"in component "+componentName+"\n"
  end
}

getter @ASTperipheralMap string
  -> @string str {
  str = ""
  for () in  self
  before str += "AST peripheral Map:\n"  
  do
    str+= "\t"+[lkey string]+" ("+[size string]+" bytes):\n"
    for () in  ASTregisterPeriphDef 
    before
    str+= "\t\tregisters :\n"
    do
      str+= "\t\t\t"+[lkey string]+"\n"
    end
    for () in  ASTFunctionMap 
    before
    str+= "\t\tmethods :\n"
    do
      str+= "\t\t\t"+[lkey string]+"\n"
    end
  end
}

