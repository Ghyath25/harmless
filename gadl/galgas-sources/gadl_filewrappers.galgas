

private filewrapper a2cppFileWrapper in "../../a2cpp/" {
  #text extensions
}{
  #binary extensions
  ""
}{
  #static templates (resolved at compile time).
}

private filewrapper p2aFileWrapper in "../../p2a/" {
  #text extensions
}{
  #binary extensions
  ""
}{
  #static templates (resolved at compile time).
}

private filewrapper libelfFileWrapper in "../../libelf/" {
  "h"#text extensions
}{
  #binary extensions
  "a"
}{
  #static templates (resolved at compile time).
}

#template file wrapper.. can be used in other files.
filewrapper templateFileWrapper in "../templates" {
  "gadlTemplate"#text extensions
}{
  #binary extensions
}{
  #static templates (resolved at compile time).
}


proc addBinary
  ?let  @filewrapper fw
  ?let  @lstring exportDir
  ?let  @string fileName {
  let @data fileContents = [fw binaryFileContentsAtPath !fileName]
  let @string directory = [exportDir string]+"/bin"
  [directory makeDirectory]
  [fileContents writeToExecutableFile !directory+"/"+fileName]
}

proc addStaticLibrary
  ?let  @filewrapper fw
  ?let  @lstring exportDir
  ?let  @string libName {
  #first generate dirs.
  for () in  [fw allDirectoryPathes] do
    let @string dir = [exportDir string]+mValue
    [dir makeDirectory]
  end
  #second, the static lib (bin)
  @string binaryLibName = libName+".a"
  let @data fileContents = [fw binaryFileContentsAtPath !"lib/"+binaryLibName]
  let @string libDir = [exportDir string]+"/lib"
  [libDir makeDirectory]
  [fileContents writeToFileWhenDifferentContents !libDir+"/"+binaryLibName ?*]
  #then the include dir (and subdirs)
  for () in  [fw allTextFilePathes] do
    let @string contents = [fw textFileContentsAtPath !mValue]
    [contents writeToFileWhenDifferentContents ![exportDir string]+mValue ?*]
  end
}

proc addFileWrappers
  ?let  @lstring exportDir {
  addBinary (        ![filewrapper a2cppFileWrapper]  !exportDir !"a2cpp")
  addBinary (        ![filewrapper p2aFileWrapper]    !exportDir !"p2a")
  addStaticLibrary ( ![filewrapper libelfFileWrapper] !exportDir !"libelf")
}

