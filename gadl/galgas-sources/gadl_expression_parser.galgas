syntax gadl_expression_parser (gadl_lexique) {


#TODO.
#nonterminal  <typeDeclaration> 
#  !  @varType type
#  ?? @containerMap containerMap
#  ?? @lstring compName
#;

#################################################
#
#     Expressions..
#     priority: (highest first)
#     '(' ')'
#     '{' '}'                    -> extract bit field from var
#     '!' '~' '-'                -> unary operators
#     '*' '/' '%'                -> multiply/divide
#     '+' '-'                    -> add/sub
#     '<<' '>>' 'ror' 'rol'      -> shift and rotation
#     '<' '>' '>=' '<='          -> relation
#     '=' '!='                   -> comparison
#     '&'                        -> binary And     -> and
#     '^'                        -> binary Xor     -> xor
#     '|'                        -> binary Or      -> or
#     '&&'                       -> boolean And    -> 
#     '^^'                       -> boolean Xor    -> 
#     '||'                       -> boolean Or     -> 
#     'cat'                        -> concatenation. -> cat
#################################################
# check boolean for '&&' '^^' '||' !
# add -> size = size+1 , must be of the same sign.
# mult -> size = sizeR+sizeL , must be of the same sign.
# div -> size = sizeL, must be of the same sign.
# right shift -> no size change as it could be a formal expression.
# comparison: Warn if sign is different.
#################################################

# TODO:check
#rule <componentMethodCall>
#  !  @lstring methodName
#  !  @parameterCallList param
#  ?? @varMap varMap
#  ?? @containerMap containerMap
#  ?? @lstring componentName
#  !  @bool isBitRegisterAccess #true->reg bit access, false->method call.
#  ?? @bool checkParameters
#  ?? @expressionContext expContext
#:
#  $idf$ ?methodName;
#  @parameterDefList paramDef [emptyList];
#  @functionMap methodMap [emptyMap];
#  @bool ok := false;
#  #is that only a bit access??
#  @string bitAccessName := [componentName string]."_".[methodName string];
#  if [varMap hasKey !bitAccessName] then
#    #yes: register bit access.
#    isBitRegisterAccess := true;
#  else
#    isBitRegisterAccess := false;
#    #no: method access 
#    [containerMap searchKey !componentName ?* ?* ?methodMap ?* ?* ?* ?* ?* ?*];
#    if [methodMap hasKey ![methodName string]] then #component method or component mem access.
#      [methodMap searchKey !methodName ?paramDef ?* ?*];
#      ok := true;
#    end if;
#  end if;
#  select
#    select
#      #no parameters or register bit access.
#      param := [@parameterCallList emptyList];
#    or
#      $.$;
#      @lstring chunkName;
#      $idf$ ?chunkName;
#      methodName := [@lstring new ![methodName string]."_".[chunkName string] !here];
#      if [methodMap hasKey ![methodName string]] then #component chunk mem access.
#        [methodMap searchKey !methodName ?paramDef ?* ?*];
#        ok := true;
#      end if;
#      select
#        select
#          param := [@parameterCallList emptyList];
#        or
#          $.$;
#          @lstring aliasName;
#          $idf$ ?aliasName;
#          methodName := [@lstring new ![methodName string]."_".[aliasName string] !here];
#          if [methodMap hasKey ![methodName string]] then #component alias mem access.
#            [methodMap searchKey !methodName ?paramDef ?* ?*];
#            ok := true;
#          end if;
#          select
#            param := [@parameterCallList emptyList];
#          or
#            <parameterCall> ?param !varMap !containerMap !expContext;
#          end select;
#        end select;
#      or
#        <parameterCall> ?param !varMap !containerMap !expContext;
#      end select;
#    end select;
#  or
#    <parameterCall> ?param !varMap !containerMap !expContext;
#  end select;
#  if ok then
#    if checkParameters then
#      # parameter check.
#      checkCallDefParameters !param !paramDef !here;
#    end if;
#  elsif not isBitRegisterAccess then
#    error here: "The method is not defined for the component.";
#  end if;
#end rule;

#TODO check
#rule <parameterCall>
#  ! @parameterCallList param
#  ?? @varMap varMap
#  ?? @containerMap containerMap
#  ?? @expressionContext expContext
#:
#  param := [@parameterCallList emptyList];
#  $($;
#  select
#  or
#    repeat
#      @cExpression exp;
#      <expression> !varMap ?exp !containerMap !0 !expContext;
#      param += !exp !here;
#      #can not check for parameters here... we can call not yet defined functions. TODO elsewhere.
#    while
#    $,$;
#    end repeat;
#  end select;
#  $)$;
#end rule;

#TODO check
#rule <functionDef>
#  ?? @varMap varMap
#  !  @lstring functionName
#  !  @parameterDefList param
#  !  @varMap functionVarMap
#:
#
#  functionVarMap := [@varMap mapWithMapToOverride !varMap];
#  param := [@parameterDefList emptyList];
#  $idf$ ?functionName;
#  select
#  or
#    @string prefix :=  [functionName string]."_";
#    <parameterDef> !prefix !?param !?functionVarMap;
#  end select;
#end rule;

# TODO: check.
#rule <parameterDef>
#  ?? @string prefix
#  ?! @parameterDefList param
#  ?! @varMap varMap
#:
#  $($;
#  select
#  or
#    repeat
#      @bool out;
#      select
#        out := false;
#      or
#        $out$;
#        out := true;
#      end select;
#      @varType type;
#      @containerMap containerMap := [@containerMap emptyMap];
#      @TypeStructDefMap TypeList [emptyMap];
#      @lstring compName := [@lstring new !"CompNameNotdefined paramedef" !here];
#      
#      <typeDeclaration> ?type !containerMap  !compName;
#      @lstring  paramName;
#      $idf$ ?paramName;
#      #var is constant if not declared out. else the variable should be modified.
#      @classicVar var := [@classicVar new !type !not out !prefix !""];
#      [!?varMap insertKey !paramName !var]; #TODO: no tabulars?
#      param += !out !paramName !var;
#    while
#    $,$;
#    end repeat;
#  end select;
#  $)$;
#end rule;

#TODO check
#rule <pathElement>
#  ?? @varMap varMap
#  ?? @containerMap containerMap
#  ?? @uint tmpId
#  ?? @expressionContext expContext
#  !  @pathElement node
#:
#  @pathElement child;
#  @lstring name;
#  $idf$ ?name;
# 
#  child :=[@nullChild new ];
#  @parameterCallList param [emptyList];
#  select 
#    node := [@nodeIdf new !child !child !name];
#  or
#   <parameterCall> ?param !varMap !containerMap !expContext ;
#   node := [@parameterCallElement new !child !child !name !param];
#   #log param;
# end select;
# select 
# 
# or 
#   $[$;
#   @cExpression expTab;
#   <expression> !varMap ?expTab !containerMap !tmpId !expContext;
#   #if [node isParameterCall] then
#    #  node := [@tabElementParameterCall new !child !child!name !expTab !param ];
#   #else 
#      node := [@tabElement new !child !child !name !expTab];
#   #end if;
#   $]$ ;
#
# end select;
#end rule;
#
#TODO: Check
#rule <pathName>
#  ?? @varMap varMap
#  ?? @containerMap containerMap
#  ?? @uint tmpId
#  ?? @expressionContext expContext
#  ?? @lstring  currentComponent
#  
#  !@cExpression outExp
#:
#  @pathElement node; 
#  node :=[@rootChild new ![@nullChild new ] ![@nullChild new ]];
#  <pathNameRec> !varMap !containerMap !tmpId !expContext !?node;
#  evalPath   !containerMap !varMap!node !currentComponent !tmpId ?outExp;
#   #@varType outType := [@varType new ![@varKind unsigned] !8 !here];
#   #outExp := [@cIntConst new !getTypeListFrom[!outType] !1L] ;
#end rule;
#
#
#
#rule <pathNameRec>
#  ?? @varMap varMap
#  ?? @containerMap containerMap
#  ?? @uint tmpId
#  ?? @expressionContext expContext
#  ?! @pathElement node
#   
#:
#  @pathElement child;
#  <pathElement> !varMap !containerMap !tmpId !expContext ?child;
#  @bool v;
#  v := [child hasChild ];
#  if v then 
#    [!?node setChild  !child];
#  end if;
#  select 
#  or 
#    $.$;<pathNameRec> !varMap !containerMap !tmpId !expContext !?child ;
#  end select ;
#end rule;

rule <paramCall>
  ! @ASTExpressionlist idfExpList {
  idfExpList = @ASTExpressionlist. emptyList
  $($
  select
    #no param
  or
    repeat
     @ASTExpression expCall
     <expression> ?expCall
     idfExpList += !expCall
    while
      $,$
    end
  end
  $)$
}

rule <idf>
  !  @ASTExpression exp {
  var idfList =@ASTidfItemList.emptyList{}
  repeat
    @lstring name
    $idf$ ?name
    var idfExpList =@ASTExpressionlist.emptyList{}
    select
      #just an idf
      idfList += !name !@idfItemType. basic !idfExpList
    or
      #param call
      <paramCall> ?idfExpList
      idfList += !name !@idfItemType. functionCall !idfExpList
    or
      #tab
      @ASTExpression expInd
      $[$ <expression> ?expInd $]$
      idfExpList += !expInd
      idfList += !name !@idfItemType. tabular !idfExpList
    end
  while $.$
  end
  exp = @ASTIdf. new { !@location.here !idfList}
}

rule <factor>
  !  @ASTExpression exp {
  select
    @luint64 cst
    $unumber$ ?cst
    exp = @ASTIntConst. new { ![cst location] ![cst uint64] !false !@varKind. unsigned}
  or
    @luint64 cst
    $snumber$ ? cst
    exp = @ASTIntConst. new { ![cst location] ![cst uint64] !false !@varKind. signed} #only positive values.
  or
    $true$  #understood as '1', type u1
    exp = @ASTIntConst. new { !@location.here !1L !false !@varKind. unsigned}
  or
    $false$  #understood as '0', type u1
    exp = @ASTIntConst. new { !@location.here !0L !false !@varKind. unsigned}
  or
    $instruction$
    select
      $size$
      exp = @ASTExpInstructionSize. new { !@location.here}
    or
      $address$
      exp = @ASTExpInstructionAddress. new { !@location.here}
    end
  or
    $($
    select #### nested expression ###
      <expression> ?exp
    or ######  CAST   ######
      @varKind toKind
      @luint toSize
      select
        $uvar$ ? toSize
        toKind = @varKind. unsigned
      or
        $svar$ ? toSize
        toKind = @varKind. signed
      end #TODO: add fvar.
      $)$$($
      <expression> ?exp
      @varBaseType toType = @varBaseType. new { !toKind ![toSize uint] !@location.here}
      exp = @ASTCast. new { !@location.here !exp !toType}
    end
    $)$
  or #identifier
    <idf> ?exp
  end
}

rule <factorField>
  !  @ASTExpression exp {
  <factor> ?exp
  select
  or
    @ASTfieldList fieldList
    <bitField> ?fieldList
    exp = @ASTBitFieldOp. new { !@location.here !exp !fieldList}
  end
}

rule <unary>
  !  @ASTExpression exp {
  select
    <factorField> ?exp
  or
    @ASTExpression expFactor
    $!$
    <factorField> ?expFactor
    exp = @ASTUnaryOp. new { !@location.here !expFactor !0}
  or
    @ASTExpression expFactor
    $~$
    <factorField> ?expFactor
    exp = @ASTUnaryOp. new { !@location.here !expFactor !1}
  or
    @ASTExpression expFactor
    $-$
    <factorField> ?expFactor
    exp = @ASTUnaryOp. new { !@location.here !expFactor !2}
  end
}

rule <term>
  !  @ASTExpression exp {
  <unary> ?exp
  repeat
  while
    @ASTExpression expR
    $*$ <unary> ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !0}
  while
    @ASTExpression expR
    $/$ <unary> ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !1}
  while
    @ASTExpression expR
    $%$ <unary> ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !2}
  end
}

rule <termShiftRol>
  !  @ASTExpression exp {
  <term> ?exp
  repeat
  while
    @ASTExpression expR
    $+$ <term> ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !3}
  while
    @ASTExpression expR
    $-$ <term> ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !4}
  end
}

rule <termRelation>
  !  @ASTExpression exp {
  <termShiftRol> ?exp
  select
  or
    @ASTExpression expR
    $>>$ <termShiftRol>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !5}
  or
    @ASTExpression expR
    $<<$ <termShiftRol>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !6}
  or
    @ASTExpression expR
    $ror$ <termShiftRol>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !19}
  or
    @ASTExpression expR
    $rol$ <termShiftRol>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !20}
  end
}

rule <ComparisonExpression>
  !  @ASTExpression exp {
  <termRelation> ?exp
  repeat
  while
    @ASTExpression expR
    $<$ <termRelation>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !7}
  while
    @ASTExpression expR
    $>$ <termRelation>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !8}
  while
    @ASTExpression expR
    $<=$ <termRelation>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !9}
  while
    @ASTExpression expR
    $>=$ <termRelation>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !10}
  end
}

rule <binAndTerm>
  !  @ASTExpression exp {
  <ComparisonExpression> ?exp
  repeat
  while
    @ASTExpression expR
    $=$ <ComparisonExpression>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !11}
  while
    @ASTExpression expR
    $!=$ <ComparisonExpression>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !12}
  end
}

rule <binXorTerm>
  !  @ASTExpression exp {
  <binAndTerm> ?exp
  repeat
  while
    @ASTExpression expR
    $&$ <binAndTerm>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !13}
  end
}

rule <binOrTerm>
  !  @ASTExpression exp {
  <binXorTerm> ?exp
  repeat
  while
    @ASTExpression expR
    $^$ <binXorTerm>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !14}
  end
}

rule <boolAndTerm>
  !  @ASTExpression exp {
  <binOrTerm> ?exp
  repeat
  while
    @ASTExpression expR
    $|$ <binOrTerm>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !15}
  end
}

rule <boolXorTerm>
  !  @ASTExpression exp {
  <boolAndTerm> ?exp
  repeat
  while
    @ASTExpression expR
    $&&$ <boolAndTerm>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !16}
  end
}

rule <boolOrTerm>
  !  @ASTExpression exp {
  <boolXorTerm> ?exp
  repeat
  while
    @ASTExpression expR
    $^^$ <boolXorTerm>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !17}
  end
}

rule <catTerm>
  !  @ASTExpression exp {
  <boolOrTerm> ?exp
  repeat
  while
    @ASTExpression expR
    $||$ <boolOrTerm>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !18}
  end
}

rule <expression>
  !  @ASTExpression exp {
  <catTerm> ?exp
  repeat
  while
    @ASTExpression expR
    $cat$ <catTerm>  ?expR
    exp = @ASTBinaryBasicOp. new { !@location.here !exp !expR !21}
  end
}
###############################################################################
###############################################################################
###############################################################################
###############################################################################
#
##################################################
##     bitField. (syntax and semantic checked)
## {10..4,5,3}
## check:
##  * only unsigned values.
##  * in a range, 2nd value is smaller than the first one.
##  * can not access to a bit if size of data is not correct.
##  It returns the new size, (unsigned value).
##  Update: bitField can be empty {-} (used for formats..):
##          type is u0, fieldList is empty
##  Update: for formats, we need to access bit fields without braces
##          to respect LL1 grammar restrictions. Initial rule is split in 2.
##  major update: Extend bitfield to expressions. In order to keep a LL1
##          compliant grammar, the rule is rewritten specifically for formats
##          which allows only unsigned numbers. The empty bitfield is removed here.
##################################################

#rule <bitFieldWithoutBraces>
#  ?? @varMap varMap
#  ?? @containerMap containerMap
#  ?? @bool allowExpression
#  !  @fieldList fieldList
#  ?! @varAbstractType type
#  ?? @expressionContext expContext
#:
#  @varBaseType baseType := [type getBaseType];
#  [baseType checkKind ![@varKind unsigned]]; #bitfield on unsigned types only.
#  @uint nbMaxBitsTotal := 0;
#  fieldList := [@fieldList emptyList];
#  repeat
#    @uint nbMaxBits := [baseType size] - 1;
#    @bool firstValIsUint;
#    @uint fromBit;        #value must not be taken into account if firstValIsUint is false;
#    @cExpression fromExp;
#    <expression> !varMap ?fromExp !containerMap !0 !expContext;
#    [[fromExp type] checkKind ![@varKind unsigned]];
#    cast fromExp: #TODO: update with expression eval.
#    when == @cIntConst constVal do
#      firstValIsUint := true;
#      fromBit := [[constVal value] uint];
#      if fromBit >= [baseType size] then
#        error here : "bit access impossible with the type considered\n".
#          "size of data is ".[[baseType size] string]." bits";
#      end if;
#      if [constVal negative] then
#        error here: "Bit access impossible: negative value";
#      end if;
#      nbMaxBits := fromBit;
#    else
#      firstValIsUint := false;
#      fromBit := 0; #dummy value.
#      if not allowExpression then
#        error here: "Expressions not allowed in bitfields in this context";
#      end if;
#      #nbMaxBits correctly initialized.
#    end cast;
#    select #not a range -> only one bit.
#      fieldList += !fromExp !fromExp !1 !true !here; #only 1 bit, not depending of the expression.
#      nbMaxBits := 0; #there is the +1 at the end of the loop
#    or #range.
#      $..$;
#      @bool allValuesAreUint := false;
#      @cExpression toExp;
#      <expression> !varMap ?toExp !containerMap !0 !expContext;
#      [[toExp type]checkKind ![@varKind unsigned]];
#      cast toExp: #TODO: update with eval.
#      when == @cIntConst toBitConst do
#        if firstValIsUint then
#          allValuesAreUint := true;
#          if(fromBit  < [[toBitConst value] uint]) then
#            error here : "value is higher than the previous one in the range.";
#          end if;
#        end if;
#        if [toBitConst negative] then
#          error here: "Bit access impossible: negative value";
#        end if;
#        nbMaxBits := nbMaxBits - [[toBitConst value] uint];
#      else
#        if not allowExpression then
#          error here: "Expressions not allowed in bitfields in this context";
#        end if;
#        #nbMaxBits can't be resized.
#      end cast;
#      fieldList += !fromExp !toExp !nbMaxBits+1 !allValuesAreUint !here;
#    end select;
#    nbMaxBitsTotal := nbMaxBitsTotal + nbMaxBits + 1;
#  while
#  $,$;
#  end repeat;
#  type := [@varBaseType new ![@varKind unsigned] !nbMaxBitsTotal !here];
#end rule;
#
#rule <bitField>
#  ?? @varMap varMap
#  ?? @containerMap containerMap
#  ?? @bool allowExpression
#  !  @fieldList fieldList
#  ?! @varAbstractType expType
#  ?? @expressionContext expContext
#:
#  ${$;
#    <bitFieldWithoutBraces> !varMap !containerMap !allowExpression ?fieldList !?expType !expContext;
#  $}$;
#end rule;

rule <bitField>
  ! @ASTfieldList fieldList {
  fieldList = @ASTfieldList. emptyList
  ${$
  repeat
    @ASTExpression expFrom
    <expression> ?expFrom
    select
      fieldList += !expFrom !expFrom !true #expTo unused.
    or
      @ASTExpression expTo
      $..$
      <expression> ?expTo
      fieldList += !expFrom !expTo !false
    end
  while
    $,$
  end
  $}$
}

#
#
#######################
##routines
#######################
#
#routine checkFunctionCallType
#  ??@varType typeDef
#  ??@varType typeCall
#:
#  @location locDef := [typeDef location];
#  @location locCall := [typeCall location];
#  if [typeDef kind] != [typeCall kind] then
#    error here : "kind of argument in :". [locCall locationString] .
#      "is different than the defined sign in" . [locDef locationString].
#      "(unsigned, signed, float)";
#  end if;
#  if [typeDef size] < [typeCall size] then
#    if [option gadl_options.warnIfResultMayBeTruncated value] then
#     Warning here : "result may be truncated!\n".
#        "argument in call method requires ". [[typeCall size] string] ." bit(s) in ".[locCall locationString]."\n".
#        "while argument is defined with " .[[typeDef size] string] ." bit(s) in ".[locDef locationString];
#    end if;
#  end if;
#end routine;

}
# vim:ft=galgas:ts=2:sw=2:tw=0
