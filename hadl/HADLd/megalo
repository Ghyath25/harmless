
domain HADLd:EBNF filter "hadld" abstract

transformation HADLEcore2HADLdEcore (in IN:HADL:Ecore, out OUT:HADLd:Ecore) using ATLEngine:BASH:EBNF {
  SOURCE_MODELS=IN:HADL:Ecore,
  TARGET_MODELS=OUT:HADLd:Ecore,
  TRANSFORMATION_MODEL=HADL2HADLd:ASM:XML,
  LIBRARY_MODELS=strings:ASM:XML
}

transformation HADLdDepEcore (in IN:HADLd:Ecore, out OUT:HADLd:Ecore) using ATLEngine:BASH:EBNF {
  SOURCE_MODELS=IN:HADLd:Ecore,
  TARGET_MODELS=OUT:HADLd:Ecore,
  TRANSFORMATION_MODEL=HADLdDep:ASM:XML,
  LIBRARY_MODELS=strings:ASM:XML
}

transformation HADLdMergeEcore (in IN:HADLd:Ecore, out OUT:HADLd:Ecore) using ATLEngine:BASH:EBNF {
  SOURCE_MODELS=IN:HADLd:Ecore,
  TARGET_MODELS=OUT:HADLd:Ecore,
  TRANSFORMATION_MODEL=HADLdMerge:ASM:XML,
  LIBRARY_MODELS=strings:ASM:XML
}

transformation HADLdReduceEcore (in IN:HADLd:Ecore, out OUT:HADLd:Ecore) using ATLEngine:BASH:EBNF {
  SOURCE_MODELS=IN:HADLd:Ecore,
  TARGET_MODELS=OUT:HADLd:Ecore,
  TRANSFORMATION_MODEL=HADLdReduce:ASM:XML,
  LIBRARY_MODELS=strings:ASM:XML
}

transformation HADLdEcore2HADLdEBNF (in IN:HADLd:Ecore, out OUT:HADLd:EBNF) using EBNFExtractor:BASH:EBNF {
   SOURCE_MODEL=IN:HADLd:Ecore,
   TARGET_MODEL=OUT:HADLd:EBNF,
   SYNTAX_MODEL=HADLd:TCS:Ecore
}

