
package HADLi {

   abstract class NamedElement {
      attribute name : String;
   }

   class Model extends NamedElement {
      reference architectures[*] container : Architecture oppositeOf owningModel;
      reference pipelines[*] container : Pipeline oppositeOf owningModel;
      reference components[*] container : Component oppositeOf owningModel;
      reference variables[*] container : Variable oppositeOf owningModel;
   }

   class Architecture extends NamedElement {
      reference owningModel : Model oppositeOf architectures;
      reference fathers[*] : Architecture;
      reference ports[*] container : ExpandedPort oppositeOf owningArchitecture;
   }

   class ExpandedPort extends NamedElement {
      reference owningArchitecture : Architecture oppositeOf ports;
      reference component[0-1] : Component;
      reference operations[*] : Operation;
   }
   
   class Component extends NamedElement {
      reference owningModel : Model oppositeOf components;
      reference variables[*] container : Variable oppositeOf owningComponent;
      reference operations[*] container : Operation oppositeOf owningComponent;
   }

   class Operation extends NamedElement {
      reference owningComponent : Component oppositeOf operations;
      attribute isExternal : Boolean;
   }

   class Pipeline extends NamedElement {
      reference owningModel : Model oppositeOf pipelines;
      reference architecture : Architecture;
      reference stages[1-*] ordered container : Stage oppositeOf owningPipeline;
      reference instructions[*] container : Instruction oppositeOf owningPipeline;
      reference groups[*] container : Group oppositeOf owningPipeline;
   }

   class Stage extends NamedElement {
      reference owningPipeline : Pipeline oppositeOf stages;
      reference portActivations[*] container : ExpandedPortActivation oppositeOf owningStage;
   }

   class ExpandedPortActivation {
      reference owningStage : Stage oppositeOf portActivations;
      reference port : ExpandedPort;
      reference releaseStage[0-1] : Stage;
      reference bypassStages[*] : Stage;
   }

   class Instruction {
      attribute name : String;
      reference owningPipeline : Pipeline oppositeOf instructions;
      reference root container : Behavior oppositeOf owningInstruction;
      reference group[0-1] : Group oppositeOf instructions;
   }

   class Behavior extends NamedElement {
      reference statements[*] container : Statement oppositeOf owningBehavior;
      reference owningInstruction[0-1] : Instruction oppositeOf root;
      reference owningBehavior[0-1] : Behavior oppositeOf chunks;
      reference chunks[*] ordered container : Behavior oppositeOf owningBehavior;
   }

   class Variable extends NamedElement {
      attribute isGlobal : Boolean;
      reference owningModel[0-1] : Model oppositeOf variables;
      reference owningComponent[0-1] : Component oppositeOf variables;
      reference dependenciesSource[*] : DependencyStatement oppositeOf sourceVariables;
      reference dependenciesTarget[*] : DependencyStatement oppositeOf targetVariable;
   }

   abstract class Statement {
      reference owningBehavior[0-1] : Behavior oppositeOf statements;
      reference owningOperationCall[0-1] : OperationCall oppositeOf body;
      reference owningForStatement[0-1] : ForStatement oppositeOf body;
   }

   class ForStatement extends Statement {
      reference body[*] ordered container : Statement oppositeOf owningForStatement;
   }

   class OperationCall extends Statement {
      reference component : Component; -- only for name resolution purpose in TCS
      reference calledOperation : Operation;
      reference body[*] ordered container : Statement oppositeOf owningOperationCall;
      reference reservations[*] container : Reservation oppositeOf owningOperationCall;
   }

   class Reservation {
      reference owningOperationCall : OperationCall oppositeOf reservations;
      reference stage : Stage;
      reference port : ExpandedPort;
      reference releaseStage[0-1] : Stage;
      reference bypassStages[*] : Stage;
   }

   class DependencyStatement extends Statement {
      reference targetVariable : Variable oppositeOf dependenciesTarget;
      reference sourceVariables[*] : Variable oppositeOf dependenciesSource;
   }

   class Group extends NamedElement {
      reference owningPipeline : Pipeline oppositeOf groups;
      reference instructions[*] : Instruction oppositeOf group;
      reference signature[*] : Reservation;
   }
}

package PrimitiveTypes {
   
   datatype Boolean;
   datatype String;
   datatype Integer;
}

